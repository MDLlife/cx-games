	package main

	import "gl"
	import "glfw"
	import "gltext"

	var width i32 = 590
	var height i32 = 960

	var Block_TEXTURE i32
	var STAR_TEXTURE i32
	var DROP_TEXTURE i32
	var BG_TEXTURE i32

	var blocks []Block
	var stars []Star
	var drops []Drop
	var dropsArray [][]i32
	var testvalue i32=1

	var position i32 =0
	var figure i32 =1         //figure1=T
	var depth_value i32 =0
	var isdropping i32 =1
	var onetime i32 =0
	var onetime2 i32 =0
	var has_reached_bottom i32 =0
	var has_overlapped i32 =0
	var time f32=0.0
	var temp_time f32=0.0
	var temp_dropsarray_value i32
	var block_x_array_to_check i32
    var block4_has_been_processed i32
	var can_move i32=1
	var can_rotate i32=1
	var isdropping_temp i32 =1

	type Bg struct{
	x f32
	y f32
	}
	var bg Bg
	type Block struct {
		x f32
		y f32
		id i32
		x_array i32
		y_array i32
	}

	type Star struct {
		x f32
		y f32
		b f32
	}

	type Drop struct {
		x f32
		y f32
		b f32
	}
	
	func foo_read (array [][]i32, row i32, column i32) (element i32) {
		bar := [][]i32.read(array, row)
		element = []i32.read(bar, column)
	}

	func foo_write (array [][]i32, row i32, column i32, element i32) (out [][]i32) {
		read_row := [][]i32.read(array, row)
		rewritten_row = []i32.write(read_row, column, element)
		out = [][]i32.write(array, row, rewritten_row)
	}
	
	func (block Block) Move () {
		// We need pointers
		block.x += 0.05
	}

	func (bg Bg) Draw () {
		gl.LoadIdentity()
		gl.Translatef(bg.x, bg.y, 0.0)
		// this is the only difference between Coin.Draw and Star.Draw actually
		gl.BindTexture(gl.TEXTURE_2D, BG_TEXTURE)
		gl.Scalef(1.0, 1.0, 0.0)
		gl.Begin(gl.QUADS)
		gl.TexCoord2d(0.0, 0.0)
		gl.Vertex3f(-1.0, 1.0, 0.0)
		gl.TexCoord2d(1.0, 0.0)
		gl.Vertex3f(1.0, 1.0, 0.0)
		gl.TexCoord2d(1.0, 1.0)
		gl.Vertex3f(1.0, -1.0, 0.0)
		gl.TexCoord2d(0.0, 1.0)
		gl.Vertex3f(-1.0, -1.0, 0.0)
		gl.End()
	}



	func (block Block) Draw () {
		gl.LoadIdentity()
		gl.Translatef(block.x, block.y, 0.0)
		// this is the only difference between Coin.Draw and Star.Draw actually
		gl.BindTexture(gl.TEXTURE_2D, Block_TEXTURE)
		gl.Scalef(0.07627, 0.04687, 0.0)
		gl.Begin(gl.QUADS)
		gl.TexCoord2d(0.0, 0.0)
		gl.Vertex3f(-1.0, 1.0, 0.0)
		gl.TexCoord2d(1.0, 0.0)
		gl.Vertex3f(1.0, 1.0, 0.0)
		gl.TexCoord2d(1.0, 1.0)
		gl.Vertex3f(1.0, -1.0, 0.0)
		gl.TexCoord2d(0.0, 1.0)
		gl.Vertex3f(-1.0, -1.0, 0.0)
		gl.End()
	}

	func (drop Drop) Draw () {
		gl.LoadIdentity()
		gl.Translatef(drop.x, drop.y, 0.0)
		// this is the only difference between Coin.Draw and Star.Draw actually
		gl.BindTexture(gl.TEXTURE_2D, DROP_TEXTURE)
		gl.Scalef(0.07627, 0.04687, 0.0)
		gl.Begin(gl.QUADS)
		gl.TexCoord2d(0.0, 0.0)
		gl.Vertex3f(-1.0, 1.0, 0.0)
		gl.TexCoord2d(1.0, 0.0)
		gl.Vertex3f(1.0, 1.0, 0.0)
		gl.TexCoord2d(1.0, 1.0)
		gl.Vertex3f(1.0, -1.0, 0.0)
		gl.TexCoord2d(0.0, 1.0)
		gl.Vertex3f(-1.0, -1.0, 0.0)
		gl.End()
	}

	func (star Star) Draw () {
		gl.LoadIdentity()
		gl.Translatef(star.x, star.y, 0.0)
		// this is the only difference between Coin.Draw and Star.Draw actually
		gl.BindTexture(gl.TEXTURE_2D, STAR_TEXTURE)
		gl.Scalef(0.05, 0.05, 0.0)
		gl.Begin(gl.QUADS)
		gl.TexCoord2d(0.0, 0.0)
		gl.Vertex3f(-1.0, 1.0, 0.0)
		gl.TexCoord2d(1.0, 0.0)
		gl.Vertex3f(1.0, 1.0, 0.0)
		gl.TexCoord2d(1.0, 1.0)
		gl.Vertex3f(1.0, -1.0, 0.0)
		gl.TexCoord2d(0.0, 1.0)
		gl.Vertex3f(-1.0, -1.0, 0.0)
		gl.End()
	}

	func shiftblockstoleft(){
	var newBlocks []Block

	for c := 0; c < []Block.len(blocks); c++ {


				var block Block
				block := []Block.read(blocks, c)
				block.x=block.x - 0.15
				block.x_array=block.x_array - 1 
				newBlocks = []Block.append(newBlocks, block)
	}
	blocks = newBlocks
	}

	func check_if_can_move_to_left(){
	for c := 0; c < []Block.len(blocks); c++ {


				var block Block
				block := []Block.read(blocks, c)
				if(figure==1){
				if(position==0){
				if(block.id==1){
				if(block.x_array==0){
				can_move=0
				}
				}
				
				
				//check if overlap other drops
				if(block.id==1||block.id==4){
				if(block.x_array>0){
				if(foo_read(dropsArray,block.y_array + 1,block.x_array - 1)==1||foo_read(dropsArray,block.y_array ,block.x_array - 1)==1){
				can_move=0
				}
				
				}}
				
				}
				
				if(position==1){
				if(block.id==1){
				if(block.x_array==0){
				can_move=0
				}}
				
				//check if overlap other drops
				if(block.id==1||block.id==2||block.id==3){
				if(block.x_array>0){
				if(foo_read(dropsArray,block.y_array + 1,block.x_array - 1)==1||foo_read(dropsArray,block.y_array ,block.x_array - 1)==1){
				can_move=0
				}
				
				}}
				
				
				
				
				
				
				
				
				}
				
				if(position==2){
				if(block.id==3){
				if(block.x_array==0){
				can_move=0
				}}
				
				
				//check if overlap other drops
				if(block.id==4||block.id==3){
				if(block.x_array>0){
				if(foo_read(dropsArray,block.y_array + 1,block.x_array - 1)==1||foo_read(dropsArray,block.y_array ,block.x_array - 1)==1){
				can_move=0
				}
				
				}}
				
				}
				
				if(position==3){
				if(block.id==4){
				if(block.x_array==0){
				can_move=0
				}}
				
				
				//check if overlap other drops
				if(block.id==1||block.id==3||block.id==4){
				if(block.x_array>0){
				if(foo_read(dropsArray,block.y_array + 1,block.x_array - 1)==1||foo_read(dropsArray,block.y_array ,block.x_array - 1)==1){
				can_move=0
				}
				
				}}
				
				}

	}
	
	}



	}

	func check_if_can_move_to_right(){
	for c := 0; c < []Block.len(blocks); c++ {


				var block Block
				block := []Block.read(blocks, c)
				if(figure==1){
				if(position==0){
				if(block.id==3){
				if(block.x_array==8){
				can_move=0
				}}
				
				//check if overlap other drops
				if(block.id==4||block.id==3){
				if(block.x_array<8){
				if(foo_read(dropsArray,block.y_array + 1,block.x_array + 1)==1||foo_read(dropsArray,block.y_array ,block.x_array + 1)==1){
				can_move=0
				}
				
				}}
				
				}
				
				if(position==1){
				if(block.id==4){
				if(block.x_array==8){
				can_move=0
				}}
				
				//check if overlap other drops
				if(block.id==1||block.id==4||block.id==3){
				if(block.x_array<8){
				if(foo_read(dropsArray,block.y_array + 1,block.x_array + 1)==1||foo_read(dropsArray,block.y_array ,block.x_array + 1)==1){
				can_move=0
				}
				
				}}
				}
				
				if(position==2){
				if(block.id==1){
				if(block.x_array==8){
				can_move=0
				}}
				
				
				//check if overlap other drops
				if(block.id==1||block.id==4){
				if(block.x_array<8){
				if(foo_read(dropsArray,block.y_array + 1,block.x_array + 1)==1||foo_read(dropsArray,block.y_array ,block.x_array + 1)==1){
				can_move=0
				}
				
				}}
				}
				
				if(position==3){
				if(block.id==1){
				if(block.x_array==8){
				can_move=0
				}}
				
				//check if overlap other drops
				if(block.id==1||block.id==2||block.id==3){
				if(block.x_array<8){
				if(foo_read(dropsArray,block.y_array + 1,block.x_array + 1)==1||foo_read(dropsArray,block.y_array ,block.x_array + 1)==1){
				can_move=0
				}
				
				}}
				
				}

	}
	}


	}
	func shiftblockstoright(){
	var newBlocks []Block

	for c := 0; c < []Block.len(blocks); c++ {


				var block Block
				block := []Block.read(blocks, c)
				block.x=block.x + 0.15
				block.x_array=block.x_array + 1 
				newBlocks = []Block.append(newBlocks, block)
	}
	blocks = newBlocks
	}

	func newblocks() //aici pui blockurile la pozitia de start
	{
	var newBlocks []Block

	for c := 0; c < []Block.len(blocks); c++ {


				var block Block
				block := []Block.read(blocks, c)

				//block.x= -0.87+0.6; block.y=0.7
				if(block.id==1){
				block.x= -0.87+0.6
				block.x_array=4
				block.y=0.7
				}
				if(block.id==2){block.x= -0.87+0.75;block.x_array=5; block.y=0.7}
				if(block.id==3){block.x= -0.87+0.9;block.x_array=6; block.y=0.7}
				if(block.id==4){block.x= -0.87+0.75;block.x_array=5; block.y=0.79}
				//block.x= -0.87+0.6; block.y=0.7
				newBlocks = []Block.append(newBlocks, block)
	}
	blocks = newBlocks
	isdropping=1
	isdropping_temp=1
	//sleep(1000)//pauses the whole game
	//temp_time=time
	onetime=0
	onetime2=0
	isOverlapped = false
	//str.print("ajunge_aci")
	}

	func transform_blocks_drops(){
	//var newBlocks []Block
	var newDrops []Drop
	//newBlocks = []
	//blocks = newBlocks
	position=0
	for c := 0; c < []Block.len(blocks); c++ {


				var block Block
				block := []Block.read(blocks, c)

				dropsArray = foo_write(dropsArray, block.y_array, block.x_array, 1)
				drops = []Drop.append(drops, new Drop{
				x: block.x,
				y: block.y
			})
	}
	for d := 0; d < 23; d++ { 
	row = [][]i32.read(dropsArray, d)
	[]i32.print(row)
	
	}
	//str.print("ajunge_aci")
	//newBlocks = []i32.make(4)
	//blocks = newBlocks
	newblocks()
	//isdropping=1
	}

	func blocksdropping(){
	var newBlocks []Block

	for c := 0; c < []Block.len(blocks); c++ {

				
				var block Block
				block := []Block.read(blocks, c)
				
				if(isdropping==1){
				block.y=block.y - 0.001

				}
				if(block.id==1){
				block4_has_been_processed = 0
				
				}
				if(block.y<-0.91){
				depth_value=21
					//has collided bottom
					 //isdropping=0
					 isdropping_temp=0
					 //if(isdropping==0 ){
					 if(isdropping_temp==0){
						
					 has_reached_bottom=1
					
					 }
					}
				


					if(block.y > -0.91 && block.y < -0.82){ depth_value=20  }
					if(block.y > -0.82 && block.y < -0.73){ depth_value=19  }
					if(block.y > -0.73 && block.y < -0.64){ depth_value=18  }
					if(block.y > -0.64 && block.y < -0.55){ depth_value=17  }
					if(block.y > -0.55 && block.y < -0.46){ depth_value=16  }
					if(block.y > -0.46 && block.y < -0.37){ depth_value=15  }
					if(block.y > -0.37 && block.y < -0.28){ depth_value=14  }
					if(block.y > -0.28 && block.y < -0.19){ depth_value=13  }
					if(block.y > -0.19 && block.y < -0.1){ depth_value=12  }
					if(block.y > -0.1 && block.y < -0.01){ depth_value=11  }
					if(block.y > -0.01 && block.y < 0.08){ depth_value=10  }
					if(block.y >  0.08 && block.y < 0.17){ depth_value=9  }
					if(block.y >  0.17 && block.y < 0.26){ depth_value=8  }
					if(block.y >  0.26 && block.y < 0.35){ depth_value=7  }
					if(block.y >  0.35 && block.y < 0.44){ depth_value=6  }
					if(block.y >  0.44 && block.y < 0.53){ depth_value=5  }
					if(block.y >  0.53 && block.y < 0.62){ depth_value=4  }
					if(block.y >  0.62 && block.y < 0.71){ depth_value=3  }
					if(block.y >  0.71 && block.y < 0.8){ depth_value=2  }
					if(block.y >  0.8 && block.y < 0.89){ depth_value=1  }
					if(block.y >  0.89 && block.y < 0.98){ depth_value=0  }
					block.y_array=depth_value
					//if(block.id==2){
				//str.print(str.concat("Y_array: ", i32.str(block.y_array)))
				//str.print(str.concat("block4 has been proce: ", i32.str(block4_has_been_processed)))
				//}
				block4_has_been_processed = 0
				if(block.id==4){
				block4_has_been_processed = 1
				if(isdropping_temp==0){
				
				isdropping=0
				}
				
				}
				newBlocks = []Block.append(newBlocks, block)
	}
	blocks = newBlocks
	if(has_reached_bottom==1&& onetime==0&& block4_has_been_processed == 1){
	onetime=1
	has_reached_bottom=0
	transform_blocks_drops()
	}

	if(has_overlapped==0){
				check_overlap_block_drop2()
				}
	}
	

	func check_overlap_block_drop2(){
	var newBlocks []Block
	for c := 0; c < []Block.len(blocks); c++ {
				var block Block
				block = []Block.read(blocks, c)

				isOverlapped := false

				for s := 0; s < []Drop.len(drops); s++ {
					var drop Drop
					drop = []Drop.read(drops, s)

					if block.x + 0.15 > drop.x && block.x - 0.15 < drop.x &&
						block.y + 0.09 > drop.y && block.y - 0.09 < drop.y {
						isOverlapped = true
						isdropping=0
						has_overlapped=1
					}
				}

				// we save the coins that are not being overlapped
				//if !isOverlapped {
					newBlocks = []Block.append(newBlocks, block)
				//}
			}
			blocks = newBlocks
	if(has_overlapped==1&& onetime2==0){
	onetime2=1
	str.print("block_overlap_drop")
	transform_blocks_drops()
	has_overlapped=0
	}
	}
	func check_overlap_block_drop()
	{
	var newBlocks []Block
	//str.print("ajunge_aci")
	for s := 0; s < []Drop.len(drops); s++ {
				var drop Drop
				drop = []Drop.read(drops, s)

				isOverlapped := false

				for c := 0; c < []Block.len(blocks); c++ {
					var block Block
					block = []Block.read(blocks, c)

					if drop.x + 0.12 > block.x && drop.x - 0.12 < block.x &&
						drop.y + 0.09 > block.y && drop.y - 0.09 < block.y {
						isOverlapped = true
						isdropping=0
						has_overlapped=1
					}
					//newBlocks = []Block.append(newBlocks, block)
				}


			}
	//blocks = newBlocks
	if(has_overlapped==1&& onetime2==0){
	onetime2=1

	transform_blocks_drops()
	has_overlapped=0
	}
	}

	func check_if_can_rotate(){
	for c := 0; c < []Block.len(blocks); c++ {


				var block Block
				block := []Block.read(blocks, c)
				//str.print(str.concat("block_id: ", i32.str(block.id)))
				if(figure==1){


			if(position==0){

				if(block.id==2){
				if(block.y_array==20){
				can_rotate=0
				}}
				
				//check if overlap other drops
				if(block.id==2){
				
				if(foo_read(dropsArray,block.y_array + 1,block.x_array )==1||foo_read(dropsArray,block.y_array+2 ,block.x_array )==1){
				can_rotate=0
				}
				}

				
			
			}

			if(position==1){

				if(block.id==1){
				if(block.x_array==0){
				can_rotate=0
				}}
				
				//check if overlap other drops
				if(block.id==2){
				
				if(foo_read(dropsArray,block.y_array + 1,block.x_array - 1)==1||foo_read(dropsArray,block.y_array ,block.x_array - 1)==1){
				can_rotate=0
				}
				}
			}
			if(position==2){

				
				
				//check if overlap other drops
				if(block.id==2){
				
				if(foo_read(dropsArray,block.y_array + 1,block.x_array )==1||foo_read(dropsArray,block.y_array + 2 ,block.x_array )==1){
				can_rotate=0
				}
				}
			}


			if(position==3){

				if(block.id==1){
				if(block.x_array==8){
				can_rotate=0
				}}
				
				
				//check if overlap other drops
				if(block.id==2){
				
				if(foo_read(dropsArray,block.y_array + 1,block.x_array + 1)==1||foo_read(dropsArray,block.y_array ,block.x_array + 1)==1){
				can_rotate=0
				}
				}
			}
			}



	}
	}
	func repositionBlock(){
	var newBlocks []Block

	for c := 0; c < []Block.len(blocks); c++ {


				var block Block
				block := []Block.read(blocks, c)
				//str.print(str.concat("block_id: ", i32.str(block.id)))
				if(figure==1){
			if(position==1){

				if(block.id==1){

				block.x=block.x + 0.15
				block.x_array=block.x_array + 1
				block.y=block.y + 0.09

				}
				if(block.id==2){

				//block.x=block.x+0.05
				//block.y=block.y+30
				str.print("pos1")

				}

				if(block.id==3)
				{
				block.x=block.x - 0.15
				block.x_array=block.x_array - 1
				block.y=block.y - 0.09
				}

				if(block.id==4){

				block.x=block.x+0.15
				block.x_array=block.x_array + 1
				block.y=block.y - 0.09

				}
			}

			if(position==2){

				if(block.id==1){

				block.x=block.x + 0.15
				block.x_array=block.x_array + 1
				block.y=block.y - 0.09

				}
				if(block.id==2){

				//block.x=block.x+0.05
				//block.y=block.y+30
				str.print("pos2")

				}

				if(block.id==3)
				{
				block.x=block.x - 0.15
				block.x_array=block.x_array - 1
				block.y=block.y + 0.09
				}

				if(block.id==4){

				block.x=block.x - 0.15
				block.x_array=block.x_array - 1
				block.y=block.y - 0.09

				}
			}

			if(position==3){

				if(block.id==1){

				block.x=block.x - 0.15
				block.x_array=block.x_array - 1
				block.y=block.y - 0.09

				}
				if(block.id==2){

				//block.x=block.x+0.05
				//block.y=block.y+30
				str.print("pos3")

				}

				if(block.id==3)
				{
				block.x=block.x + 0.15
				block.x_array=block.x_array + 1
				block.y=block.y + 0.09
				}

				if(block.id==4){

				block.x=block.x - 0.15
				block.x_array=block.x_array - 1
				block.y=block.y + 0.09

				}
			}
			if(position==4){

				if(block.id==1){

				block.x=block.x - 0.15
				block.x_array=block.x_array - 1
				block.y=block.y + 0.09

				}
				if(block.id==2){

				//block.x=block.x+0.05
				//block.y=block.y+30
				str.print("pos4")

				}

				if(block.id==3)
				{
				block.x=block.x + 0.15
				block.x_array=block.x_array + 1
				block.y=block.y - 0.09
				}

				if(block.id==4){

				block.x=block.x + 0.15
				block.x_array=block.x_array + 1
				block.y=block.y + 0.09

				}
			}
			}


			//str.print(str.concat("block: ", f32.str(block.x)))
			 //[]Block.write(blocks, index, newCoin)
			 newBlocks = []Block.append(newBlocks, block)
			}

	//newBlocks = []Block.append(newBlocks, block)
	blocks = newBlocks
	}

	func keyPress (window str, key i32, scancode i32, action i32, mods i32) {
		// 77 is the keycode corresponding to keyboard key "m"
		if key == 77 && action == 1 {
			for c := 0; c < []Block.len(blocks); c++ {
				block := []Block.read(blocks, c)
				block.Move()
				//block.x=block.x+0.5
			}
		}
	//left 263 right 262 space 32

	if (key==32&& action ==1){
	can_rotate=1
	check_if_can_rotate()
	if(can_rotate==1){
	position=position+1
	repositionBlock()
	if(position==4){position=0}
	}
	}

	if (key==263&& action ==1){
	can_move=1
	check_if_can_move_to_left()
	if(can_move==1){
	shiftblockstoleft()
	}
	}

	if (key==262&& action ==1){
	can_move=1
	check_if_can_move_to_right()
	if(can_move==1){
	shiftblockstoright()
	}
	}



		if key == 32 && action == 1 {
			var newBlocks []Block
			var newStars []Star

			// first we'll find what stars are not being overlapped
			for s := 0; s < []Star.len(stars); s++ {
				var star Star
				star = []Star.read(stars, s)

				isOverlapped := false

				for c := 0; c < []Block.len(blocks); c++ {
					var block Block
					block = []Block.read(blocks, c)

					if star.x + 0.05 > block.x && star.x - 0.05 < block.x &&
						star.y + 0.05 > block.y && star.y - 0.05 < block.y {
						isOverlapped = true

					}
				}

				if !isOverlapped {
					// we save the stars that are not being overlapped
					newStars = []Star.append(newStars, star)
				}
			}

			// now we'll find what coins are not being overlapped
			for c := 0; c < []Block.len(blocks); c++ {
				var block Block
				block = []Block.read(blocks, c)

				isOverlapped := false

				for s := 0; s < []Star.len(stars); s++ {
					var star Star
					star = []Star.read(stars, s)

					if block.x + 0.05 > star.x && block.x - 0.05 < star.x &&
						block.y + 0.05 > star.y && block.y - 0.05 < star.y {
						isOverlapped = true
					}
				}

				// we save the coins that are not being overlapped
				if !isOverlapped {
					newBlocks = []Block.append(newBlocks, block)
				}
			}

			// we overwrite the old struct instances with the new ones
			blocks = newBlocks
			stars = newStars
		}
	}


	

	func mouseButton (window str, key i32, action i32, mods i32) {
		x, y := glfw.GetCursorPos("window")
		/*if key == glfw.MouseButtonLeft {
			if action == glfw.Press {
				blocks = []Block.append(blocks, new Block{
					// we need to scale the width and height to min = -1.0 and max = 1.0
					x: (2.0 * f64.f32(x) / i32.f32(width)) - 1.0,
					y: -1.0 * ((2.0 * f64.f32(y) / i32.f32(height)) - 1.0)
				})
			}
		}*/

		/*if key == glfw.MouseButtonRight {
			if action == glfw.Press {

				// we'll create a new array of coins, which will contain all the old coins
				// except for the one we clicked on
				var newBlocks []Block

				for c := 0; c < []Block.len(blocks); c++ {
					block := []Block.read(blocks, c)
					sx := (2.0 * f64.f32(x) / i32.f32(width)) - 1.0
					sy := -1.0 * ((2.0 * f64.f32(y) / i32.f32(height)) - 1.0)

					// the size of a coin is 0.05, so we use that as an offset for the boundaries
					if !(sx + 0.05 > block.x && sx - 0.05 < block.x &&
						sy + 0.05 > block.y && sy - 0.05 < block.y) {
						newBlocks = []Block.append(newBlocks, block)
					}
				}

				// we replace the old coins with the new coins
				blocks = newBlocks
			}
		}*/
	}

	func init () {
		wd := os.GetWorkingDirectory()
		Block_TEXTURE = gl.NewTexture(str.concat(wd, "textures/tile113.png"))
		STAR_TEXTURE = gl.NewTexture(str.concat(wd, "textures/star.png"))
		DROP_TEXTURE = gl.NewTexture(str.concat(wd, "textures/tile113.png"))
		BG_TEXTURE = gl.NewTexture(str.concat(wd, "textures/background.jpg"))
	}

	func main () {
		glfw.Init()

		glfw.CreateWindow("window", width, height, "Tetris 1.0")
		glfw.MakeContextCurrent("window")

		gl.Init()
		program := gl.CreateProgram()
		gl.LinkProgram(program)

		wd := os.GetWorkingDirectory()
		fontFile := str.concat(wd, "fonts/roboto-light.ttf")

		os.Open(fontFile)
		gltext.LoadTrueType("Roboto50", fontFile, 50, 32, 127, gltext.LeftToRight)
		os.Close(fontFile)

		init()

		glfw.SetKeyCallback("window", "keyPress")
		glfw.SetMouseButtonCallback("window", "mouseButton")

		/*for c := 0; c < 10; c++ {
			stars = []Star.append(stars, new Star{
				x: i32.f32(i32.rand(0, 200)) / 100.0 - 1.0,
				y: i32.f32(i32.rand(0, 200)) / 100.0 - 1.0
			})
		}*/

		dropsArray= [][]i32.make(23)
		dropsArray= [][]i32.write(dropsArray,0,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,1,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,2,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,3,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,4,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,5,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,6,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,7,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,8,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,9,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,10,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,11,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,12,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,13,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,14,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,15,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,16,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,17,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,18,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,19,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,20,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,21,[]i32{0,0,0,0,0,0,0,0,0})
		dropsArray= [][]i32.write(dropsArray,22,[]i32{0,0,0,0,0,0,0,0,0})


		//testvalue= [][]i32.read(dropsArray,0)
		//str.print(str.concat("testvalue: ", i32.str(testvalue)))



		blocks = []Block.append(blocks, new Block{
					// we need to scale the width and height to min = -1.0 and max = 1.0
					//x: (2.0 * 100.0 / i32.f32(width)) - 1.0,
					//y: -1.0 * ((2.0 * 200.0/ i32.f32(height)) - 1.0),

					x: -0.87+0.6 ,//+0.15 per x +0.09 per y
					y:  0.7 ,
					id: 1,
					x_array: 4
				})
		blocks = []Block.append(blocks, new Block{
					// we need to scale the width and height to min = -1.0 and max = 1.0
					//x: (2.0 * 120.0 / i32.f32(width)) - 1.0,
					//y: -1.0 * ((2.0 * 200.0/ i32.f32(height)) - 1.0),
					x:-0.87+0.75,
					y: 0.7,
					id: 2,
					x_array: 5
				})	
		blocks = []Block.append(blocks, new Block{
					// we need to scale the width and height to min = -1.0 and max = 1.0
					//x: (2.0 * 140.0 / i32.f32(width)) - 1.0,
					//y: -1.0 * ((2.0 * 200.0/ i32.f32(height)) - 1.0),
					x:-0.87+0.9,
					y: 0.7,
					id: 3,
					x_array: 6
				})	
		blocks = []Block.append(blocks, new Block{
					// we need to scale the width and height to min = -1.0 and max = 1.0
					//x: (2.0 * 120.0 / i32.f32(width)) - 1.0,
					//y: -1.0 * ((2.0 * 180.0/ i32.f32(height)) - 1.0),
					x:-0.87+0.75,
					y: 0.79,
					id: 4,
					x_array: 5
				})
		/*bg= new Bg{
		x:0.0,
		y:0.0
		}*/
		bg.x=0.0
		bg.y=0.0
		//bg.Draw()
		//


		//
		gl.Enable(gl.BLEND)
		gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
		gl.DepthMask(true)

		for not(glfw.ShouldClose("window")) {
			gl.ClearColor(0.0, 0.0, 0.0, 1.0)
			gl.Clear(gl.COLOR_BUFFER_BIT)

			gl.Enable(gl.TEXTURE_2D)
			bg.Draw()
			for c := 0; c < []Block.len(blocks); c++ {
				block := []Block.read(blocks, c)
				block.Draw()
			}
			for c := 0; c < []Star.len(stars); c++ {
				star := []Star.read(stars, c)
				star.Draw()
			}
			for c := 0; c < []Drop.len(drops); c++ {
				drop := []Drop.read(drops, c)
				drop.Draw()
			}
			//str.print("ajunge_aci")
			//str.print(str.concat("position: ", i32.str(position)))
			blocksdropping()
			time=time+0.01
			if(time - 1.0 > temp_time){
			temp_time=0.0
			onetime=0

			}
			//str.print(str.concat("time: ", f32.str(time)))
			gl.UseProgram(program)

			glfw.PollEvents()
			glfw.SwapBuffers("window")
		}
	}
