package draw

import "gl"
import "gltext"
import "os"

import "map"
import "shape"



var Block_TEXTURE i32
var STAR_TEXTURE i32
var BG_TEXTURE i32



func Init () {
	wd := os.GetWorkingDirectory()
	
	// pics 
	Block_TEXTURE = gl.NewTexture(str.concat(wd, "assets/textures/tile.png"))
	STAR_TEXTURE  = gl.NewTexture(str.concat(wd, "assets/textures/star.png"))
	BG_TEXTURE    = gl.NewTexture(str.concat(wd, "assets/textures/background.jpg"))

	// font 
	fontFile := str.concat(wd, "assets/fonts/roboto-light.ttf")
	os.Open(fontFile)
	gltext.LoadTrueType("Roboto50", fontFile, 50, 32, 127, gltext.LeftToRight)
	os.Close(fontFile)
}


func PicAtScale (picId i32, x f32, y f32, scaleX f32, scaleY f32) {
	gl.LoadIdentity()
	gl.Translatef(x, y, 0.0)
	
	// only diff
	
	gl.BindTexture(gl.TEXTURE_2D, picId)
	gl.Scalef(scaleX, scaleY, 0.0)
	
	gl.Begin(gl.QUADS)
		gl.TexCoord2d(0.0D, 0.0D)
		gl.Vertex3f(-1.0, 1.0, 0.0)
		
		gl.TexCoord2d(1.0D, 0.0D)
		gl.Vertex3f(1.0, 1.0, 0.0)
		
		gl.TexCoord2d(1.0D, 1.0D)
		gl.Vertex3f(1.0, -1.0, 0.0)
		
		gl.TexCoord2d(0.0D, 1.0D)
		gl.Vertex3f(-1.0, -1.0, 0.0)
	gl.End()
}


func MapColumn () {
	var f f32 = 0.17
	gl.Color3f(f, f, f)
	
	var fX f32 = map.LEdge + map.CellWidthHalf
	var fY f32 = -0.95 + map.CellHeightHalf

	for y := 0; y < map.NUM_CELLS_Y; y++ {
		for x := 0; x < map.NUM_CELLS_X; x++ {
			PicAtScale(
				Block_TEXTURE, 
				f32.add(fX, f32.mul(i32.f32(x), map.CellWidth)),
				f32.add(fY, f32.mul(i32.f32(y), map.CellHeight)), 
				map.CellWidthHalf, 
				map.CellHeightHalf)
		}
	}
}


func PlayerPiece () {
	gl.Color3f(1.0, 0.0, 1.0)
	
	var fX f32 = map.LEdge + map.CellWidthHalf
	var fY f32 = -0.95 + map.CellHeightHalf

	for y := 0; y < 5; y++ {
		for x := 0; x < 5; x++ {
			if shape.Cells[y][x] {
				PicAtScale(
					Block_TEXTURE, 
					f32.add(fX, f32.mul(i32.f32(x - 2 + shape.PlayerPos.X), map.CellWidth)),
					f32.add(fY, f32.mul(i32.f32(y - 2 + shape.PlayerPos.Y), map.CellHeight)), 
					map.CellWidthHalf, 
					map.CellHeightHalf)
			}
		}
	}
}