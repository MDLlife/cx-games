package draw

import "gl"
import "gltext"
import "os"

import "app"
import "map"
import "shape"



var PicBackground i32
var PicStar       i32
var PicShapeTile  i32
var dir           str


func Init () {
	str.print("draw.Init ()")
	
	dir := os.GetWorkingDirectory()
	InitFontsAndMenuItems()

	// pics 
	PicBackground = gl.NewTexture(str.concat(dir, "assets/textures/background.jpg"))
	PicStar       = gl.NewTexture(str.concat(dir, "assets/textures/star.png"))
	PicShapeTile  = gl.NewTexture(str.concat(dir, "assets/textures/tile.png"))
}


func All () {
	//gl.UseProgram(prog)
	
	//gl.MatrixMode(gl.PROJECTION)
	//gl.LoadIdentity()
	//gl.MatrixMode(gl.MODELVIEW)

	scaledPic(PicBackground, 0.0, 0.0, 1.0, 1.0)
	PlayField()
	PlayerPiece()

	if menu.ShowNextShape {
		NextShape()
	}
		
	if app.Mode <= app.MODE_MENU_OPTIONS { // in a menu 
		menuRects()
		
		gl.Enable(gl.DEPTH_TEST)
			menuTexts()
			scoreText()
		gl.Disable(gl.DEPTH_TEST)
	}else{
		gl.Enable(gl.DEPTH_TEST)
			scoreText()
		gl.Disable(gl.DEPTH_TEST)
	}
}


func sizedPicAt (picId i32, x f32, y f32, scaleX f32, scaleY f32) {
	gl.LoadIdentity()

	gl.BindTexture(gl.TEXTURE_2D, picId)
	gl.Translatef(x, y, 0.0)
	gl.Scalef(scaleX, scaleY, 0.0)

	gl.Begin(gl.QUADS)
		gl.TexCoord2d(0.0D, 0.0D)
		gl.Vertex3f(-0.5, 0.5, 0.0)
		
		gl.TexCoord2d(1.0D, 0.0D)
		gl.Vertex3f(0.5, 0.5, 0.0)
		
		gl.TexCoord2d(1.0D, 1.0D)
		gl.Vertex3f(0.5, -0.5, 0.0)
		
		gl.TexCoord2d(0.0D, 1.0D)
		gl.Vertex3f(-0.5, -0.5, 0.0)
	gl.End()
}


func sizedNotStretchedPicAt (picId i32, x f32, y f32, scaleX f32, scaleY f32) {
	var tosy f32 = scaleY / 3.0 // 3rd of scale y 
	var ome f32 // offset (to) middle (section) extent 
	ome = scaleX - tosy
	ome = ome - tosy
	ome = ome / 2.0
	ome = ome * 0.5
	
	gl.LoadIdentity()

	gl.BindTexture(gl.TEXTURE_2D, picId)
	gl.Translatef(x, y, 0.0)
	gl.Scalef(scaleX, scaleY, 0.0)

	gl.Begin(gl.QUADS)
		gl.TexCoord2d(0.0D, 0.0D)
		gl.Vertex3f(-0.5, 0.5, 0.0)
		
		gl.TexCoord2d(0.33D, 0.0D)
		gl.Vertex3f(-ome, 0.5, 0.0)
		
		gl.TexCoord2d(0.33D, 1.0D)
		gl.Vertex3f(-ome, -0.5, 0.0)
		
		gl.TexCoord2d(0.0D, 1.0D)
		gl.Vertex3f(-0.5, -0.5, 0.0)



		gl.TexCoord2d(0.33D, 0.0D)
		gl.Vertex3f(-ome, 0.5, 0.0)
		
		gl.TexCoord2d(0.66D, 0.0D)
		gl.Vertex3f(ome, 0.5, 0.0)
		
		gl.TexCoord2d(0.66D, 1.0D)
		gl.Vertex3f(ome, -0.5, 0.0)
		
		gl.TexCoord2d(0.33D, 1.0D)
		gl.Vertex3f(-ome, -0.5, 0.0)



		gl.TexCoord2d(0.66D, 0.0D)
		gl.Vertex3f(ome, 0.5, 0.0)
		
		gl.TexCoord2d(1.0D, 0.0D)
		gl.Vertex3f(0.5, 0.5, 0.0)
		
		gl.TexCoord2d(1.0D, 1.0D)
		gl.Vertex3f(0.5, -0.5, 0.0)
		
		gl.TexCoord2d(0.66D, 1.0D)
		gl.Vertex3f(ome, -0.5, 0.0)
	gl.End()
}


func scaledPic (picId i32, x f32, y f32, scaleX f32, scaleY f32) {
	gl.LoadIdentity()

	gl.BindTexture(gl.TEXTURE_2D, picId)
	gl.Translatef(x, y, 0.0)
	gl.Scalef(scaleX, scaleY, 0.0)
	
	gl.Begin(gl.QUADS)
		gl.TexCoord2d(0.0D, 0.0D)
		gl.Vertex3f(-1.0, 1.0, 0.0)
		
		gl.TexCoord2d(1.0D, 0.0D)
		gl.Vertex3f(1.0, 1.0, 0.0)
		
		gl.TexCoord2d(1.0D, 1.0D)
		gl.Vertex3f(1.0, -1.0, 0.0)
		
		gl.TexCoord2d(0.0D, 1.0D)
		gl.Vertex3f(-1.0, -1.0, 0.0)
	gl.End()
}


func PlayField () {
	var fX f32 = map.LEdge + map.CellWidthHalf
	var fY f32 =     -0.95 + map.CellHeightHalf

	for y := 0; y < map.NUM_CELLS_Y; y++ {
		for x := 0; x < map.NUM_CELLS_X; x++ {
			var c i32 = map.Cells[y][x]

			if c == map.EMPTY_CELL {
				c = shape.SHAPE_MAX
			}
			
			gl.Color3f(
				app.Colors[c].R, 
				app.Colors[c].G, 
				app.Colors[c].B)
			
			scaledPic(
				PicShapeTile, 
				f32.add(fX, f32.mul(i32.f32(x), map.CellWidth)),
				f32.add(fY, f32.mul(i32.f32(y), map.CellHeight)), 
				map.CellWidthHalf, 
				map.CellHeightHalf)
		}
	}
}


func PlayerPiece () {
	gl.Color3f(
		app.Colors[shape.PlayerShape].R, 
		app.Colors[shape.PlayerShape].G, 
		app.Colors[shape.PlayerShape].B)
	
	var fX f32 = map.LEdge + map.CellWidthHalf
	var fY f32 =     -0.95 + map.CellHeightHalf

	for y := 0; y < 5; y++ {
		for x := 0; x < 5; x++ {
			if shape.Cells[shape.PlayerShape][shape.PlayerFacing][y][x] {
				scaledPic(
					PicShapeTile, 
					f32.add(fX, f32.mul(i32.f32(x - 2 + shape.PlayerPos.X), map.CellWidth)),
					f32.add(fY, f32.mul(i32.f32(y - 2 + shape.PlayerPos.Y), map.CellHeight)), 
					map.CellWidthHalf, 
					map.CellHeightHalf)
			}
		}
	}
}


func NextShape () {
	gl.Color3f(
		app.Colors[shape.Next].R, 
		app.Colors[shape.Next].G, 
		app.Colors[shape.Next].B)
	
	var fX f32 = shape.StartPosX
	var fY f32 = shape.StartPosY
	
	for y := shape.StartY; y < 5; y++ {
		for x := shape.StartX; x < 5; x++ {
			if shape.Cells[shape.Next][shape.FACING_UP][y][x] {
				scaledPic(
					PicShapeTile, 
					fX,
					fY, 
					shape.NextCellScaleX, 
					shape.NextCellScaleY)
			}
			
			fX = f32.add(fX, shape.NextCellSpanX)
		}
		
		fX = shape.StartPosX
		fY = f32.add(fY, shape.NextCellSpanY)
	}
}


func menuRects () {
	var m i32 = app.Mode
	gl.Color4f(dark, dark, dark, 0.9)
	var ySpan f32 = f32.mul(menu.Items[m][0].Hei, app.PixelHei)
	var y f32 = f32.add(-1.0, f32.div(ySpan, 2.0))

	for i := i32.sub(len(menu[m].Items), 1); i >= 0; i-- {			
		var xSpan f32 = f32.mul(menu.Items[m][i].Wid, app.PixelWid)
	
		if menu.Items[m][i].Hover {
			gl.Color4f(mid, mid, mid, 0.85)
		}else{
			gl.Color4f(dark, dark, dark, 0.85)
		}
		
		sizedNotStretchedPicAt(PicShapeTile, 0.0, y, xSpan, ySpan)
		
		if /* it's a slider */ menu.Items[m][i].Max != 0 {
			gl.Color3f(1.0, 1.0, 1.0)
			var val f32 = i32.f32(menu.Items[m][i].Value)
			var max f32 = i32.f32(menu.Items[m][i].Max)
			var wid f32 = xSpan / max
			var x   f32 = (val / max * xSpan)
			x = f32.sub(x, f32.div(xSpan, 2.0))
			x = f32.add(x, f32.div(wid, 2.0))
			sizedNotStretchedPicAt(PicShapeTile, x, y, wid, ySpan)
		}
		
		y = f32.add(y, ySpan)
	}
}
