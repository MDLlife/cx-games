package draw

import "inputs"
import "menu"



var widF f32
var heiF f32



func InitFontsAndTextInfo() {
	gl.DepthFunc(gl.LESS)
	widF = i32.f32(app.WIDTH)
	heiF = i32.f32(app.HEIGHT)

	file := str.concat(dir, "assets/fonts/roboto-light.ttf")
	loadFontSized(150, file)
	//loadFontSized(100, file)
	//loadFontSized(50,  file)
	//loadFontSized(32,  file)
	
	// menu 
	menu.Init()

	var n i32 = len(menu.texts)
	for i := 0; i < n; i++ {
		font := str.concat("Roboto", sprintf("%d", f32.i32(menu.texts[i].Size)))
		menu.texts[i].Font = font
		
		var w i32
		var h i32
		w, h = gltext.Metrics(font, menu.texts[i].Text)
		menu.texts[i].Wid = i32.f32(w)
		menu.texts[i].Hei = i32.f32(h)
		
		printf("%s ---- %d,%d ---- '%s' \n", font, w, h, menu.texts[i].Text)
	}
}


func loadFontSized (size i32, fn str) { // filename 
	s := str.concat("Roboto", sprintf("%d", size))
	
	os.Open(fn)
	gltext.LoadTrueType(s, fn, size, 32, 127, gltext.LeftToRight)
	os.Close(fn)
}


// background color intensities 
var light f32 = 0.9
var mid   f32 = 0.6
var dark  f32 = 0.3
func Texts () {
	// rect backgrounds 
	gl.Color4f(dark, dark, dark, 0.9)
	var ySpan f32 = f32.mul(menu.texts[0].Hei, app.PixelHei)
	var y f32 = f32.add(-1.0, f32.div(ySpan, 2.0))

	for i := i32.sub(len(menu.texts), 1); i >= 0; i-- {			
		var scX f32 = f32.mul(menu.texts[i].Wid, app.PixelWid)
		sizedNotStretchedPicAt(PicShapeTile, 0.0, y, scX, ySpan)
		y = f32.add(y, ySpan)
	}

	// glText 
	gl.LoadIdentity()
	gl.Enable(gl.DEPTH_TEST)

	// greater y (value) 
	var gY f32 = i32.f32(app.HEIGHT - 1) 

	//drawAllOutlinedGlText(5.0)

	for i := i32.sub(len(menu.texts), 1); i >= 0; i-- {
		var x f32
		x = (widF - menu.texts[i].Wid) / 2.0
		y = f32.sub(gY, menu.texts[i].Hei)

		if inputs.PointerInYPixelRange(y, gY) {				
			gl.Color4f(1.0, 1.0, 1.0, 1.0)
		}else{
			gl.Color4f(mid, mid, mid, 1.0)
		}

		gltext.Printf(menu.texts[i].Font, x, y, menu.texts[i].Text)
		gY = y
	}

	gl.Disable(gl.DEPTH_TEST)
}


func drawAllOutlinedGlText(scale f32) {
	var alpha f32 = 1.0
	gl.Scalef(scale, scale, 0.0)

	printTextWithColor(1.0, 1.0, 0.0, 0.0, 0.0, alpha)
	printTextWithColor(-1.0, 1.0, 0.0, 0.0, 0.0, alpha)
	printTextWithColor(1.0, -1.0, 0.0, 0.0, 0.0, alpha)
	printTextWithColor(-1.0, -1.0, 0.0, 0.0, 0.0, alpha)
	printTextWithColor(0.0, 0.0, 1.0, 0.55, 0.0, alpha)
}


// x & y are offsets 
func printTextWithColor(x f32, y f32, r f32, g f32, b f32, a f32) {
	gl.Color4f(r, g, b, a)
	gltext.Printf("Roboto50", x, y, "testeeek")
}
