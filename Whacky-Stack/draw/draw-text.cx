package draw

import "inputs"
import "menu"



var widF f32 // FIXME?  are these really needed anymore? 
var heiF f32
// color intensities 
var light f32 = 0.75
var mid   f32 = 0.5
var dark  f32 = 0.3



func InitFontsAndMenuItems() {
	gl.DepthFunc(gl.LESS)
	widF = i32.f32(app.WIDTH)
	heiF = i32.f32(app.HEIGHT)

	file := str.concat(dir, "assets/fonts/roboto-light.ttf")
	loadFontSized(150, file)
	loadFontSized(50,  file)
	loadFontSized(26,  file)
	
	menu.Init()

	var nm i32 = len(menu.Items)    // nm == num menus 
	for m := 0; m < nm; m++ {       // m  == menu id 
	var ni i32 = len(menu.Items[m]) // ni == num items 
	for i := 0; i < ni; i++ {       // i  == item id 
		font := str.concat("Roboto", sprintf("%d", f32.i32(menu.Items[m][i].Size)))
		menu.Items[m][i].Font = font
		
		var w i32
		var h i32
		w, h = gltext.Metrics(font, menu.Items[m][i].Text)
		menu.Items[m][i].Wid = i32.f32(w)
		menu.Items[m][i].Hei = i32.f32(h)
		
		printf("%s ---- %d,%d ---- '%s' \n", font, w, h, menu.Items[m][i].Text)
	}
	}
}


func loadFontSized (size i32, fn str) { // filename 
	s := str.concat("Roboto", sprintf("%d", size))
	
	os.Open(fn)
	gltext.LoadTrueType(s, fn, size, 32, 127, gltext.LeftToRight)
	os.Close(fn)
}


func menuItemBackgrounds () {
	var m i32 = app.Mode
	gl.Color4f(dark, dark, dark, 0.9)
	var ySpan f32 = f32.mul(menu.Items[m][0].Hei, app.PixelHei)
	var y f32 = f32.add(-1.0, f32.div(ySpan, 2.0))

	for i := i32.sub(len(menu[m].Items), 1); i >= 0; i-- {			
		var xSpan f32 = f32.mul(menu.Items[m][i].Wid, app.PixelWid)
	
		if menu.Items[m][i].Hover {
			gl.Color4f(mid, mid, mid, 0.85)
		}else{
			gl.Color4f(dark, dark, dark, 0.85)
		}
		
		sizedNotStretchedPicAt(PicShapeTile, 0.0, y, xSpan, ySpan)
		y = f32.add(y, ySpan)
	}
}


func menuTexts () {
	var m i32 = app.Mode
	gl.LoadIdentity()

	// greater y (value) 
	var gY f32 = i32.f32(app.HEIGHT - 1) 

	//drawAllOutlinedGlText(5.0)

	for i := i32.sub(len(menu.Items[m]), 1); i >= 0; i-- {
		var x f32 =     (widF - menu.Items[m][i].Wid) / 2.0
		var y f32 = f32.sub(gY, menu.Items[m][i].Hei)

		if inputs.PointerInYPixelRange(y, gY) {
			menu.Items[m][i].Hover = true			
			gl.Color3f(1.0, 1.0, 1.0)
		}else{
			menu.Items[m][i].Hover = false
			gl.Color3f(mid, mid, mid)
		}

		gltext.Printf(menu.Items[m][i].Font, x, y, menu.Items[m][i].Text)
		gY = y
	}
}


func scoreText() {	
	var sX f32 = i32.f32(i32.sub(app.WIDTH, 59))
	var sY f32 = i32.f32(96) //app.HEIGHT)
	gl.LoadIdentity()
	gl.Color3f(1.0, 1.0, 1.0)
	gltext.Printf("Roboto26", sX, sY, shape.PlayerScoreTxt)
}


// UNUSED for now.  Whacky Stack may never need this, because 
// we may only be printing on non-noisy backgrounds (or printing
// fly-up text, which retains clarity by virtue of it's motion) 
func drawAllOutlinedGlText(scale f32) {
	var alpha f32 = 1.0
	gl.Scalef(scale, scale, 0.0)

	printTextWithColor(1.0, 1.0, 0.0, 0.0, 0.0, alpha)
	printTextWithColor(-1.0, 1.0, 0.0, 0.0, 0.0, alpha)
	printTextWithColor(1.0, -1.0, 0.0, 0.0, 0.0, alpha)
	printTextWithColor(-1.0, -1.0, 0.0, 0.0, 0.0, alpha)
	printTextWithColor(0.0, 0.0, 1.0, 0.55, 0.0, alpha)
}


// x & y are offsets 
func printTextWithColor(x f32, y f32, r f32, g f32, b f32, a f32) {
	gl.Color4f(r, g, b, a)
	gltext.Printf("Roboto50", x, y, "testeeek")
}
