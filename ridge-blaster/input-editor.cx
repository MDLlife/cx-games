package ccInput

import "app"
import "mesh"



func firePrimaryAbility() () {
	var touchedMenuItem bool
	var i i32
	touchedMenuItem, i = getTouchedMenuItem(MousePointer)
	
	if touchedMenuItem {
		respondToItem(i)
	} else {
		respondToValidGridSpaceClick()
	}
}


func respondToItem(i i32) () {
	printf("pressed menu item %s \n", Menus[EditToolbar].Items[i].Name)
	
	if i < app.EDITMODE_MAX { // change EditMode
		app.EditMode = i
		printEditMode()
	} else { // perform one-time actions 
		if i == TOOLBAR_GEN_FUNC {
			mesh.GenerateMeshInitFunc("Char") //"Icon")
		} else
		if i == TOOLBAR_SNAP_TO_GRID {
			SnapToGrid = !SnapToGrid
			
			if SnapToGrid {
				str.print("SNAP_TO_GRID: ON")					
			} else {
				str.print("SNAP_TO_GRID: OFF")
			}
		} else
		if i == TOOLBAR_WIPE_LAYER {
			str.print("-> WIPE_LAYER")
			
			var m Mesh2D 
			m = Mesh2D{}
			mesh.EditLayers[mesh.CurrLayer] = m
		} else
		if i == TOOLBAR_MAINMENU {
			str.print("-> MAINMENU ---------(or WILL take us to main menu when it's implemented)")
			entity.SetupHero()
			app.Mode = app.APPMODE_PLAYING // FIXME: LATER want app.APPMODE_MENU
		}
	}
}


func printEditMode() () {
	if app.EditMode == app.EDITMODE_VERTICES {
		str.print("------> EDITMODE_VERTICES")
	} else
	if app.EditMode == app.EDITMODE_TRIANGLES {
		str.print("------> EDITMODE_TRIANGLES")
	} else
	if app.EditMode == app.EDITMODE_COLORS {
		str.print("------> EDITMODE_COLORS")
	} else
	if app.EditMode == app.EDITMODE_MESH_PICKER {
		str.print("------> EDITMODE_MESH_PICKER")
	}
}


func respondToValidGridSpaceClick() () {
	var touchedVert bool
	var layerId     i32
	var vertId      i32
	touchedVert, layerId, vertId = getTouchedVertexNode(MousePointer)

	if app.EditMode == app.EDITMODE_TRIANGLES {
		// TODO enhancement: allow player to slide across 3 verts while holding LMB 
		
		if touchedVert {			
			printf("EditLayers[%d].Points[%d] \n", layerId, vertId)

			if i32.gteq(mesh.PickedTrianglesNextId, 3) {
				mesh.PickedTrianglesNextId = 0
			}

			mesh.PickedTriangle[mesh.PickedTrianglesNextId] = vertId
			mesh.PickedTrianglesNextId = 
			i32.add(
			mesh.PickedTrianglesNextId, 1)

			if i32.gteq(mesh.PickedTrianglesNextId, 3) {
				mesh.AddNewTriangleInEditor()
			}
		}
	} else if app.EditMode == app.EDITMODE_VERTICES {
		if touchedVert { // drag existing node 
			draggingVertexNode = true
			draggedLayerId  = layerId
			draggedVertexId = vertId
		} else { 
			addNewVertexNode()
		}
	}
}


func addNewVertexNode() () {
	if MousePointer.X >= -1.0 && // ...when within grid 
		MousePointer.X <= 1.0 &&
		MousePointer.Y >= -1.0 &&
		MousePointer.Y <= 1.0 {
		
		var c Color3
		c = Color3{ 
			R: 0.5, 
			G: 0.5, 
			B: 0.5 }
			
		var m Mesh2D
		m = mesh.EditLayers[mesh.CurrLayer]

		printf("+ vertex: %d - in layer: %d \n", len(m.Points), mesh.CurrLayer)

		m.Colors = append(
		m.Colors, c)
		m.Points = append(
		m.Points, MousePointer)

		mesh.EditLayers[mesh.CurrLayer] = m
	}
}
