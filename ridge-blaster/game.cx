package game


import "gl"
import "glfw"

import "app"
import "ccInput"
import "collision"
import "draw"
import "entity"
import "environs"
import "mesh"



// timing 
var prevTime  f32 // previous 
var currTime  f32 // current 
var timeDelta f32

// graphics 
var ratio f32 // aspect... 
var program i32



func Init () () {
	str.print("game.Init()")

	// graphics 
	glfw.Init()
	glfw.CreateWindow("window", app.WIDTH, app.HEIGHT, app.NAME)
	glfw.MakeContextCurrent("window")
	gl.Init()
	program = gl.CreateProgram()
	gl.LinkProgram(program)

	app.Setup()
	ccInput.Setup()
	collision.Setup()
	environs.Setup()
	entity.Setup()
	draw.Setup()
	doFramebufferStuff()
}


func Update () () {
	updateTiming()
	ccInput.Update()
	entity.Update(timeDelta, currTime)


	// graphics 
	doFramebufferStuff()
	gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
	gl.UseProgram(program)
	gl.MatrixMode(gl.PROJECTION)
	gl.LoadIdentity()
	
		//gl.Rotatef(entity.CamRot.X, 1.0, 0.0, 0.0)
		//gl.Rotatef(entity.CamRot.Y, 0.0, 1.0, 0.0)
		//gl.Translatef(
			//entity.Ents[0].Pos.X, 
			//entity.Ents[0].Pos.Y, 
			//0.0)
		//gl.Translatef(
			//entity.CamPos.X,
			//entity.CamPos.Y,
			//entity.CamPos.Z)
		//printf("CamPos.X: %s \n", f32.str(entity.CamPos.X))
		
	gl.MatrixMode(gl.MODELVIEW)

	draw.All(currTime, timeDelta)

	glfw.PollEvents()
	glfw.SwapBuffers("window")
}


// screen edges 
var oldL f64 = -1.0D
var oldR f64 = 1.0D
func doFramebufferStuff() {
	var ss VecI // LATEST/NEW screen size 
	ss.X, ss.Y = glfw.GetFramebufferSize("window")
	
	if  bool.or(
		i32.uneq(app.ScreenSizeInPixels.X, ss.X),
		i32.uneq(app.ScreenSizeInPixels.Y, ss.Y)) {
		
		str.print("doFramebufferStuff() - SIZE CHANGED!")
		printf("OLD screen res: %d, %d \n", app.ScreenSizeInPixels.X, app.ScreenSizeInPixels.Y)
		printf("NEW screen res: %d, %d \n", ss.X, ss.Y)
		
		app.ScreenSizeInPixels = ss
		ratio = f32.div(i32.f32(ss.X), i32.f32(ss.Y))
		
		// WAS after gl.MatrixMode(gl.MODELVIEW)
		collision.Update(ratio)
		
		// WAS after gl.LoadIdentity()
		// gl.Ortho multiplies existing matrix 
		var mulL f64 = f64.div(collision.ScreenEdgeL, oldL)
		var mulR f64 = f64.div(collision.ScreenEdgeR, oldR)
		mulL = -mulL
		gl.Ortho(mulL, mulR, -1.0D, 1.0D, 1.0D, -1.0D)
		//printf("OLD screen edges: %f, %f \n", oldL, oldR)
		//printf("OLD screen edges: %f, %f (that's the change mul) \n", mulL, mulR)
		oldL = collision.ScreenEdgeL
		oldR = collision.ScreenEdgeR

		// WAS before gl.MatrixMode(gl.MODELVIEW)
		gl.Viewport(0, 0, ss.X, ss.Y)
		
		mesh.BakeButtonArray(ccInput.EDIT_TOOLBAR, false, true)
		mesh.BakeMeshPickerButtonGrid()
	}
}


func ShouldProceed () (out bool) {
	if glfw.ShouldClose("window") {
		out = false
	} else {
		out = true
	}
}


func updateTiming () () {
	// prevent 1st delta from being large, which would make moving objects teleport unpredictably 
	if prevTime == 0.0 {
		prevTime = f64.f32(glfw.GetTime())
	}

	currTime = f64.f32(glfw.GetTime())
	timeDelta = currTime - prevTime
	prevTime = currTime
}
