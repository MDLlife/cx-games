package ccInput

import "glfw"



func Init() () {
	str.print("input.Init()")

	glfw.SetKeyCallback("window", "onKeyEvent")
	glfw.SetMouseButtonCallback("window", "onMouseButtonEvent")
	glfw.SetCursorPosCallback("window", "onCursorPosEvent")
}


func Update() () {
	// motion input status 
	/*
	moveLeft  = keyIsDown(GLFW_KEY_A)
	moveRight = keyIsDown(GLFW_KEY_D)
	moveUp    = keyIsDown(GLFW_KEY_W)
	*/
	//moveDown  = keyIsDown(GLFW_KEY_S)
	//str.print("call SetPlayerVelocity() causing prob")
}


// mouse buttons 
func onMouseButtonEvent(window str, button i32, action i32, mods i32) () {
	str.print("onMouseButtonEvent")
}


// mouse position 
func onCursorPosEvent(window str, x f64, y f64) () {
	//str.print("onCursorPosEvent")

	unused := 0 // needed cuz... 
	// EMPTY FUNCS OR FUNCS WITH ONLY COMMENTS WILL CRASH CX FOR NOW 
}


// keys 
func onKeyEvent(window str, key i32, scancode i32, action i32, mods i32) () {
	// action == 0, release 
	// action == 1, press 
	// action == 2, is an autorepeat event, generated by keys that are held longer than a second

	if action != 2 { // (not a repeat) 
		if action == 1 { // (press) 
			str.print("PRESS (not a repeat)")

			// close 
			if key == 53 { // GLFW_KEY_5 
				str.print("QUITTING GAME; developer shortcut (key '5') was pressed")
				glfw.SetShouldClose("window", true)
			}

			maybeToggleMousePointer(key)
		}
	}
}


var wantMousePointer bool
func maybeToggleMousePointer(key i32) () {
	i32.print(key)

	if key == 256 /* GLFW_KEY_ESCAPE */ || 
		key == 257 /* GLFW_KEY_ENTER */ ||
		key == 258 /* GLFW_KEY_TAB */ || 
		key == 259 /* GLFW_KEY_BACKSPACE */ {

		str.print("DEF go to main menu")
		wantMousePointer = !wantMousePointer

		if bool.eq(wantMousePointer, true) {
			str.print("wantMousePointer TRUE")
			glfw.SetInputMode("window", glfw.Cursor, glfw.CursorNormal)
		} else {
			str.print("wantMousePointer FALSE")
			glfw.SetInputMode("window", glfw.Cursor, glfw.CursorDisabled)
		}
	}
}
