package mesh

import "glfw"

import "app"



type Mesh2D struct {
	Name str
	Colors []Color3 // to keep it simple, we'll sync this with Points (rather than indices to a palette) 
	Points []Vec2
	TriangleIndices []i32
}

var Meshes []Mesh2D



func Setup2 () () { // FIXME: rename when we can call _func_name_ within _same_func_name_ 
	str.print("mesh.Setup2()")
	
	// prelim editor toolbar menu 
	var y f32
	y = 1.0

	var h f32
	h = 0.1

	MakeNewRect(y, -0.8, y - h, -1.0)
	y = f32.sub(y, f32.mul(h, 1.2))
	MakeNewRect(y, -0.8, y - h, -1.0)
	y = f32.sub(y, f32.mul(h, 1.2))
	MakeNewRect(y, -0.8, y - h, -1.0)
}


func Draw (/*tDelta f32*/) () {
	//str.print("mesh.Draw()")
}


func MakeNewRect (top f32, right f32, bottom f32, left f32) () {
	var m Mesh2D
	m = Mesh2D{ Name: "NewRect" }

	
	
	// colors 
	var col Color3
	col = Color3{ R: 1.0, G: 0.2, B: 0.2 }

	var colSpan f32
	colSpan = 0.2	

	col.R = f32.sub(col.R, colSpan)
	m.Colors = append(m.Colors, col)
	
	col.R = f32.sub(col.R, colSpan)
	m.Colors = append(m.Colors, col)
	
	col.R = f32.sub(col.R, colSpan)
	m.Colors = append(m.Colors, col)
	
	col.R = f32.sub(col.R, colSpan)
	m.Colors = append(m.Colors, col)

	
	
	// positions 
	var v Vec2
	v = Vec2{ X: 0.0, Y: 0.0 }
	
	// start at... 
	v.X = left
	v.Y = top
	// ...then go clockwise 
	m.Points = append(m.Points, v)
	v.X = right
	v.Y = top
	m.Points = append(m.Points, v)
	v.X = right
	v.Y = bottom
	m.Points = append(m.Points, v)
	v.X = left
	v.Y = bottom
	m.Points = append(m.Points, v)

	
	
	// triangles 
	m.TriangleIndices = append(m.TriangleIndices, 0)
	m.TriangleIndices = append(m.TriangleIndices, 1)
	m.TriangleIndices = append(m.TriangleIndices, 2)

	m.TriangleIndices = append(m.TriangleIndices, 2)
	m.TriangleIndices = append(m.TriangleIndices, 3)
	m.TriangleIndices = append(m.TriangleIndices, 0)
	
	
	
	Meshes = append(Meshes, m)
}


func MakeNewTriangle(a Vec2, b Vec2, c Vec2) () {
	str.print("mesh.MakeNewTriangle()")
	var m Mesh2D

	m = Mesh2D{ Name: "test triangle" }
	
	var col Color3
	col = Color3{ R: 1.0, G: 0.5, B: 0.9 }
	
	m.Colors = append(m.Colors, col)
	col.B = 0.6
	m.Colors = append(m.Colors, col)
	col.B = 0.2
	m.Colors = append(m.Colors, col)
	
	m.Points = append(m.Points, a)
	m.Points = append(m.Points, b)
	m.Points = append(m.Points, c)

	m.TriangleIndices = append(m.TriangleIndices, 0)
	m.TriangleIndices = append(m.TriangleIndices, 1)
	m.TriangleIndices = append(m.TriangleIndices, 2)
	
	Meshes = append(Meshes, m)
}