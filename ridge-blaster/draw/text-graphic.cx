package draw

/*
import "gl"
import "glfw"
import "gltext"
import "os"
*/

/* 
	Boink-N-Yoink
	Drilled-2-Build
	Drill-N-Fill
*/

var width i32 = 800
var height i32 = 600
var widF f32 = 800.0
var heiF f32 = 600.0
var texts []str = []str{ "Beluga", "Terrain Hopper", "Three", "Four", "5" }
var wids []f32 // widths 
var heis []f32 // heights 
var sizesInt []f32 = []f32{ 200.0, 32.0, 32.0, 100.0, 50.0 } // bearing? (from origin to top) 
var sizesStr []str = []str{ "Roboto200", "Roboto32", "Roboto32", "Roboto100", "Roboto50" }



/*
func main () {
	initApp()
	loadFonts()
	
	gl.Enable(gl.DEPTH_TEST)
	gl.DepthFunc(gl.LESS)	
	gl.ClearColor(0.1, 0.1, 0.1, 0.0)

	wids = []i32{}
	heis = []i32{}
	
	for i := 0; i < len(texts); i++ {
		var w i32
		var h i32
		w, h = gltext.Metrics(sizesStr[i], texts[i])
		wids = append(
		wids, i32.f32(w))
		heis = append(
		heis, i32.f32(h))
		printf("`%s` metrics\nWidth: %d\nHeight: %d\n", texts[i], w, h)
	}

	for bool.not(glfw.ShouldClose("window")) {
		gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)
		gl.Color4f(0.5, 0.3, 0.8, 1.0)
		
		var x f32
		var y f32
		
		for i := 0; i < len(texts); i++ {
			gltext.Printf(sizesStr[i], (widF - wids[i]) / 2.0, y, texts[i])
			//y = f32.add(y, heis[i])
			y = f32.add(y, sizesInt[i])
		}

		glfw.PollEvents()
		glfw.SwapBuffers("window")
	}
}


func initApp() {
	glfw.Init()

	glfw.CreateWindow("window", width, height, "ing Text")
	glfw.MakeContextCurrent("window")
	
	gl.Init()
	var program i32
	program = gl.CreateProgram()
	gl.LinkProgram(program)	
}


func loadFonts() {
	var wd str
	wd = os.GetWorkingDirectory()
	f := str.concat(wd, "fonts/roboto-light.ttf")
	loadFontSized(200, f)
	loadFontSized(100, f)
	loadFontSized(50, f)
	loadFontSized(32, f)
}


func loadFontSized(size i32, fn str) { // filename 
	var s str
	s = str.concat("Roboto", sprintf("%d", size))
	
	os.Open(fn)
	gltext.LoadTrueType(s, fn, size, 32, 127, gltext.LeftToRight)
	os.Close(fn)
}
*/