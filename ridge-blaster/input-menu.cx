package ccInput

import "app"



type MenuItem struct {
	Name str // just for console text feedback 
	Pos Vec2
	Extents Vec2	
	// ids unnecessary?  
	// if not, set these to corresponding entries in the mesh.___Meshes (slices) 
	MeshForBackId i32 // background 
	RawMeshForIcon i32
	MeshForHoverText i32
}

type Menu struct {
	Name str
	Items []MenuItem
}

var Menus       []Menu
var EditToolbar i32 = 0

// toolbar 
// (Menu item button ids... 
// 1st correspond to switching editor modes, then... 
// 2nd, these one-time actions) 
var TOOLBAR_GEN_FUNC     i32 = app.EDITMODE_MAX // generate mesh init func 
var TOOLBAR_SNAP_TO_GRID i32 = app.EDITMODE_MAX + 1
var TOOLBAR_WIPE_LAYER   i32 = app.EDITMODE_MAX + 2
var TOOLBAR_MAINMENU     i32 = app.EDITMODE_MAX + 3



func setupMainMenu () () {
}


func setupEditorToolbar () () {
	var m Menu
	var mi MenuItem
	var cm i32 // current menu 
	cm = EditToolbar
	m = Menu{}



	Menus = []Menu{}
	Menus = append(Menus, m)


	
	// editor toolbar 
	////// might use .Name as prefix to the hover-text of the edit mode 
	////// ("edit " + "colors/vertices" for example) 
	Menus[cm].Name = "Edit" 
	
	mi = MenuItem{ MeshForBackId: 2, RawMeshForIcon: 1, Name: "Edit Vertices" }
	Menus[cm].Items = append(
	Menus[cm].Items, mi)
	mi = MenuItem{ MeshForBackId: 2, RawMeshForIcon: 1, Name: "Edit Triangles" }
	Menus[cm].Items = append(
	Menus[cm].Items, mi)
	mi = MenuItem{ MeshForBackId: 2, RawMeshForIcon: 1, Name: "Edit Colors" }
	Menus[cm].Items = append(
	Menus[cm].Items, mi)
	mi = MenuItem{ MeshForBackId: 2, RawMeshForIcon: 1, Name: "Mesh Picker" }
	Menus[cm].Items = append(
	Menus[cm].Items, mi)
	mi = MenuItem{ MeshForBackId: 2, RawMeshForIcon: 1, Name: "Gen Init Func" }
	Menus[cm].Items = append(
	Menus[cm].Items, mi)
	mi = MenuItem{ MeshForBackId: 2, RawMeshForIcon: 1, Name: "Snap-To-Grid" }
	Menus[cm].Items = append(
	Menus[cm].Items, mi)
	mi = MenuItem{ MeshForBackId: 2, RawMeshForIcon: 1, Name: "Wipe Layer" }
	Menus[cm].Items = append(
	Menus[cm].Items, mi)
	mi = MenuItem{ MeshForBackId: 2, RawMeshForIcon: 1, Name: "PLAY" }
	Menus[cm].Items = append(
	Menus[cm].Items, mi)
}