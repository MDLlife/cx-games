package draw

import "gl"

import "app"
import "ccInput"
import "collision"
import "entity"
import "environs"
import "mesh"


var rngCol          Color3
var NEG_UNIT_SPAN   f32 // negative... 
var CRUST_THICKNESS f32
var currX           f32
var span            f32
var currGreen       f32 // component of terrain fill color 

// blink timing 
var pickedNodesAreBright bool
var timeLocalToDraw      f32
var nextBlinkFlip        f32
var blinkDelay           f32



func Setup () () {
	str.print("draw.Setup()")
	mesh.Setup2()
	
	NEG_UNIT_SPAN   = -1.0
	CRUST_THICKNESS =  0.015
	blinkDelay      =  0.1
	
	// colors 
	var r f32
	var g f32
	var b f32

	r = getRandomForColorChannel()
	g = getRandomForColorChannel()
	b = getRandomForColorChannel()

	rngCol = Color3{ R: r, G: g, B: b }
}



func All (currTime f32, deltaTime f32) () {
	//str.print("draw.All()")
	
	if /* no baked editor meshes */ i32.lt(len(mesh.BakedEditorMeshes), 1) {
		mesh.MakeButtonArray(false)
	}

	// blink timing 
	timeLocalToDraw = f32.add(timeLocalToDraw, deltaTime)	
	for f32.lteq(nextBlinkFlip, timeLocalToDraw) {
		nextBlinkFlip = f32.add(timeLocalToDraw, blinkDelay)
		pickedNodesAreBright = bool.not(pickedNodesAreBright)
	}

	if app.Mode == app.MODE_EDITOR {		
		gl.Begin(gl.LINES)
		gridLines()
		gl.End()

		gl.Begin(gl.TRIANGLES) //////////////
		trianglesForAll(mesh.RawEditorMeshes, true)
		trianglesForAll(mesh.BakedEditorMeshes, false)
		gl.End()

		if app.EditMode != app.EDIT_COLORS {
			gl.Begin(gl.QUADS) //////////////////
			editorQuads()
			gl.End()
		}
		
		/*
			TODO: ADAPT THIS TO HIGHLIGHT MULTIPLE MESHES/SEPARATIONS WHEN IMPLEMENTED 
					(THIS WILL ALLOW SHARED VERTEX COORDS WITH DIFFERENT COLORS SO
					THERE CAN BE HARD COLOR CONTRAST BETWEEN MESHES THAT APPEAR CONNECTED) 
					
			draws loop from all entity positions 
			gl.Begin(gl.LINE_LOOP) //////////////
			simpleVertexSequence(0.5)
			gl.End()
		*/
	} else { // playing (& the rest) 
		//if /* no game meshes */ i32.lt(len(mesh.Meshes), 1) {
			//mesh.MakeButtonArray(true)
		//}
		
		gl.Begin(gl.QUADS) //////////////////	
		Terrain(currTime)
		Entities()		
		gl.End()

		gl.Begin(gl.TRIANGLES) //////////////
		trianglesForAll(mesh.Meshes, false)
		gl.End()		
	}


	// hero 
	//Circle(entity.Ents[0])
}


func trianglesForAll (meshes []Mesh2D, drawOnly1st bool) () {
	for i := 0; i32.lt(i, len(meshes)); i++ {
		if app.EditMode == app.EDIT_COLORS {
			if drawOnly1st && i > 1 {
			//if bool.and(drawOnly1st, i32.gt(i, 0)) {
				break
			}
		} else {
			if drawOnly1st && i > 0 {
				break
			}
		}

		var m Mesh2D
		m = meshes[i]

		// give feedback when not multiple of 3 
		var leftover i32
		leftover = i32.mod(len(m.TriangleIndices), 3)
		if i32.uneq(0, leftover) {
			printf("********* ERROR! leftover: %d in trianglesForAll() \n", leftover)
		}

		for j := 0; i32.lt(j, len(m.TriangleIndices)); j++ {
			var pId i32 // point id (from tri ids) 
			pId = m.TriangleIndices[j]
			
			var c Color3
			c = m.Colors[pId]
			gl.Color3f(c.R, c.G, c.B)
			
			var v Vec2
			v = m.Points[pId]
			
			gl.Vertex2f(v.X, v.Y)
		}
	}
}


func simpleVertexSequence (colorChanIntensity f32) () {
	gl.Color3f(colorChanIntensity, colorChanIntensity, colorChanIntensity)

	var i i32
	for i = 0; i32.lt(i, len(entity.Ents)); i++ {
		var e Entity
		e = entity.Ents[i]

		gl.Vertex2f(e.Pos.X, e.Pos.Y)
	}
}


func gridLines () () {
	// single color channel for Dark Gray 
	var gray f32
	gray = 0.2
	gl.Color3f(gray, gray, gray)
	
	var l f32
	l = -1.0
	
	var r f32
	r = 1.0
	
	numLines := 20
	var unitSpan f32
	unitSpan = f32.mul(r, 2.0)
	unitSpan = f32.div(unitSpan, i32.f32(numLines))
	z := 0.2

	// vertical 
	var fx f32
	fx = l
	for x := 0; x <= numLines; x++ {
		gl.Vertex3f(fx, l, z)
		gl.Vertex3f(fx, r, z)
		
		fx = f32.add(fx, unitSpan)
	}
	
	// horizontal 
	var fy f32
	fy = l
	for y := 0; y <= numLines; y++ {			
		gl.Vertex3f(l, fy, z)
		gl.Vertex3f(r, fy, z)
		
		fy = f32.add(fy, unitSpan)
	}
}


func Circle (e Entity) () {
	var x f32
	var y f32

	gl.Begin(gl.POLYGON)
	gl.Color3f(1.0, 1.0, 1.0)
	
	var i f32
	for i = 0.0; f32.lt(i, 20.0); i = f32.add(i, 1.0) {
		x = f32.add(e.Pos.X, f32.mul(e.Radius, f32.cos(f32.div(f32.mul(i, app.TAU), 20.0))))
		y = f32.add(e.Pos.Y, f32.mul(e.Radius, f32.sin(f32.div(f32.mul(i, app.TAU), 20.0))))

		gl.Vertex2f(x, y)
	}

	gl.End()
}


func editorQuads () () {
	// color channels for colors that have the same value across all 3 
	white := 1.0
	gray  := 0.15 // (dark) 
	
	for i := 0; i32.lt(i, len(mesh.RawEditorMeshes[0].Points)); i++ {
		gl.Color3f(white, white, white)
		
		// highlighted colors 
		for j := 0; i32.lt(j, mesh.PickedTrianglesNextId); j++ {
			if pickedNodesAreBright {
				if i == mesh.PickedTriangle[j] {
					if j == 0 {
						gl.Color3f(1.0, 0.0, 0.0) // red 
					}
					if j == 1 {
						gl.Color3f(0.0, 1.0, 0.0) // green 
					}
					if j == 2 {
						gl.Color3f(0.0, 0.0, 1.0) // blue 
					}
				}
			} /*else {
				gl.Color3f(gray, gray, gray)
			}*/
		}
		
		drawRect(mesh.RawEditorMeshes[0].Points[i], entity.NodeExtents)
	}
}


func drawRect (pos Vec2, extents Vec2) () {
		var lX f32
		lX = f32.sub(pos.X, extents.X)

		var rX f32
		rX = f32.add(pos.X, extents.X)

		var bY f32
		bY = f32.sub(pos.Y, extents.Y)

		var tY f32
		tY = f32.add(pos.Y, extents.Y)
		
		gl.Vertex3f(lX, bY, 0.0)
		gl.Vertex3f(lX, tY, 0.0)
		gl.Vertex3f(rX, tY, 0.0)
		gl.Vertex3f(rX, bY, 0.0)
}


func Entities () () {
	for i := 0; i32.lt(i, len(entity.Ents)); i++ {
		var e Entity
		e = entity.Ents[i]
		
		//        ______==________________
		if i32.eq(e.Mode, entity.MODE_DEAD) {
			str.print("skipped drawing DEAD ent")
			continue
		}
		
		// colors 
		if e.Type == entity.TYPE_HERO {
			c := 0.4
			gl.Color3f(c, c, c)
		}else
		if e.Type == entity.TYPE_BULLET {
			gl.Color3f(1.0, 1.0, 0.0)
		}else
		if e.Type == entity.TYPE_ROCKET {
			gl.Color3f(1.0, 0.5, 0.0)
		}
		
		drawRect(e.Pos, e.Extents)
	}
}


func Terrain (currTime f32) () {
	var num i32
	num = len(environs.Terrain)
	num = i32.sub(num, 1)
	span = f32.div(f64.f32(collision.ScreenEdgeR) * 2.0, i32.f32(num))
	currGreen = 0.2
	currX = f64.f32(collision.ScreenEdgeL)

	for i := 0; i < num; i++ {
		// draw filling (lavender/cyan gradient) 
		feedTerrainQuadToGL(i, false, currTime)

		// draw crust (random color) 
		feedTerrainQuadToGL(i, true, currTime)
		
		currGreen = f32.add(currGreen, 0.01)
		currX     = f32.add(currX,     span)
	}
	
	environs.PopulatedWithEntities = true
}


func feedTerrainQuadToGL(i i32, drawingCrust bool, currTime f32) () {
	var up f32 // upper y edge of quad 
	var lo f32 // lower y edge of quad 
	z := 0.0
	
	// 2 left points of quad 
	up = environs.Terrain[i].Floo
	if drawingCrust {
		lo = environs.Terrain[i].Floo - CRUST_THICKNESS
		gl.Color3f(rngCol.R, rngCol.G, rngCol.B)
	} else {
		lo = NEG_UNIT_SPAN	
		gl.Color3f(0.6, currGreen, 1.0)
	}
	
	
	// left edge 
	gl.Vertex3f(currX, lo, z)
	gl.Vertex3f(currX, up, z)

	
	// 2 right points of quad 
	up =  environs.Terrain[i+1].Floo
	if drawingCrust {
		lo =  environs.Terrain[i+1].Floo - CRUST_THICKNESS
	} else {
		lo = NEG_UNIT_SPAN	
	}


	// right edge 
	gl.Vertex3f(currX + span, up, z)
	gl.Vertex3f(currX + span, lo, z)


	if bool.not(environs.PopulatedWithEntities) {
		if i32.eq(i32.rand(0, 8), 0) {			
			var time f32
			time = i32.f32(i32.rand(0, 20))
			time = f32.mul(time, 0.5)
			time = f32.add(currTime, time)
			
			var pos Vec2
			pos = Vec2{ 
				X: currX + span, 
				Y: f32.add(up, entity.RocketExtents.Y) }
			
			var vel Vec2
			vel = Vec2{ Y: 0.005 }
			
			var ent Entity
			ent = Entity{
				Type: entity.TYPE_ROCKET,
				StartPos: pos,
				Pos: pos,
				Vel: vel,
				Mode: entity.MODE_STATIONARY,
				NextMode: entity.MODE_MOVING_STRAIGHT,
				TimeToNextMode: time,
				Extents: entity.RocketExtents }
			
			entity.Add(ent)
		}
	}
}


func getRandomForColorChannel () (out f32) {
	// 257, cuz without the +1 it can never reach value of 1.0 
	var colSpan f32
	colSpan = f32.div(1.0, 257.0)
	
	var f f32
	f = i32.f32(i32.rand(0, 257))
	
	out = f32.mul(f, colSpan)
}
