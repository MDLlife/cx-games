package environs



var MINIMUM_CLEARANCE f32 // min gameplay space needed for ship to have 
                          // some wiggle room between ground/floor & ceiling 

type Column struct {
	Floo f32 // floor 
	Ceil f32 // ceiling (0 == open air) 
}

var Terrain []Column

// math/whatev 
var NUM_F32_RAND_INCLUSIVE_POINTS i32
var F32_RAND_GRAIN_SIZE f32



// 1st determine size of valid air space, 
// 2nd, that spans' position within screenspace 

// for collision, 
// 1st determine range of columns player ship is contained in,
// 2nd, if above floo
// 3rd, if below ceiling (skip if open air) 




func Setup () () {
	str.print("environs.Setup()")

	MINIMUM_CLEARANCE = 0.3
	maxY := 1.0 - MINIMUM_CLEARANCE
	var prevFloo f32
	numColumns := 80 //64
	for i := 0; i < numColumns; i++ {
		var f f32
		var c f32
		f = f32.add(f, GetRandF32())
		c = GetRandF32()
		
	
		// ensure points stay in appropriate range 
		if f32.lteq(f, 0.0) {
			f = f32.add(0.0, f32.abs(f))
		}
			
		if f32.gteq(f, maxY) {
			f = f32.sub(maxY, f32.abs(f))
		}
		
		printf("floor %f,   ceiling %f \n", f, c)
		var colu Column
		colu = Column{ Floo: 0.0 - f, Ceil: 0.0 - c }
		printf("colu floor %f,   colu ceiling %f \n", colu.Floo, colu.Ceil)
		Terrain = append(Terrain, colu)
		prevFloo = f
	}
}


// in the range of 0 to 1 
func GetRandF32 () (out f32) {
	NUM_F32_RAND_INCLUSIVE_POINTS = 15
	F32_RAND_GRAIN_SIZE = 0.3 / i32.f32(NUM_F32_RAND_INCLUSIVE_POINTS - 1)
	rnd := i32.rand(0, NUM_F32_RAND_INCLUSIVE_POINTS)
	out = F32_RAND_GRAIN_SIZE * i32.f32(rnd)
	out = f32.sub(out, 0.15)
	
	printf("GetRandF32 () - rnd: %d - out: %f\n", rnd, out)
}


