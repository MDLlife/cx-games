package environs



type Column struct {
	Floo f32 // floor 
	Ceil f32 // ceiling (0 == open air) 
}

var Terrain []Column

// math/whatev 
var NUM_F32_RAND_INCLUSIVE_POINTS i32
var F32_RAND_GRAIN_SIZE f32



// 1st determine size of valid air space, 
// 2nd, that spans' position within screenspace 

// for collision, 
// 1st determine range of columns player ship is contained in,
// 2nd, if above floo
// 3rd, if below ceiling (skip if open air) 




// in the range of 0 to 1 
func GetRandF32 () (out f32) {
	NUM_F32_RAND_INCLUSIVE_POINTS = 5
	F32_RAND_GRAIN_SIZE = 1.0 / i32.f32(NUM_F32_RAND_INCLUSIVE_POINTS - 1)
	rnd := i32.rand(0, NUM_F32_RAND_INCLUSIVE_POINTS)
	out = F32_RAND_GRAIN_SIZE * i32.f32(rnd)
	printf("GetRandF32 () - rnd: %d - out: %f\n", rnd, out)
}


func Setup () () {
	str.print("environs.Setup()")

	//numColumns := 64
	var f f32
	var c f32
	f = GetRandF32()
	c = GetRandF32()
	printf("floor %f,   ceiling %f \n", f, c)
	
	var colu Column
	//colu = Column{ Floo: f, Ceil: c }
	colu = Column{ Floo: f, Ceil: c }
	printf("colu floor %f,   colu ceiling %f \n", colu.Floo, colu.Ceil)
	Terrain = append(Terrain, colu)
/*
	Terrain[0].Floo = f
	Terrain[0].Ceil = c
*/
}
