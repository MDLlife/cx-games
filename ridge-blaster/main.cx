/*
	RIDGE BLASTER 

	(will be similar to the 80s arcade game Scramble) 
	
	
	
	FORMAL/THOROUGH REPORT & TEST NEEDED FOR THESE BUGS:
		couldn't make a Vec2 on the spot, as a parameter of entity.Add()
			had to declare/define first, THEN could pass it
		
	DEF NEEDS TO BE ADDED TO ISSUES
		couldn't use indexception ( [[ ]] ) 
		no friendly errors / warnings trying to use unimported packages 
		we need math package, or things like i32.maxvalue
		no nil
	
	ADD 
		bindings for .rand() on types other than i32
		
	PAYCHECKS 
		according to Amaury, they are making a new paycheck policy:
			"you need to send your invoice before 5th, shanghai time"
			
	INVOICE REPORTS GIVEN
		[3] I made a struct for Mesh2D objects, and refactored the game from using the entity system to draw the vertex nodes, to using Mesh2D structs to create and render them as they are updated.  I made PLAY, EDIT_VERTICES & EDIT_TRIANGLES modes, and hotkeys to switch between them.  I separated the drawing of gameplay objects/scenery and editor objects (color picking wheel and exaggerated vertex nodes for easier selection, etc.) to their own modes. I made vertex highlights for the current triangle, and made it draw gray triangles to connect them as soon as the user defines each set of 3 points.
*/


package main

import "app"
import "game"



func main () {
	// print app name in shell 
	var bar str
	bar = "__________________________"
	printf("\n\n\n%s %s %s\n", bar, app.NAME, bar)
	str.print("[W], [A], [S], [D] ======== move")
	str.print("[SPACE] or mouse buttons == shoot")
	str.print("[5] ======================= quit")
	str.print("[4] ======================= edit (or toggle between VERTICES & TRIANGLES)")
	str.print("[3] ======================= play")
	str.print("[2] ======================= GenerateMeshInitFunc")
	str.print("^^^^^^^^^^^^^^^^^^^^^^^^^^^")

	game.Init()

	for game.ShouldProceed() {
		game.Update()
	}
}
