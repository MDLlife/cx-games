package main

import "gl"
import "glfw"

var width i32 = 800
var height i32 = 600

var frame f64
var frame2 f64
var texture []i32
var texture2 []i32
var vx f32 =0.0
var vy f32 =0.0
var vx2 f32 =0.1
var test i32=1;
var test_floating f32=0.0

var char_width f32 =80
var char_height f32=110
var char_pos_x f32
var char_pos_y f32


func cube () () {
	gl.BindTexture(gl.TEXTURE_2D, []i32.read(texture, f64.i32(frame)))
	gl.Scalef(0.1, 0.2, 0.0)
	gl.Begin(gl.QUADS)
	gl.TexCoord2d(0.0, 0.0); 
	gl.Vertex3f(-1.0, 1.0, 0.0);
	gl.TexCoord2d(1.0, 0.0); 
	gl.Vertex3f(1.0, 1.0, 0.0);
	gl.TexCoord2d(1.0, 1.0); 
	gl.Vertex3f(1.0, -1.0, 0.0);
	gl.TexCoord2d(0.0, 1.0);
	gl.Vertex3f(-1.0, -1.0, 0.0);
	
	gl.End();
	
}

func cube2 () () {
	gl.BindTexture(gl.TEXTURE_2D, []i32.read(texture2, f64.i32(frame2)))
	gl.Scalef(0.1, 0.2, 0.0)
	gl.Begin(gl.QUADS)
	gl.TexCoord2d(0.0, 0.0); 
	gl.Vertex3f(-1.0, 1.0, 0.0);
	gl.TexCoord2d(1.0, 0.0); 
	gl.Vertex3f(1.0, 1.0, 0.0);
	gl.TexCoord2d(1.0, 1.0); 
	gl.Vertex3f(1.0, -1.0, 0.0);
	gl.TexCoord2d(0.0, 1.0);
	gl.Vertex3f(-1.0, -1.0, 0.0);
	
	gl.End();
	
}

func calculate_pixel(pos_float_x f32,pos_float_y f32)(){
//char_pos_x=f32.add(400.0,f32.mul(pos_float,400.0))
//char_pos_x= (width/2)+pos_float_x*width/2
char_pos_x=f32.add(f32.div(i32.f32(width),2.0),f32.mul(pos_float_x,f32.div(i32.f32(width),2.0)))
f32.print(char_pos_x)
char_pos_y=f32.sub(f32.div(i32.f32(height),2.0),f32.mul(pos_float_y,f32.div(i32.f32(height),2.0)))
f32.print(char_pos_y)

}


func display () () {
	//gl.ClearColor(0.0, 0.0, 0.0, 1.0)
	//gl.Clear(gl.COLOR_BUFFER_BIT)
	
	gl.LoadIdentity()
	gl.Enable(gl.TEXTURE_2D)
	gl.Translatef(vx, vy, 0.0)//here determinte world coordinates
	cube()
	calculate_pixel(vx,vy)
	//test=i32.add(test,1)
	//str.print("test")
	//i32.print(test)
	//glfw.PollEvents()
	//glfw.SwapBuffers("window")
	frame = f64.add(frame, f32.f64(0.01))
	
	if f64.gt(frame, i32.f64(2)) {
		frame = i32.f64(0)
	}
	
	
}

func display2 () () {
	//gl.ClearColor(0.0, 0.0, 0.0, 1.0)
	//gl.Clear(gl.COLOR_BUFFER_BIT)
	
	gl.LoadIdentity()
	gl.Enable(gl.TEXTURE_2D)
	gl.Translatef(0.2, 0.0, 0.0)//here determinte world coordinates
	
	cube2()
	//glfw.PollEvents()
	//glfw.SwapBuffers("window")
	
	frame2 = f64.add(frame2, f32.f64(0.00000001))
	
	
	if f64.gt(frame2, i32.f64(2)) {
		frame2 = i32.f64(0)
	}
}


func charActions (window str, key i32, scancode i32, action i32, mods i32) () {
	
	//vx=0.5;
	if i32.eq(key,263){
	//test=i32.add(test,1)
	//str.print("test")
	//i32.print(test)
	
	//test_floating=f32.add(test_floating,0.0001)
	//f32.print(test_floating)
	vx=f32.sub(vx,0.01)
	display()
	}
	
	if i32.eq(key,262){//right
	vx=f32.add(vx,0.01)
	display()
	}
	if i32.eq(key,265){
	vy=f32.add(vy,0.01)
	display()
	}
	if i32.eq(key,264){//down
	vy=f32.sub(vy,0.01)
	display()
	}
	//if and(i32.eq(key,264),i32.eq(key,262)){//down
	//vy=f32.sub(vy,0.01)
	//vx=f32.add(vx,0.01)
	//display()
	//}
	
	}




func init () () {
	wd := os.GetWorkingDirectory()
	texture = []i32.append(texture, gl.NewTexture(str.concat(wd, "textures/adventurer_walk1.png")))
	texture = []i32.append(texture, gl.NewTexture(str.concat(wd, "textures/adventurer_walk2.png")))
	texture2 = []i32.append(texture2, gl.NewTexture(str.concat(wd, "textures/adventurer_walk2.png")))
	vx=vx2
}

func main () () {
	glfw.Init()
	glfw.WindowHint(glfw.Resizable, glfw.False)
	glfw.WindowHint(glfw.ContextVersionMajor, 2)
	glfw.WindowHint(glfw.ContextVersionMinor, 1)
    //initGlfw("window")

	
	
	glfw.CreateWindow("window", width, height, "Texture Animation")
	glfw.MakeContextCurrent("window")
	

	
	
	gl.Init()
	program := gl.CreateProgram()
	gl.LinkProgram(program)
glfw.SetKeyCallback("window", "charActions")
	init()
	
	stop := not(glfw.ShouldClose("window"))
	
		gl.Enable(gl.BLEND)
	gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
	gl.DepthMask(true)
	
	for not(glfw.ShouldClose("window")) {
		//gl.Clear(i32.bitor(gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT))
		gl.UseProgram(program)
//cube.x=100


		gl.ClearColor(0.0, 0.0, 0.0, 1.0)
	gl.Clear(gl.COLOR_BUFFER_BIT)
	
		display()
		display2()
		

		glfw.PollEvents()
		glfw.SwapBuffers("window")
		
	}
}
