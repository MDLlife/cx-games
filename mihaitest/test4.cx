package main

import "gl"
import "glfw"

type Sprite struct {
	x1 f32
	x2 f32
	y1 f32
	y2 f32
	isObstacle bool
	textureSheet i32
	name str
}


var vertexShaderSource str = "
          #version 120
          void main() {
            gl_Position = gl_ProjectionMatrix * gl_ModelViewMatrix * gl_Vertex * 200;
          }
"

var fragmentShaderSource str = "
          #version 120
          void main() {
            gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
          }
"

var width i32 = 600
var height i32 = 600

var rows i32 = 20
var columns i32 = 20

var size i32 = 14

var tex_characters i32
var tex_city i32
var tex_dungeon i32
var tex_indoor i32
var tex_pack i32

var w_characters i32 = 918
var h_characters i32 = 203
var w_city i32 = 628
var h_city i32 = 475
var w_dungeon i32 = 492
var h_dungeon i32 = 305
var w_indoor i32 = 457
var h_indoor i32 = 305
var w_pack i32 = 968
var h_pack i32 = 526


var sp_knight1 Sprite



func compileShader(source str, shaderType i32) (shader i32) {
	shader := gl.CreateShader(shaderType)

	gl.Strs(source, "csources")
	gl.ShaderSource(shader, 1, "csources")
	gl.Free("csources")
	gl.CompileShader(shader)
}

func addNull (source str) (sourceWithNull str) {
	bSource := str.[]byte(source)

	//withNull := []byte.append(bSource, i32.byte(0))
	bSource := []byte.append(bSource, i32.byte(0))
	sourceWithNull = []byte.str(bSource)
}

func initOpenGL () (program i32) {
	gl.Init()
	
	vertexShader := compileShader(addNull(vertexShaderSource), gl.VERTEX_SHADER)
	fragmentShader := compileShader(addNull(fragmentShaderSource), gl.FRAGMENT_SHADER)

	program := gl.CreateProgram()
	
	gl.AttachShader(program, vertexShader)
	gl.AttachShader(program, fragmentShader)
	gl.LinkProgram(program)
}

func initGlfw (window str) () {
	glfw.Init()
	glfw.WindowHint(glfw.Resizable, glfw.False)
	glfw.WindowHint(glfw.ContextVersionMajor, 2)
	glfw.WindowHint(glfw.ContextVersionMinor, 1)
	// glfw.WindowHint(glfw.OpenGLProfile, glfw.OpenGLCoreProfile)
	//glfw.WindowHint(glfw.OpenGLForwardCompatible, glfw.True)

	glfw.CreateWindow("window", width, height, "Testing")
	glfw.MakeContextCurrent("window")
	//glViewport(0, 0, width, height);
}

func scale (x i32, max i32) (out f32) {
	out = f32.div(i32.f32(x), i32.f32(max))
}

func drawChar (x i32, y i32, texture i32, sprite Sprite) () {
	gl.MatrixMode(gl.MODELVIEW)
	gl.LoadIdentity()
	
	x = i32.sub(i32.add(i32.mul(i32.mod(x, size), 2), 1), size)
	y = i32.sub(i32.add(i32.mul(i32.mod(y, size), 2), 1), size)
	gl.Translatef(f32.add(i32.f32(x), 0.0), f32.add(i32.f32(y), 0.0), f32.mul(i32.f32(size), -1.0))

	// gl.Enable(gl.BLEND)
	// gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
	// gl.DepthMask(true)

	gl.BindTexture(gl.TEXTURE_2D, texture)

	gl.Color4f(1.0, 1.0, 1.0, 1.0)

	gl.Begin(gl.QUADS)

	gl.Normal3f(0.0, 0.0, 0.0)
	gl.TexCoord2f(sprite.x1, sprite.y2)
	gl.Vertex3f(-0.5, -0.5, 0.0)
	gl.TexCoord2f(sprite.x1, sprite.y1)
	gl.Vertex3f(-0.5, 0.5, 0.0)
	gl.TexCoord2f(sprite.x2, sprite.y1)
	gl.Vertex3f(0.5, 0.5, 0.0)
	gl.TexCoord2f(sprite.x2, sprite.y2)
	gl.Vertex3f(0.5, -0.5, 0.0)

	gl.End()
}



func setSprite (s Sprite, isObstacle bool, x1 i32, x2 i32, y1 i32, y2 i32, W i32, H i32, textureSheet i32) () {
	s.isObstacle = isObstacle
	// s.x1 = scale(i32.add(x1, 1), W)
	// s.x2 = scale(i32.sub(x2, 1), W)
	// s.y1 = scale(i32.add(y1, 1), H)
	// s.y2 = scale(i32.sub(y2, 1), H)

	s.x1 = scale(x1, W)
	s.x2 = scale(x2, W)
	s.y1 = scale(y1, H)
	s.y2 = scale(y2, H)
	
	
	/*s.x1=x1
	s.x2=x2
	s.y1=y1
	s.y2=y2*/
	s.textureSheet = textureSheet
}

func setupScene () () {
	gl.Disable(gl.DITHER)
	gl.Disable(gl.POINT_SMOOTH)
	gl.Disable(gl.LINE_SMOOTH)
	gl.Disable(gl.POLYGON_SMOOTH)
	gl.Hint(gl.POINT_SMOOTH, gl.DONT_CARE)
	gl.Hint(gl.LINE_SMOOTH, gl.DONT_CARE)
	gl.Hint(gl.POLYGON_SMOOTH_HINT, gl.DONT_CARE)
	gl.Disable(gl.MULTISAMPLE_ARB)
	
	gl.TexEnvi(gl.TEXTURE_ENV, gl.TEXTURE_ENV_MODE, gl.MODULATE)
	gl.Disable(gl.DEPTH_TEST)

	gl.ClearColor(1.0, 1.0, 1.0, 1.0)
	gl.ClearDepth(f32.f64(1.0))
	gl.DepthFunc(gl.LEQUAL)
	
	gl.Enable(gl.BLEND)
	gl.BlendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA)
	gl.DepthMask(true)

	gl.MatrixMode(gl.PROJECTION)
	gl.LoadIdentity()
	
	gl.Frustum(
		f32.f64(-1.0), f32.f64(1.0), f32.f64(-1.0),
		f32.f64(1.0), f32.f64(1.0), i32.f64(i32.add(size, 1)))

	gl.MatrixMode(gl.MODELVIEW)
	gl.LoadIdentity()

        tex_characters = gl.NewTexture("examples/textures/roguelike_characters.png")
		setSprite(sp_knight1, true, 0, 16, 187, 203, w_characters, h_characters, tex_characters)

	

}







var p1x i32 = 10
var p1y i32 = 1

func main () () {
	// for world generation
	// rules := ->{
		
	// }

	initGlfw("window")
	program := initOpenGL()

	glfw.SetKeyCallback("window", "charActions")

	stop := not(glfw.ShouldClose("window"))

	lSize := i32.mul(size, size)
	
	setupScene()
 
	for stop {
		gl.Clear(i32.bitor(gl.COLOR_BUFFER_BIT, gl.DEPTH_BUFFER_BIT))
		
		

		//drawTile(3, 0, tex_pack, sp_brown_wall_lr)
		drawChar(p1x, p1y, tex_characters, sp_knight1)
		//drawTile(3, 3, getSprite(40))
		

		glfw.PollEvents()
		glfw.SwapBuffers("window")
		

		//str.print(str.read())
		// here it closes the window
		stop = not(glfw.ShouldClose("window"))
	}
}
