package gameDraw

import "gui"
import "inputs"
import "menu"



func InitFontsAndMenuItems() {
	gl.DepthFunc(gl.LESS)
	
	var file str = "../CXtris/assets/fonts/roboto-light.ttf"
	loadFontSized(file, f32.i32(menu.MainSize))
	loadFontSized(file, f32.i32(menu.OptionsSize))
	loadFontSized(file, 28)
	loadFontSized(file, 100)
	
	menu.Init()

	var pmi i32 = -1                 // previous menu id 
	var nm  i32 = len(menu.Items)    // nm == num menus 
	for m := 0; m < nm; m++ {        // m  == menu id 
	var ni  i32 = len(menu.Items[m]) // ni == num items 
	for i := 0; i < ni; i++ {        // i  == item id 
		var font str = str.concat("Roboto", sprintf("%d", f32.i32(menu.Items[m][i].Size)))
		menu.Items[m][i].Font = font		
		var w i32
		var h i32
		w, h = gltext.Metrics(font, 
		menu.Items[m][i].Text)
		menu.Items[m][i].Wid = i32.f32(w)
		menu.Items[m][i].Hei = i32.f32(h)
		menu.Items[m][i].Left = (i32.f32(app.START_WIDTH) - menu.Items[m][i].Wid) / 2.0
		
		// print CLI info 
		if pmi != m {
			pmi = m
			printf("menu: %d \n", m)
		}
		
		printf("    fontId: %s --- size: %d,%d --- item: '%s' \n", 
			font, w, h, menu.Items[m][i].Text)
	}
	}
}


func loadFontSized (fn str, size i32) { // filename 
	var s str = str.concat("Roboto", sprintf("%d", size))
	
	os.Open(fn)
	gltext.LoadTrueType(s, fn, size, 32, 127, gltext.LeftToRight)
	os.Close(fn)
	
	/*   THE "s" below should actually be "fn" maybe?
	     2DBUG's screenshot wasn't drawing 'CXtris' text 
	     
	var handle i32 = os.Open(fn)
	if handle >= 0 {
		gltext.LoadTrueType(handle, s, size, 32, 127, gltext.LeftToRight)
		if os.Close(handle) {
		}
	}
	*/
}


func allText () {
	var nameX f32 = 150.0
	var nameScale f32 = 0.7
	var vOffs f32 = -38.0
	
	gl.Enable(gl.DEPTH_TEST)
		scoreText()
		drawOutlinedText(app.Name, nameX, vOffs, nameScale)
		
		if app.Mode < app.MODE_MENU_MAX { // in a menu 
			if app.Mode == app.MODE_MENU_CONTROLS {
				drawKeyCapTexts()
			}
			
			menuTexts()
		}else
		if app.Mode == app.MODE_PLAYING {
			if gui.ShowControls {
				drawKeyCapTexts()
			}
		}else
		if app.Mode == app.MODE_GAME_OVER {
			drawOutlinedText("GAME OVER", 18.0, i32.f32(app.START_WIDTH / 2), 1.0)
		}		
	gl.Disable(gl.DEPTH_TEST)
}


func menuTexts () {
	var m i32 = app.Mode
	gl.LoadIdentity()

	// greater y (value) 
	var gY f32 = i32.f32(app.START_HEIGHT - 1) 

	///////////////drawOutlinedText(5.0)

	for i := i32.sub(len(menu.Items[m]), 1); i >= 0; i-- {
		var y f32 = f32.sub(gY, menu.Items[m][i].Hei)

		if inputs.PointerInYPixelRange(y, gY) {
			menu.Items[m][i].Hover = true			
			gl.Color3f(1.0, 1.0, 1.0)
		}else{
			menu.Items[m][i].Hover = false
			gl.Color3f(draw.Mid, draw.Mid, draw.Mid)
		}

		gltext.Printf(
			menu.Items[m][i].Font, 
			menu.Items[m][i].Left, 
			y, 
			menu.Items[m][i].Text)
			
		gY = y
	}
}


func drawKeyCapTexts () {
	var pixHSpan f32 = i32.f32(app.START_WIDTH) / 3.0
	var pixVSpan f32 = pixHSpan //100.0
	var x f32
	var y f32 = i32.f32(app.START_HEIGHT) - pixVSpan - 14.0
	for i := 0; i < len(keySetPri); i++ {
		drawOutlinedText(keySetPri[i], x, y, 1.0)
		
		if i == 2 {
			x = 0.0
			y = y - pixVSpan
		}else
		if i == 3 {
			x = x + pixHSpan
			x = x + pixHSpan
		}else{
			x = x + pixHSpan
		}
	}

	//s = s + "ROTATE Left  == LMB,  [LCtrl], [RAlt]\n"
	//s = s + "ROTATE Right == RMB,  [LAlt],  [RCtrl]\n"
}


func scoreText () {
	var sX f32 = i32.f32(i32.sub(app.START_WIDTH, 59))
	var sY f32 = i32.f32(93) //app.START_HEIGHT)
	gl.LoadIdentity()
	gl.Color3f(1.0, 1.0, 1.0)
	gltext.Printf("Roboto28", sX, sY, shape.PlayerScoreTxt)
}


func drawOutlinedText (s str, x f32, y f32, scale f32) {
	var alpha f32 = 1.0
	gl.Scalef(scale, scale, 0.0)

	// background shadow 
	printTextWithColor(s, x+1.0, y+1.0, 0.0, 0.0, 0.0, alpha)
	printTextWithColor(s, x-1.0, y+1.0, 0.0, 0.0, 0.0, alpha)
	printTextWithColor(s, x+1.0, y-1.0, 0.0, 0.0, 0.0, alpha)
	printTextWithColor(s, x-1.0, y-1.0, 0.0, 0.0, 0.0, alpha)
	// main filling on top 
	printTextWithColor(s, x,     y,     1.0, 0.5, 0.0, alpha)
}


// x & y are offsets 
func printTextWithColor (s str, x f32, y f32, r f32, g f32, b f32, a f32) {
	gl.Color4f(r, g, b, a)
	gltext.Printf("Roboto100", x, y, s)
}
