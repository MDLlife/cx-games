package main

import "inputs"
import "menu"



func update () { // ATM, only responding to mouse button events 
	var button i32
	var action i32
	button, action = inputs.GetOldestButtonEvent ()
		
	if action == 0 { // release 
		if button == 0 { // LMB 
			inputs.HoldingLeftButton = false
		}	
	} else 
	if action == 1 { // press 
		//printf("onMouseButtonEvent() - %f, %f \n", MousePointer.X, MousePointer.Y)

		if button == 0 { // LMB 
			inputs.HoldingLeftButton = true

			if app.Mode <= app.MODE_MENU_OPTIONS { // in a menu 
				respondToMenu()
			}
			
			shape.PlayerRotate(-1)
		} else
		if button == 1 { // RMB 
			shape.PlayerRotate(1)
		} else { // MMB or extra buttons (would be unwise to require more than 3 buttons) 
		}
	}
}


func respondToMenu () {
	var s str
	var i i32
	s, i = menu.GetHoveredItem(app.Mode)

	/*
	if s == menu.ItemText {
		menu.Setting = menu.SetSliderValue(i, f64.f32(MousePointerX64))
	} else
	*/
	if s == menu.DebrisHeightText {
		menu.DebrisHeight = menu.SetSliderValue(i, f64.f32(inputs.MousePointerX64))
		shape.StartNewGameSession()
	} else
	if s == menu.SpeedText {
		time.DropSpeed =    menu.SetSliderValue(i, f64.f32(inputs.MousePointerX64))
		time.CalcDropTime()
	} else
	if s == menu.Play {
		inputs.SetMousePointer(false)
		shape.PlayerScore    =  0
		shape.PlayerScoreTxt = "0"
		shape.StartNewGameSession
		app.Mode = app.MODE_PLAYING
	} else
	if s == menu.Options {
		app.Mode = app.MODE_MENU_OPTIONS
	} else
	if s == menu.Quit {
		glfw.SetShouldClose(app.Name, true)
	} else
	if s == menu.ShowNextShapeText + "YES" {
		    menu.ShowNextShape = false
		menu.Items[app.Mode][i].Text = menu.ShowNextShapeText + "NO"
	} else
	if s == menu.ShowNextShapeText + "NO" {
		    menu.ShowNextShape = true
		menu.Items[app.Mode][i].Text = menu.ShowNextShapeText + "YES"
	}
}
