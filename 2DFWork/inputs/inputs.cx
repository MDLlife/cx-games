package inputs

import "glfw"

import "app"



func Init () {
	str.print("inputs.Init ()")
	glfw.SetKeyCallback(app.Name, "onKeyEvent")
}


func Update () {
	str.print("inputs.Update ()")
}


func HoldingGoLeft () (out bool) {
	if i32.eq(glfw.GetKey(app.Name, GLFW_KEY_A), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_LEFT), 1) {
		out = true
	}
}
func HoldingGoRight () (out bool) {
	if i32.eq(glfw.GetKey(app.Name, GLFW_KEY_D), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_RIGHT), 1) {
		out = true
	}
}
func HoldingGoDown () (out bool) {
	if i32.eq(glfw.GetKey(app.Name, GLFW_KEY_S), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_DOWN), 1) {
		out = true
	}
}
func HoldingGoUp () (out bool) {
	if i32.eq(glfw.GetKey(app.Name, GLFW_KEY_W), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_UP), 1) {
		out = true
	}
}


// keys 
func onKeyEvent (window str, key i32, scancode i32, action i32, mods i32) {
	// action == 0, release 
	// action == 1, press 
	// action == 2, is an autorepeat event, generated by keys that are held longer than a second

	if action >= 1 { // (press or repeat) 
		//str.print("-------------------------------------PRESS (not a repeat)")

		//maybeOpenMenu(key)
		
		if key == 53 { // GLFW_KEY_5 
			// close 
			str.print("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ QUITTING GAME ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")
			glfw.SetShouldClose(app.Name, true)
		} else
		//if app.Mode == app.MODE_PLAYING {
			if eventLeft(key) {
			} else
			if eventRight(key) {
			} else
			if eventUp(key) {
			} else
			if eventDown(key) {
			}
		//}
	}
}


func maybeOpenMenu (key i32) {
	if eventBackOrEscape(key) ||
		key == 257 || // GLFW_KEY_ENTER
		key == 258 || // GLFW_KEY_TAB 
		key == 259 { // GLFW_KEY_BACKSPACE 

		//app.Mode = app.MODE_MENU_MAIN
	}
}


func eventBackOrEscape (key i32) (out bool) {
	if i32.eq(glfw.GetKey(app.Name, GLFW_KEY_ESCAPE), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_HOME), 1) {
		out = true
	}
}


func eventLeft (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_A) ||
    i32.eq(key, GLFW_KEY_LEFT) {
    out = true
  }
}

func eventRight (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_D) ||
    i32.eq(key, GLFW_KEY_RIGHT) {
    out = true
  }
}

func eventDown (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_S) ||
    i32.eq(key, GLFW_KEY_DOWN) {
    out = true
  }
}

func eventUp (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_W) ||
    i32.eq(key, GLFW_KEY_UP) {
    out = true
  }
}


/*
func respondToMenu () {
	var s str
	var i i32
	s, i = menu.GetHoveredItem(app.Mode)

	if s == menu.ItemText {
		menu.Setting = menu.SetSliderValue(i, f64.f32(MousePointerX64))
	} else
	if s == menu.Play {
		app.Mode = app.MODE_PLAYING
	} else
	if s == menu.Options {
		app.Mode = app.MODE_MENU_OPTIONS
	} else
	if s == menu.Quit {
		glfw.SetShouldClose(app.Name, true)
	}
}
*/
