package inputs



// i'm not really happy with the default repeat timing of GLFW. 
// so later, make the delay-until-repeat a little less,
// and make the repeats maybe around twice as fast
//var timeSinceAnyKeyEvent f64
//var timeToRepeat



// polling 
func HoldingGoLeft () (out bool) {
	if i32.eq(glfw.GetKey(app.Name, GLFW_KEY_A), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_LEFT), 1) {
		out = true
	}
}
func HoldingGoRight () (out bool) {
	if i32.eq(glfw.GetKey(app.Name, GLFW_KEY_D), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_RIGHT), 1) {
		out = true
	}
}
func HoldingGoDown () (out bool) {
	if i32.eq(glfw.GetKey(app.Name, GLFW_KEY_S), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_DOWN), 1) {
		out = true
	}
}
func HoldingGoUp () (out bool) {
	if i32.eq(glfw.GetKey(app.Name, GLFW_KEY_W), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_UP), 1) {
		out = true
	}
}



// keycode events 
func maybeOpenMenu (key i32) {
	if eventBackOrEscape(key) ||
		key == 257 || // GLFW_KEY_ENTER
		key == 258 || // GLFW_KEY_TAB 
		key == 259 { // GLFW_KEY_BACKSPACE 

		//app.Mode = app.MODE_MENU_MAIN
	}
}
func eventBackOrEscape (key i32) (out bool) {
	if i32.eq(glfw.GetKey(app.Name, GLFW_KEY_ESCAPE), 1) ||
		i32.eq(glfw.GetKey(app.Name, GLFW_KEY_HOME), 1) {
		out = true
	}
}


// 		directions 
func eventLeft (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_A) ||
    i32.eq(key, GLFW_KEY_LEFT) {
    out = true
  }
}
func eventRight (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_D) ||
    i32.eq(key, GLFW_KEY_RIGHT) {
    out = true
  }
}
func eventDown (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_S) ||
    i32.eq(key, GLFW_KEY_DOWN) {
    out = true
  }
}
func eventUp (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_W) ||
    i32.eq(key, GLFW_KEY_UP) {
    out = true
  }
}

func eventRotateLeft (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_Q) ||
  	i32.eq(key, GLFW_KEY_LEFT_SHIFT) ||
    i32.eq(key, GLFW_KEY_RIGHT_SHIFT) {
    out = true
  }
}

func eventRotateRight (key i32) (out bool) {
  if i32.eq(key, GLFW_KEY_E) ||
  	i32.eq(key, GLFW_KEY_LEFT_CONTROL) ||
    i32.eq(key, GLFW_KEY_RIGHT_CONTROL) {
    out = true
  }
}



func onKeyEvent (window str, key i32, scancode i32, action i32, mods i32) {
	// action == 0, release 
	// action == 1, press 
	// action == 2, is an autorepeat event, generated by keys that are held longer than a second

	if action >= 1 { // (press or repeat) 
		//str.print("-------------------------------------PRESS (not a repeat)")

		//maybeOpenMenu(key)
		//maybeEnableMousePointer(key)
		
		if key == 53 { // GLFW_KEY_5 
			// close 
			str.print("^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ QUITTING GAME ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^")
			glfw.SetShouldClose(app.Name, true)
		} else
		if app.Mode == app.MODE_PLAYING {
			if eventLeft(key) {
				//shape.MoveByOffset(-1, 0)
			} else
			if eventRight(key) {
				//shape.MoveByOffset(1, 0)
			} else
			if eventUp(key) {
				// NO NEED TO MOVE UP 
			} else
			if eventDown(key) {
				//shape.MoveByOffset(0, -1)
			} else
			if eventRotateLeft(key) {
				//shape.PlayerRotate(-1)
			} else
			if eventRotateRight(key) {
				//shape.PlayerRotate(1)			
			}
		}
	}
}
