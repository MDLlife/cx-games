package ccInput
import "main"

var GLFW_KEY_5 i32 = 53

var	GLFW_KEY_A i32 = 65
var	GLFW_KEY_D i32 = 68
var	GLFW_KEY_W i32 = 87
var	GLFW_KEY_S i32 = 83

var	GLFW_KEY_I i32 = 73
var GLFW_KEY_J i32 = 74
var GLFW_KEY_K i32 = 75
var GLFW_KEY_L i32 = 76

var headMoveLeft bool
var headMoveRight bool
var headMoveUp bool
var headMoveDown bool

var tailMoveLeft bool
var tailMoveRight bool
var tailMoveUp bool
var tailMoveDown bool



func OnKeyEvent (window str, key i32, scancode i32, action i32, mods i32) () {
	//action == 2, is an autorepeat event, generated for keys that are held longer than a second

	if key == GLFW_KEY_5 {
		glfw.SetShouldClose("window", true)
	}



	if /* not repeat */ action != 2 {
		// snake tail motion 

		if key == GLFW_KEY_A {
			tailMoveLeft = ccInput.GetMoveStatus(action, key)
		}

		if key == GLFW_KEY_D {
			tailMoveRight = ccInput.GetMoveStatus(action, key)
		}

		if key == GLFW_KEY_W {
			tailMoveUp = ccInput.GetMoveStatus(action, key)
		}

		if key == GLFW_KEY_S {
			tailMoveDown = ccInput.GetMoveStatus(action, key)
		}



		// snake head motion 

		if key == GLFW_KEY_J {
			headMoveLeft = ccInput.GetMoveStatus(action, key)
		}

		if key == GLFW_KEY_L {
			headMoveRight = ccInput.GetMoveStatus(action, key)
		}

		if key == GLFW_KEY_I {
			headMoveUp = ccInput.GetMoveStatus(action, key)
		}

		if key == GLFW_KEY_K {
			headMoveDown = ccInput.GetMoveStatus(action, key)
		}
	}
}


func GetMoveStatus(action i32, key i32) (out bool) {
	if /* release */ action == 0 {
		return false
	} else {
		return true
	}
}


var velocityInc f32 = 0.001
var maxVelocity f32 = 0.01
var maxNegativeVelocity f32 = -0.01
func AdjustVelocityByKeyState(tail Ball, head Ball) () {
	if tailMoveLeft {
		tail.vx -= velocityInc

		if tail.vx < maxNegativeVelocity {
			tail.vx = maxNegativeVelocity
		}
	} 
	
	if tailMoveRight {
		tail.vx += velocityInc

		if tail.vx > maxVelocity {
			tail.vx = maxVelocity
		}
	} 



	if !tailMoveLeft && !tailMoveRight {
		if tail.vx > 0.0 {
			tail.vx -= velocityInc

			if tail.vx < 0.0 {
				tail.vx = 0.0
			}
		}

		if tail.vx < 0.0 {
			tail.vx += velocityInc

			if tail.vx > 0.0 {
				tail.vx = 0.0
			}
		}
	}




	if tailMoveDown {
		tail.vy -= velocityInc

		if tail.vy < maxNegativeVelocity {
			tail.vy = maxNegativeVelocity
		}
	} 
	
	if tailMoveUp {
		tail.vy += velocityInc

		if tail.vy > maxVelocity {
			tail.vy = maxVelocity
		}
	} 



	if !tailMoveUp && !tailMoveDown {
		if tail.vy > 0.0 {
			tail.vy -= velocityInc

			if tail.vy < 0.0 {
				tail.vy = 0.0
			}
		}

		if tail.vy < 0.0 {
			tail.vy += velocityInc

			if tail.vy > 0.0 {
				tail.vy = 0.0
			}
		}
	}




	if headMoveLeft {
		head.vx -= velocityInc

		if head.vx < maxNegativeVelocity {
			head.vx = maxNegativeVelocity
		}
	} 
	
	if headMoveRight {
		head.vx += velocityInc

		if head.vx > maxVelocity {
			head.vx = maxVelocity
		}
	} 



	if !headMoveLeft && !headMoveRight {
		if head.vx > 0.0 {
			head.vx -= velocityInc

			if head.vx < 0.0 {
				head.vx = 0.0
			}
		}

		if head.vx < 0.0 {
			head.vx += velocityInc

			if head.vx > 0.0 {
				head.vx = 0.0
			}
		}
	}




	if headMoveDown {
		head.vy -= velocityInc

		if head.vy < maxNegativeVelocity {
			head.vy = maxNegativeVelocity
		}
	} 
	
	if headMoveUp {
		head.vy += velocityInc

		if head.vy > maxVelocity {
			head.vy = maxVelocity
		}
	} 



	if !headMoveUp && !headMoveDown {
		if head.vy > 0.0 {
			head.vy -= velocityInc

			if head.vy < 0.0 {
				head.vy = 0.0
			}
		}

		if head.vy < 0.0 {
			head.vy += velocityInc

			if head.vy > 0.0 {
				head.vy = 0.0
			}
		}
	}
}