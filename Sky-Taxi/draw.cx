package draw

import "gl"

import "app"
import "main"
import "map"



var TAU f32 = f32.mul(2.0, 3.141592654)



func Ball (ball main.Ball) () {
	var x f32
	var y f32

	gl.Begin(gl.POLYGON)
	gl.Color3f(1.0, 1.0, 1.0)

	var i f32
	for i = 0.0; f32.lt(i, 20.0); i = f32.add(i, 1.0) {
		x = f32.add(ball.x, f32.mul(ball.radius, f32.cos(f32.div(f32.mul(i, TAU), 20.0))))
		y = f32.add(ball.y, f32.mul(ball.radius, f32.sin(f32.div(f32.mul(i, TAU), 20.0))))

		gl.Vertex2f(x, y)
	}

	gl.End()
}



func Rects () {
	var x f32
	var y f32

	gl.Begin(gl.QUADS)
		var i i32
		for iY := 0; iY < map.NumRoomsAcross; iY++ {
		for iX := 0; iX < map.NumRoomsAcross; iX++ {
			if iX == 0 {
				x = -1.0
			}
			if iY == 0 {
				y = -1.0
			}

			// greater value edge 
			var gX f32 = x + map.RoomSpan
			var gY f32 = y + map.RoomSpan
			
			// color 
			var l i32 = len(app.Colors)
			var c i32 = i % l
			gl.Color3f(
				app.Colors[c].R,
				app.Colors[c].G,
				app.Colors[c].B)
			
			var r Room = map.Rooms[iY][iX]
			if bool.not(r.Blank) {
				gl.Vertex2f(x,  gY) // upper left...
				gl.Vertex2f(gX, gY) // ...proceed clockwise...
				gl.Vertex2f(gX, y)
				gl.Vertex2f(x,  y)
			}
			
			i++
			x = x + map.RoomSpan
		}
			y = y + map.RoomSpan
		}
	gl.End()
}
