/*

In our imagined world for this game, the universe is filled with solid
rock everywhere.

We have a limited grid of possibilities, where we will carve out air space
in MOST of those cells.  Some will remain
solid rock, for a bit of variety in overall map shape.

I THINK OF THE Y DIMENSION INCREASING UPWARDS
	SO KEEP THIS IN MIND WITH geom.DIR_...ECTIONS AND THE "Cells" GRID INDEXING 
	
This is how it is by default in OpenGL space, Unity and many modern 3D
apps, so I think it's important to generally keep synchronized with this.

*/

package map

import "app"
import "geom"



var NumCellsAcross i32 = 4 // in both dimensions 
var CellSpan f32 = 2.0 / i32.f32(NumCellsAcross)
var Cells [4][4]Cell   // FIXME: use constants when we can 
var Carvs []CarvedRoom // used/carved-out locations of the Cells grid 

type Cell struct {
	Exits     []i32
}

type CarvedRoom struct {
	// insets (from room bounds) 
	/*Top    f32
	Right  f32
	Bottom f32
	Left   f32*/
	
	Pos       app.Vec2i
	Exits     []i32
}



func Init () {
	//showActiveStatii()
	setupPossibleExits()
	//showActiveStatii()
	carveOutConnectedCells()
}


func setupPossibleExits () {
	for iY := 0; iY < NumCellsAcross; iY++ {
	for iX := 0; iX < NumCellsAcross; iX++ {
		var r Cell
		
		if iX > 0 {
			r.Exits = append(
			r.Exits, geom.DIR_LEFT)
		}
		
		if iX < i32.sub(NumCellsAcross, 1) {
			r.Exits = append(
			r.Exits, geom.DIR_RIGHT)
		}
		
		if iY > 0 {
			r.Exits = append(
			r.Exits, geom.DIR_DOWN)
		}
		
		if iY < i32.sub(NumCellsAcross, 1) {
			r.Exits = append(
			r.Exits, geom.DIR_UP)
		}
		
		Cells[iY][iX] = r
		//printf("setupPossibleExits() len(r.Exits): %d \n", len(r.Exits))
		////var poss []i32 = Cells[iY][iX].Exits
		////printf("Cells[iY][iX].Exits: %d \n", len(poss))
	}
	}
}


func getRandomRoomInGrid () (x i32, y i32, r Cell) {
	var rnd i32 = i32.rand(0, len(Carvs))
	i32.print(rnd)
	x = Carvs[rnd].Pos.X
	y = Carvs[rnd].Pos.Y
	r = Cells[y][x]
}


func carveOutConnectedCells () {
	var x i32
	var y i32
	var r Cell
		
	var numInactives i32 = i32.rand(1, 5)
	str.print("numInactives: ")
	i32.print(numInactives)
	var n i32 = NumCellsAcross * NumCellsAcross - numInactives
	
	for i := 0; i < n; i++ {
		if /* 1st room */ i == 0 {
			// make anywhere 
			x = i32.rand(0, NumCellsAcross)
			y = i32.rand(0, NumCellsAcross)
			carveOutRoomWithExit(x, y, 0)
		}else{
			x, y, r = getRandomRoomInGrid()
			//printf("carveOutConnectedCells() len(r.Exits): %d \n", len(r.Exits))
			
			for len(r.Exits) < 1 {
				x, y, r = getRandomRoomInGrid()
			}
			
			// random (exit) id 
			var ri i32 = i32.rand(0, len(r.Exits))
			var e /* exit */ i32 = r.Exits[ri]

			if e == geom.DIR_LEFT {
				removeExitFromGrid(x,   y, e)
				printf("AFTER DIR_LEFT removeExitFromGrid ------num exits: %d \n", len(r.Exits))
				carveOutRoomWithExit(x-1, y, geom.DIR_RIGHT)
			}else			
			if e == geom.DIR_RIGHT {
				removeExitFromGrid(x,   y, e)
				printf("AFTER DIR_RIGHT removeExitFromGrid ------num exits: %d \n", len(r.Exits))
				carveOutRoomWithExit(x+1, y, geom.DIR_LEFT)
			}else			
			if e == geom.DIR_DOWN {
				removeExitFromGrid(x, y,   e)
				printf("AFTER DIR_DOWN removeExitFromGrid ------num exits: %d \n", len(r.Exits))
				carveOutRoomWithExit(x, y-1, geom.DIR_UP)
			}else			
			if e == geom.DIR_UP {
				removeExitFromGrid(x, y,   e)
				printf("AFTER DIR_UP removeExitFromGrid ------num exits: %d \n", len(r.Exits))
				carveOutRoomWithExit(x, y+1, geom.DIR_DOWN)
			}
		}
	}
}


func carveOutRoomWithExit (x i32, y i32, dir i32) {
	var newLoc CarvedRoom
	newLoc.Pos.X = x
	newLoc.Pos.Y = y
	
	if len(Carvs) != 0 { // no direction to set for 1st room 
		newLoc.Exits = append(
		newLoc.Exits, dir)
	}
	
	Carvs = append(
	Carvs, newLoc)
	removeExitFromGrid(x, y, dir)

	printf("carveOutRoomWithExit(%d, %d)   -   len(Carvs): %d \n", x, y, len(Carvs))
	var c Cell = Cells[y][x]
	printf("carveOutRoomWithExit() AFTER removeExitFromGrid() ------num exits: %d \n", len(c.Exits))
}


func removeExitFromGrid (x i32, y i32, dir i32) {
	var log bool = true//false
	
	if log { 
		str.print("___________________________________________________________")
		printf("removeExitFromGrid(%d, %d, %s) \n", x, y, getTextForDir(dir))
	}
	
	var c Cell = Cells[y][x]
	// remove from Exits 
	
	if log { printf("------num exits INSIDE-BEFORE: %d \n", len(c.Exits))
	}

	var n i32 = len(c.Exits)
	for i := i32.sub(n, 1); i >= 0; i = i32.sub(i, 1) {
		if log { str.print(getTextForDir(c.Exits[i]))
		}
		
		if c.Exits[i] == dir {
			if log { str.print("***************************FOUND removable")
			}
			c.Exits = remove(c.Exits, i)
		}
	}
	
	if log { printf("------num exits INSIDE-AFTER: %d \n", len(c.Exits))
	}
}


func getInversion (dir i32) (out i32) { // (opposite direction) 
	if dir == geom.DIR_LEFT {
		out = geom.DIR_RIGHT
	}else	
	if dir == geom.DIR_RIGHT {
		out = geom.DIR_LEFT
	}else	
	if dir == geom.DIR_DOWN {
		out = geom.DIR_UP
	}else	
	if dir == geom.DIR_UP {
		out = geom.DIR_DOWN
	}
}


func getTextForDir (dir i32) (out str) {
	if dir ==  geom.DIR_LEFT {
		out = "     DIR_LEFT"
	}else	
	if dir ==  geom.DIR_RIGHT {
		out = "     DIR_RIGHT"
	}else	
	if dir ==  geom.DIR_DOWN {
		out = "     DIR_DOWN"
	}else	
	if dir ==  geom.DIR_UP {
		out = "     DIR_UP"
	}
}


func GetNumCarvs () (out i32) {
	out = len(Carvs)
}


func GetGridPos (i i32) (out app.Vec2i) {
	out = Carvs[i].Pos
}


var currExit i32
func GetExitAt (i i32) (out i32) {
	//printf("len(Carvs[i].Exits): %d\n", len(Carvs[i].Exits))
	
	if i < len(Carvs[i].Exits) {
		out = Carvs[i].Exits[currExit]
		currExit++
		i32.print(currExit)
	}else{
		out = app.MAX_I32
		currExit = 0
	}
}