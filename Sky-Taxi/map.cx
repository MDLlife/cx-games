/*

In our imagined world for this game, the universe is filled with solid
rock everywhere.

We have a cell grid of possibilities.  We carve out air/room space
in MOST of those cells.  Some will remain
solid rock, for a bit of variety in overall map shape.

I THINK OF THE Y DIMENSION INCREASING UPWARDS
	SO KEEP THIS IN MIND WITH geom.DIR_* (directions) 
	& THE "Cells" GRID INDEXING 
	
This is how it is by default in OpenGL space, Unity and many modern 3D
apps, so I think it's important to generally use this convention. 

*/

package map

import "app"
import "draw"
import "geom"



var NumCellsAcross i32 = 4 // in both dimensions 
var CellSpan f32 = 2.0 / i32.f32(NumCellsAcross)
var Cells [4][4]Cell   // FIXME: use constants when we can 
var Carvs []CarvedRoom // used/carved-out locations of the Cells grid 

type Cell struct {
	CarvedId i32 // MAX_I32 == solid rock 
	Exits    []i32
}

type CarvedRoom struct {
	// insets (from room bounds) 
	/*Top    f32
	Right  f32
	Bottom f32
	Left   f32*/
	
	Pos       app.Vec2i
	Exits     []i32
}



func Init () {
	setupPossibleExits()
	carveOutConnectedRooms()
}


func DrawQuads () {
	var x f32
	var y f32

	draw.QuadsBegin()
		var n i32 = len(Carvs)
		//printf("murrr: %d \n", n)
		for i := 0; i < n; i++ {
			var x i32 = Carvs[i].Pos.X
			var y i32 = Carvs[i].Pos.Y
			var mulX f32 = f32.mul(i32.f32(x), CellSpan)
			var mulY f32 = f32.mul(i32.f32(y), CellSpan)
			
			var b f32 = f32.add(-1.0, mulY)
			var l f32 = f32.add(-1.0, mulX)
			var t f32 = b + CellSpan
			var r f32 = l + CellSpan
			
			draw.SetSequentiallyCycledColor(i32.add(x, i32.mul(y, NumCellsAcross)))
			draw.Quad(t, r, b, l)
			
			// connection rects 
			draw.SetColor(0.0, 0.0, 0.0) // black 
			var ins f32 = 0.085 // inset 
			var ex i32 // exit 
			
			for j := 0; j < len(Carvs[i].Exits); j++ {
				var ex i32 = Carvs[i].Exits[j]

				if ex == geom.DIR_LEFT {
					draw.Quad(t-ins, r-ins, b+ins, l)
				}else	
				if ex == geom.DIR_RIGHT {
					draw.Quad(t-ins, r,     b+ins, l+ins)
				}else	
				if ex == geom.DIR_DOWN {
					draw.Quad(t-ins, r-ins, b,     l+ins)
				}else	
				if ex == geom.DIR_UP {
					draw.Quad(t,     r-ins, b+ins, l+ins)
				}
			}
		}
	draw.End()
}


func setupPossibleExits () {
	for iY := 0; iY < NumCellsAcross; iY++ {
	for iX := 0; iX < NumCellsAcross; iX++ {
		var r Cell
		r.CarvedId = app.MAX_I32
		
		if iX > 0 {
			r.Exits = append(
			r.Exits, geom.DIR_LEFT)
		}
		
		if iX < i32.sub(NumCellsAcross, 1) {
			r.Exits = append(
			r.Exits, geom.DIR_RIGHT)
		}
		
		if iY > 0 {
			r.Exits = append(
			r.Exits, geom.DIR_DOWN)
		}
		
		if iY < i32.sub(NumCellsAcross, 1) {
			r.Exits = append(
			r.Exits, geom.DIR_UP)
		}
		
		Cells[iY][iX] = r
		//printf("setupPossibleExits() len(r.Exits): %d \n", len(r.Exits))
		////var poss []i32 = Cells[iY][iX].Exits
		////printf("Cells[iY][iX].Exits: %d \n", len(poss))
	}
	}
}


func getRandomCarvedRoom () (x i32, y i32, c Cell, carvedRoomId i32) {
	carvedRoomId = i32.rand(0, len(Carvs))
	printf("getRandomCarvedRoom: %d \n", carvedRoomId)
	x = Carvs[carvedRoomId].Pos.X
	y = Carvs[carvedRoomId].Pos.Y
	c = Cells[y][x]
}


func carveOutConnectedRooms () {
	var x i32
	var y i32
	var oc Cell  // older cell 
	var orId i32 // older room id 
		
	var numInactives i32 = i32.rand(1, 5)
	str.print("numInactives: ")
	i32.print(numInactives)
	var n i32 = NumCellsAcross * NumCellsAcross - numInactives
	
	for i := 0; i < n; i++ {
		if /* 1st room */ i == 0 {
			// make anywhere 
			x = i32.rand(0, NumCellsAcross)
			y = i32.rand(0, NumCellsAcross)
			var cr CarvedRoom = carveOutRoom(x, y, len(Carvs))
	
			
			
			Carvs = append(
			Carvs, cr)
			printf("carved FIRST new @ %d, %d   -   len(Carvs): %d \n", x, y, len(Carvs))
		}else{
			// old cell, old (carved) room id 
			x, y, oc, orId = getRandomCarvedRoom()
			//printf("carveOutConnectedRooms() len(r.Exits): %d \n", len(r.Exits))
			
			for len(oc.Exits) < 1 {
				x, y, oc, orId = getRandomCarvedRoom()
			}
			
			// random (exit) id 
			var ri i32 = i32.rand(0, len(oc.Exits))
			var e /* exit */ i32 = oc.Exits[ri]
			var nr CarvedRoom // new room 

			str.print("___________________________________________________________")
			if e == geom.DIR_LEFT {
				makeConnection(x, y, x-1, y)
				nr = carveOutRoom(x-1, y, len(Carvs))
				removeExitFromGrid(x-1, y,   geom.DIR_RIGHT)
				removeExitFromGrid(x,   y,   e)
				nr.Exits          = append(
				nr.Exits,          geom.DIR_RIGHT)
				Carvs[orId].Exits = append(
				Carvs[orId].Exits, e)
				printf("-----------------------------DIR_LEFT+++++ - Carvs[orId].Exits: %d \n", len(Carvs[orId].Exits))
				printf("-----------------------------DIR_RIGHT++++ - nr.Exits: %d \n", len(nr.Exits))
				//printf("AFTER DIR_RIGHT moveExitFromGridCellToRoom() - len(OldCell.Exits): %d \n", len(oc.Exits))
			}else			
			if e == geom.DIR_RIGHT {
				makeConnection(x, y, x+1, y)
				nr = carveOutRoom(x+1, y, len(Carvs))
				removeExitFromGrid(x+1, y,   geom.DIR_LEFT)
				removeExitFromGrid(x,   y,   e)
				nr.Exits          = append(
				nr.Exits,          geom.DIR_LEFT)
				Carvs[orId].Exits = append(
				Carvs[orId].Exits, e)
				printf("-----------------------------DIR_RIGHT++++ - Carvs[orId].Exits: %d \n", len(Carvs[orId].Exits))
				printf("-----------------------------DIR_LEFT+++++ - nr.Exits: %d \n", len(nr.Exits))
				//printf("AFTER DIR_LEFT moveExitFromGridCellToRoom() - len(OldCell.Exits): %d \n", len(oc.Exits))
			}else			
			if e == geom.DIR_DOWN {
				makeConnection(x, y, x, y-1)
				nr = carveOutRoom(x, y-1, len(Carvs))
				removeExitFromGrid(x,   y-1, geom.DIR_UP)
				removeExitFromGrid(x,   y,   e)
				nr.Exits          = append(
				nr.Exits,          geom.DIR_UP)
				Carvs[orId].Exits = append(
				Carvs[orId].Exits, e)
				printf("-----------------------------DIR_DOWN++++ - Carvs[orId].Exits: %d \n", len(Carvs[orId].Exits))
				printf("-----------------------------DIR_UP++++++ - nr.Exits: %d \n", len(nr.Exits))
				//printf("AFTER DIR_UP moveExitFromGridCellToRoom() - len(OldCell.Exits): %d \n", len(oc.Exits))
			}else			
			if e == geom.DIR_UP {
				makeConnection(x, y, x, y+1)
				nr = carveOutRoom(x, y+1, len(Carvs))
				removeExitFromGrid(x,   y+1, geom.DIR_DOWN)
				removeExitFromGrid(x,   y,   e)
				nr.Exits          = append(
				nr.Exits,          geom.DIR_DOWN)
				Carvs[orId].Exits = append(
				Carvs[orId].Exits, e)
				printf("-----------------------------DIR_UP++++++ - Carvs[orId].Exits: %d \n", len(Carvs[orId].Exits))
				printf("-----------------------------DIR_DOWN++++ - nr.Exits: %d \n", len(nr.Exits))
				//printf("AFTER DIR_DOWN moveExitFromGridCellToRoom() - len(OldCell.Exits): %d \n", len(oc.Exits))
			}
	
			
			
			Carvs = append(
			Carvs, nr)
			printf("OLD room %d, %d   -   len(Carvs): %d \n", x, y, len(Carvs))
		}
	}
}


func carveOutRoom (x i32, y i32, carvedId i32) (out CarvedRoom) {
	out.Pos.X = x
	out.Pos.Y = y
	Cells[y][x].CarvedId = carvedId
}


// old x,y, new x,y 
func makeConnection (oX i32, oY i32, nX i32, nY i32) {
	if Cells[nY][nX].CarvedId == app.MAX_I32 {
		str.print("NEW CARVED ROOM")
	}else{
		str.print("JUST REMOVE WALL")
	}
	
	printf("OLD room %d, %d \n", oX, oY)
	
	printf("NEW room %d, %d \n", nX, nY)
}


func removeExitFromGrid (x i32, y i32, dir i32) {
	var log bool = false
	
	if log { 
		str.print("___________________________________________________________")
		printf("removeExitFromGrid(%d, %d, %s) \n", x, y, getTextForDir(dir))
	}
	
	var c Cell = Cells[y][x]
	// remove from Exits 
	
	if log { printf("------num exits INSIDE-BEFORE: %d \n", len(c.Exits))
	}

	var n i32 = len(c.Exits)
	for i := i32.sub(n, 1); i >= 0; i = i32.sub(i, 1) {
		var s str = getTextForDir(c.Exits[i])
		
		if c.Exits[i] == dir {
			s = str.concat(s, "  <----------------- REMOVING")
			c.Exits = remove(c.Exits, i)
		}
		
		if log { str.print(s)
		}
	}
	
	if log { printf("------num exits INSIDE-AFTER: %d \n", len(c.Exits))
	}
}


func getInversion (dir i32) (out i32) { // (opposite direction) 
	if dir == geom.DIR_LEFT {
		out = geom.DIR_RIGHT
	}else	
	if dir == geom.DIR_RIGHT {
		out = geom.DIR_LEFT
	}else	
	if dir == geom.DIR_DOWN {
		out = geom.DIR_UP
	}else	
	if dir == geom.DIR_UP {
		out = geom.DIR_DOWN
	}
}


func getTextForDir (dir i32) (out str) {
	if dir ==  geom.DIR_LEFT {
		out = "     DIR_LEFT"
	}else	
	if dir ==  geom.DIR_RIGHT {
		out = "     DIR_RIGHT"
	}else	
	if dir ==  geom.DIR_DOWN {
		out = "     DIR_DOWN"
	}else	
	if dir ==  geom.DIR_UP {
		out = "     DIR_UP"
	}
}
