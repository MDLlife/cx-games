package map

import "app"

// NOTE: I THINK OF THE Y DIMENSION INCREASING UPWARDS 
//       SO KEEP THIS IN MIND WITH DIRECTIONS AND THE "Rooms" GRID INDEXING 


var DIR_LEFT  i32 = 0
var DIR_RIGHT i32 = 1
var DIR_DOWN  i32 = 2
var DIR_UP    i32 = 3

var NumRoomsAcross i32 = 4
var RoomSpan f32 = 2.0 / i32.f32(NumRoomsAcross)
var Rooms [4][4]Room // FIXME: use constants when we can 
var locs  []Vec2     // used locations of the Rooms grid 

type Room struct {
	Blank  bool
	
	// insets (from room bounds) 
	/*Top    f32
	Right  f32
	Bottom f32
	Left   f32*/
	
	// exits/connections 
	Possibles []i32
}



func Init () {
	setupRooms()
	carveOutConnectedRooms()
}


func setupRooms () {
	for iY := 0; iY < NumRoomsAcross; iY++ {
	for iX := 0; iX < NumRoomsAcross; iX++ {
		var r Room
		r.Blank = true
		
		if iX > 0 {
			r.Possibles = append(
			r.Possibles, DIR_LEFT)
		}
		
		if iX < i32.sub(NumRoomsAcross, 1) {
			r.Possibles = append(
			r.Possibles, DIR_RIGHT)
		}
		
		if iY > 0 {
			r.Possibles = append(
			r.Possibles, DIR_DOWN)
		}
		
		if iY < i32.sub(NumRoomsAcross, 1) {
			r.Possibles = append(
			r.Possibles, DIR_UP)
		}
		
		Rooms[iY][iX] = r
		printf("setupRooms() len(r.Possibles): %d \n", len(r.Possibles))
		//var poss []i32 = Rooms[iY][iX].Possibles
		//printf("Rooms[iY][iX].Possibles: %d \n", len(poss))
	}
	}
}


func carveOutConnectedRooms () {
	var numBlanks i32 = i32.rand(1, 5)
	var n i32 = NumRoomsAcross * NumRoomsAcross - numBlanks
	
	for i := 0; i < n; i++ {
		var x i32
		var y i32
		
		if /* 1st room */ i == 0 {
			// make anywhere 
			x = i32.rand(0, NumRoomsAcross)
			y = i32.rand(0, NumRoomsAcross)
			makeRoom(x, y)
		}else{
			var loc i32 = i32.rand(0, len(locs))
			x = locs[loc].X
			y = locs[loc].Y
			var r Room = Rooms[y][x]
			//printf("carveOutConnectedRooms() len(r.Possibles): %d \n", len(r.Possibles))
			
			for len(r.Possibles) < 1 {
				loc = i32.rand(0, len(locs))
				x = locs[loc].X
				y = locs[loc].Y
				r = Rooms[y][x]
			}
			
			makeRoom(x, y)

			var ri i32 // random index 
			ri = i32.rand(0, len(r.Possibles))
			var exit i32 = r.Possibles[ri]

			if exit == DIR_LEFT {
				//removeExitFor(x,   y, DIR_LEFT)
				removeExitFor(x-1, y, DIR_RIGHT)
			}
			
			if exit == DIR_RIGHT {
				//removeExitFor(x,   y, DIR_RIGHT)
				removeExitFor(x+1, y, DIR_LEFT)
			}
			
			if exit == DIR_DOWN {
				//removeExitFor(x, y,   DIR_DOWN)
				removeExitFor(x, y-1, DIR_UP)
			}
			
			if exit == DIR_UP {
				//removeExitFor(x, y,   DIR_UP)
				removeExitFor(x, y+1, DIR_DOWN)
			}
		}
	}
}


func makeRoom (x i32, y i32) {
	printf("len(locs): %d \n", len(locs))
	var newLoc Vec2
	newLoc.X = x
	newLoc.Y = y
	locs = append(locs, newLoc)
	Rooms[y][x].Blank = false
	printf("len(locs): %d \n", len(locs))
	bool.print(Rooms[y][x].Blank)
	//printf("len(locs): %d \n", len(locs))
}


func removeExitFor (x i32, y i32, dir i32) {
	str.print("___________________________________________________________")
	var r Room = Rooms[y][x]
	var n i32 = len(r.Possibles)
	printf("@ %d,%d remove: %s \n", x, y, getTextForDir(dir))
		
	for i := i32.sub(n, 1); i >= 0; i = i32.sub(i, 1) {
		str.print(getTextForDir(r.Possibles[i]))
		
		if r.Possibles[i] == dir {
			str.print("***************************FOUND removable")
			r.Possibles = remove(r.Possibles, i)
		}
	}
	
	n = len(r.Possibles)
	printf("------num possibles: %d \n", n)
}


func getTextForDir (dir i32) (out str) {
	if dir ==  DIR_LEFT {
		out = "DIR_LEFT"
	}
	
	if dir ==  DIR_RIGHT {
		out = "DIR_RIGHT"
	}
	
	if dir ==  DIR_DOWN {
		out = "DIR_DOWN"
	}
	
	if dir ==  DIR_UP {
		out = "DIR_UP"
	}
}
