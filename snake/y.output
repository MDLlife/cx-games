state 0 //

    0 $accept: . lines
    1 lines: .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 1 (lines)
    ';'        reduce using rule 1 (lines)
    AFF        reduce using rule 1 (lines)
    DPROGRAM   reduce using rule 1 (lines)
    DSTACK     reduce using rule 1 (lines)
    DSTATE     reduce using rule 1 (lines)
    FUNC       reduce using rule 1 (lines)
    IMPORT     reduce using rule 1 (lines)
    PACKAGE    reduce using rule 1 (lines)
    REM        reduce using rule 1 (lines)
    SFUNC      reduce using rule 1 (lines)
    SPACKAGE   reduce using rule 1 (lines)
    SSTRUCT    reduce using rule 1 (lines)
    STEP       reduce using rule 1 (lines)
    TAG        reduce using rule 1 (lines)
    TSTEP      reduce using rule 1 (lines)
    TYPSTRUCT  reduce using rule 1 (lines)
    VAR        reduce using rule 1 (lines)

    lines  goto state 1

state 1 // [$end]

    0 $accept: lines .  [$end]
    2 lines: lines . line
    3 lines: lines . ';'

    $end       accept
    ';'        shift, and goto state 3
    AFF        shift, and goto state 16
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FUNC       shift, and goto state 29
    IMPORT     shift, and goto state 14
    PACKAGE    shift, and goto state 26
    REM        shift, and goto state 22
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    TYPSTRUCT  shift, and goto state 28
    VAR        shift, and goto state 27

    affordance             goto state 12
    debugging              goto state 11
    definitionDeclaration  goto state 4
    functionDeclaration    goto state 8
    importDeclaration      goto state 7
    line                   goto state 2
    packageDeclaration     goto state 6
    remover                goto state 13
    selector               goto state 9
    stepping               goto state 10
    structDeclaration      goto state 5

state 2 // DPROGRAM [$end]

    2 lines: lines line .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 2 (lines)
    ';'        reduce using rule 2 (lines)
    AFF        reduce using rule 2 (lines)
    DPROGRAM   reduce using rule 2 (lines)
    DSTACK     reduce using rule 2 (lines)
    DSTATE     reduce using rule 2 (lines)
    FUNC       reduce using rule 2 (lines)
    IMPORT     reduce using rule 2 (lines)
    PACKAGE    reduce using rule 2 (lines)
    RBRACE     reduce using rule 2 (lines)
    REM        reduce using rule 2 (lines)
    SFUNC      reduce using rule 2 (lines)
    SPACKAGE   reduce using rule 2 (lines)
    SSTRUCT    reduce using rule 2 (lines)
    STEP       reduce using rule 2 (lines)
    TAG        reduce using rule 2 (lines)
    TSTEP      reduce using rule 2 (lines)
    TYPSTRUCT  reduce using rule 2 (lines)
    VAR        reduce using rule 2 (lines)

state 3 // ';'

    3 lines: lines ';' .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 3 (lines)
    ';'        reduce using rule 3 (lines)
    AFF        reduce using rule 3 (lines)
    DPROGRAM   reduce using rule 3 (lines)
    DSTACK     reduce using rule 3 (lines)
    DSTATE     reduce using rule 3 (lines)
    FUNC       reduce using rule 3 (lines)
    IMPORT     reduce using rule 3 (lines)
    PACKAGE    reduce using rule 3 (lines)
    RBRACE     reduce using rule 3 (lines)
    REM        reduce using rule 3 (lines)
    SFUNC      reduce using rule 3 (lines)
    SPACKAGE   reduce using rule 3 (lines)
    SSTRUCT    reduce using rule 3 (lines)
    STEP       reduce using rule 3 (lines)
    TAG        reduce using rule 3 (lines)
    TSTEP      reduce using rule 3 (lines)
    TYPSTRUCT  reduce using rule 3 (lines)
    VAR        reduce using rule 3 (lines)

state 4 // VAR IDENT BASICTYPE [$end]

    4 line: definitionDeclaration .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 4 (line)
    ';'        reduce using rule 4 (line)
    AFF        reduce using rule 4 (line)
    DPROGRAM   reduce using rule 4 (line)
    DSTACK     reduce using rule 4 (line)
    DSTATE     reduce using rule 4 (line)
    FUNC       reduce using rule 4 (line)
    IMPORT     reduce using rule 4 (line)
    PACKAGE    reduce using rule 4 (line)
    RBRACE     reduce using rule 4 (line)
    REM        reduce using rule 4 (line)
    SFUNC      reduce using rule 4 (line)
    SPACKAGE   reduce using rule 4 (line)
    SSTRUCT    reduce using rule 4 (line)
    STEP       reduce using rule 4 (line)
    TAG        reduce using rule 4 (line)
    TSTEP      reduce using rule 4 (line)
    TYPSTRUCT  reduce using rule 4 (line)
    VAR        reduce using rule 4 (line)

state 5 // TYPSTRUCT IDENT STRUCT LBRACE RBRACE [$end]

    5 line: structDeclaration .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 5 (line)
    ';'        reduce using rule 5 (line)
    AFF        reduce using rule 5 (line)
    DPROGRAM   reduce using rule 5 (line)
    DSTACK     reduce using rule 5 (line)
    DSTATE     reduce using rule 5 (line)
    FUNC       reduce using rule 5 (line)
    IMPORT     reduce using rule 5 (line)
    PACKAGE    reduce using rule 5 (line)
    RBRACE     reduce using rule 5 (line)
    REM        reduce using rule 5 (line)
    SFUNC      reduce using rule 5 (line)
    SPACKAGE   reduce using rule 5 (line)
    SSTRUCT    reduce using rule 5 (line)
    STEP       reduce using rule 5 (line)
    TAG        reduce using rule 5 (line)
    TSTEP      reduce using rule 5 (line)
    TYPSTRUCT  reduce using rule 5 (line)
    VAR        reduce using rule 5 (line)

state 6 // PACKAGE IDENT [$end]

    6 line: packageDeclaration .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 6 (line)
    ';'        reduce using rule 6 (line)
    AFF        reduce using rule 6 (line)
    DPROGRAM   reduce using rule 6 (line)
    DSTACK     reduce using rule 6 (line)
    DSTATE     reduce using rule 6 (line)
    FUNC       reduce using rule 6 (line)
    IMPORT     reduce using rule 6 (line)
    PACKAGE    reduce using rule 6 (line)
    RBRACE     reduce using rule 6 (line)
    REM        reduce using rule 6 (line)
    SFUNC      reduce using rule 6 (line)
    SPACKAGE   reduce using rule 6 (line)
    SSTRUCT    reduce using rule 6 (line)
    STEP       reduce using rule 6 (line)
    TAG        reduce using rule 6 (line)
    TSTEP      reduce using rule 6 (line)
    TYPSTRUCT  reduce using rule 6 (line)
    VAR        reduce using rule 6 (line)

state 7 // IMPORT STRING [$end]

    7 line: importDeclaration .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 7 (line)
    ';'        reduce using rule 7 (line)
    AFF        reduce using rule 7 (line)
    DPROGRAM   reduce using rule 7 (line)
    DSTACK     reduce using rule 7 (line)
    DSTATE     reduce using rule 7 (line)
    FUNC       reduce using rule 7 (line)
    IMPORT     reduce using rule 7 (line)
    PACKAGE    reduce using rule 7 (line)
    RBRACE     reduce using rule 7 (line)
    REM        reduce using rule 7 (line)
    SFUNC      reduce using rule 7 (line)
    SPACKAGE   reduce using rule 7 (line)
    SSTRUCT    reduce using rule 7 (line)
    STEP       reduce using rule 7 (line)
    TAG        reduce using rule 7 (line)
    TSTEP      reduce using rule 7 (line)
    TYPSTRUCT  reduce using rule 7 (line)
    VAR        reduce using rule 7 (line)

state 8 // FUNC IDENT LPAREN RPAREN LBRACE RBRACE [$end]

    8 line: functionDeclaration .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 8 (line)
    ';'        reduce using rule 8 (line)
    AFF        reduce using rule 8 (line)
    DPROGRAM   reduce using rule 8 (line)
    DSTACK     reduce using rule 8 (line)
    DSTATE     reduce using rule 8 (line)
    FUNC       reduce using rule 8 (line)
    IMPORT     reduce using rule 8 (line)
    PACKAGE    reduce using rule 8 (line)
    RBRACE     reduce using rule 8 (line)
    REM        reduce using rule 8 (line)
    SFUNC      reduce using rule 8 (line)
    SPACKAGE   reduce using rule 8 (line)
    SSTRUCT    reduce using rule 8 (line)
    STEP       reduce using rule 8 (line)
    TAG        reduce using rule 8 (line)
    TSTEP      reduce using rule 8 (line)
    TYPSTRUCT  reduce using rule 8 (line)
    VAR        reduce using rule 8 (line)

state 9 // SFUNC IDENT [$end]

    9 line: selector .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 9 (line)
    ';'        reduce using rule 9 (line)
    AFF        reduce using rule 9 (line)
    DPROGRAM   reduce using rule 9 (line)
    DSTACK     reduce using rule 9 (line)
    DSTATE     reduce using rule 9 (line)
    FUNC       reduce using rule 9 (line)
    IMPORT     reduce using rule 9 (line)
    PACKAGE    reduce using rule 9 (line)
    RBRACE     reduce using rule 9 (line)
    REM        reduce using rule 9 (line)
    SFUNC      reduce using rule 9 (line)
    SPACKAGE   reduce using rule 9 (line)
    SSTRUCT    reduce using rule 9 (line)
    STEP       reduce using rule 9 (line)
    TAG        reduce using rule 9 (line)
    TSTEP      reduce using rule 9 (line)
    TYPSTRUCT  reduce using rule 9 (line)
    VAR        reduce using rule 9 (line)

state 10 // STEP INT [$end]

   10 line: stepping .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 10 (line)
    ';'        reduce using rule 10 (line)
    AFF        reduce using rule 10 (line)
    DPROGRAM   reduce using rule 10 (line)
    DSTACK     reduce using rule 10 (line)
    DSTATE     reduce using rule 10 (line)
    FUNC       reduce using rule 10 (line)
    IMPORT     reduce using rule 10 (line)
    PACKAGE    reduce using rule 10 (line)
    RBRACE     reduce using rule 10 (line)
    REM        reduce using rule 10 (line)
    SFUNC      reduce using rule 10 (line)
    SPACKAGE   reduce using rule 10 (line)
    SSTRUCT    reduce using rule 10 (line)
    STEP       reduce using rule 10 (line)
    TAG        reduce using rule 10 (line)
    TSTEP      reduce using rule 10 (line)
    TYPSTRUCT  reduce using rule 10 (line)
    VAR        reduce using rule 10 (line)

state 11 // DPROGRAM [$end]

   11 line: debugging .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 11 (line)
    ';'        reduce using rule 11 (line)
    AFF        reduce using rule 11 (line)
    DPROGRAM   reduce using rule 11 (line)
    DSTACK     reduce using rule 11 (line)
    DSTATE     reduce using rule 11 (line)
    FUNC       reduce using rule 11 (line)
    IMPORT     reduce using rule 11 (line)
    PACKAGE    reduce using rule 11 (line)
    RBRACE     reduce using rule 11 (line)
    REM        reduce using rule 11 (line)
    SFUNC      reduce using rule 11 (line)
    SPACKAGE   reduce using rule 11 (line)
    SSTRUCT    reduce using rule 11 (line)
    STEP       reduce using rule 11 (line)
    TAG        reduce using rule 11 (line)
    TSTEP      reduce using rule 11 (line)
    TYPSTRUCT  reduce using rule 11 (line)
    VAR        reduce using rule 11 (line)

state 12 // TAG [$end]

   12 line: affordance .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 12 (line)
    ';'        reduce using rule 12 (line)
    AFF        reduce using rule 12 (line)
    DPROGRAM   reduce using rule 12 (line)
    DSTACK     reduce using rule 12 (line)
    DSTATE     reduce using rule 12 (line)
    FUNC       reduce using rule 12 (line)
    IMPORT     reduce using rule 12 (line)
    PACKAGE    reduce using rule 12 (line)
    RBRACE     reduce using rule 12 (line)
    REM        reduce using rule 12 (line)
    SFUNC      reduce using rule 12 (line)
    SPACKAGE   reduce using rule 12 (line)
    SSTRUCT    reduce using rule 12 (line)
    STEP       reduce using rule 12 (line)
    TAG        reduce using rule 12 (line)
    TSTEP      reduce using rule 12 (line)
    TYPSTRUCT  reduce using rule 12 (line)
    VAR        reduce using rule 12 (line)

state 13 // REM DEF IDENT [$end]

   13 line: remover .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 13 (line)
    ';'        reduce using rule 13 (line)
    AFF        reduce using rule 13 (line)
    DPROGRAM   reduce using rule 13 (line)
    DSTACK     reduce using rule 13 (line)
    DSTATE     reduce using rule 13 (line)
    FUNC       reduce using rule 13 (line)
    IMPORT     reduce using rule 13 (line)
    PACKAGE    reduce using rule 13 (line)
    RBRACE     reduce using rule 13 (line)
    REM        reduce using rule 13 (line)
    SFUNC      reduce using rule 13 (line)
    SPACKAGE   reduce using rule 13 (line)
    SSTRUCT    reduce using rule 13 (line)
    STEP       reduce using rule 13 (line)
    TAG        reduce using rule 13 (line)
    TSTEP      reduce using rule 13 (line)
    TYPSTRUCT  reduce using rule 13 (line)
    VAR        reduce using rule 13 (line)

state 14 // IMPORT

   14 importDeclaration: IMPORT . STRING

    STRING  shift, and goto state 482

state 15 // TAG

   15 affordance: TAG .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 15 (affordance)
    ';'        reduce using rule 15 (affordance)
    ADDR       reduce using rule 15 (affordance)
    AFF        reduce using rule 15 (affordance)
    BASICTYPE  reduce using rule 15 (affordance)
    BOOLEAN    reduce using rule 15 (affordance)
    BYTENUM    reduce using rule 15 (affordance)
    DOUBLE     reduce using rule 15 (affordance)
    DPROGRAM   reduce using rule 15 (affordance)
    DSTACK     reduce using rule 15 (affordance)
    DSTATE     reduce using rule 15 (affordance)
    FLOAT      reduce using rule 15 (affordance)
    FOR        reduce using rule 15 (affordance)
    FUNC       reduce using rule 15 (affordance)
    GOTO       reduce using rule 15 (affordance)
    IDENT      reduce using rule 15 (affordance)
    IF         reduce using rule 15 (affordance)
    IMPORT     reduce using rule 15 (affordance)
    INFER      reduce using rule 15 (affordance)
    INT        reduce using rule 15 (affordance)
    LONG       reduce using rule 15 (affordance)
    LPAREN     reduce using rule 15 (affordance)
    NEW        reduce using rule 15 (affordance)
    NOT        reduce using rule 15 (affordance)
    PACKAGE    reduce using rule 15 (affordance)
    RBRACE     reduce using rule 15 (affordance)
    REM        reduce using rule 15 (affordance)
    RETURN     reduce using rule 15 (affordance)
    SFUNC      reduce using rule 15 (affordance)
    SPACKAGE   reduce using rule 15 (affordance)
    SSTRUCT    reduce using rule 15 (affordance)
    STEP       reduce using rule 15 (affordance)
    STRING     reduce using rule 15 (affordance)
    TAG        reduce using rule 15 (affordance)
    TSTEP      reduce using rule 15 (affordance)
    TYPSTRUCT  reduce using rule 15 (affordance)
    VALUE      reduce using rule 15 (affordance)
    VAR        reduce using rule 15 (affordance)

state 16 // AFF

   16 affordance: AFF . FUNC IDENT  // assoc %right, prec 15
   17 affordance: AFF . FUNC IDENT LBRACE INT RBRACE
   18 affordance: AFF . FUNC IDENT LBRACE STRING RBRACE
   19 affordance: AFF . FUNC IDENT LBRACE STRING INT RBRACE
   20 affordance: AFF . PACKAGE IDENT  // assoc %right, prec 15
   21 affordance: AFF . PACKAGE IDENT LBRACE INT RBRACE
   22 affordance: AFF . PACKAGE IDENT LBRACE STRING RBRACE
   23 affordance: AFF . PACKAGE IDENT LBRACE STRING INT RBRACE
   24 affordance: AFF . STRUCT IDENT  // assoc %right, prec 15
   25 affordance: AFF . STRUCT IDENT LBRACE INT RBRACE
   26 affordance: AFF . STRUCT IDENT LBRACE STRING RBRACE
   27 affordance: AFF . STRUCT IDENT LBRACE STRING INT RBRACE
   28 affordance: AFF . EXPR IDENT  // assoc %right, prec 15
   29 affordance: AFF . EXPR IDENT LBRACE INT RBRACE
   30 affordance: AFF . EXPR IDENT LBRACE STRING RBRACE
   31 affordance: AFF . EXPR IDENT LBRACE STRING INT RBRACE

    EXPR     shift, and goto state 449
    FUNC     shift, and goto state 446
    PACKAGE  shift, and goto state 447
    STRUCT   shift, and goto state 448

state 17 // TSTEP

   32 stepping: TSTEP . INT INT

    INT  shift, and goto state 444

state 18 // STEP

   33 stepping: STEP . INT

    INT  shift, and goto state 443

state 19 // DSTATE

   34 debugging: DSTATE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 34 (debugging)
    ';'        reduce using rule 34 (debugging)
    ADDR       reduce using rule 34 (debugging)
    AFF        reduce using rule 34 (debugging)
    BASICTYPE  reduce using rule 34 (debugging)
    BOOLEAN    reduce using rule 34 (debugging)
    BYTENUM    reduce using rule 34 (debugging)
    DOUBLE     reduce using rule 34 (debugging)
    DPROGRAM   reduce using rule 34 (debugging)
    DSTACK     reduce using rule 34 (debugging)
    DSTATE     reduce using rule 34 (debugging)
    FLOAT      reduce using rule 34 (debugging)
    FOR        reduce using rule 34 (debugging)
    FUNC       reduce using rule 34 (debugging)
    GOTO       reduce using rule 34 (debugging)
    IDENT      reduce using rule 34 (debugging)
    IF         reduce using rule 34 (debugging)
    IMPORT     reduce using rule 34 (debugging)
    INFER      reduce using rule 34 (debugging)
    INT        reduce using rule 34 (debugging)
    LONG       reduce using rule 34 (debugging)
    LPAREN     reduce using rule 34 (debugging)
    NEW        reduce using rule 34 (debugging)
    NOT        reduce using rule 34 (debugging)
    PACKAGE    reduce using rule 34 (debugging)
    RBRACE     reduce using rule 34 (debugging)
    REM        reduce using rule 34 (debugging)
    RETURN     reduce using rule 34 (debugging)
    SFUNC      reduce using rule 34 (debugging)
    SPACKAGE   reduce using rule 34 (debugging)
    SSTRUCT    reduce using rule 34 (debugging)
    STEP       reduce using rule 34 (debugging)
    STRING     reduce using rule 34 (debugging)
    TAG        reduce using rule 34 (debugging)
    TSTEP      reduce using rule 34 (debugging)
    TYPSTRUCT  reduce using rule 34 (debugging)
    VALUE      reduce using rule 34 (debugging)
    VAR        reduce using rule 34 (debugging)

state 20 // DSTACK

   35 debugging: DSTACK .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 35 (debugging)
    ';'        reduce using rule 35 (debugging)
    ADDR       reduce using rule 35 (debugging)
    AFF        reduce using rule 35 (debugging)
    BASICTYPE  reduce using rule 35 (debugging)
    BOOLEAN    reduce using rule 35 (debugging)
    BYTENUM    reduce using rule 35 (debugging)
    DOUBLE     reduce using rule 35 (debugging)
    DPROGRAM   reduce using rule 35 (debugging)
    DSTACK     reduce using rule 35 (debugging)
    DSTATE     reduce using rule 35 (debugging)
    FLOAT      reduce using rule 35 (debugging)
    FOR        reduce using rule 35 (debugging)
    FUNC       reduce using rule 35 (debugging)
    GOTO       reduce using rule 35 (debugging)
    IDENT      reduce using rule 35 (debugging)
    IF         reduce using rule 35 (debugging)
    IMPORT     reduce using rule 35 (debugging)
    INFER      reduce using rule 35 (debugging)
    INT        reduce using rule 35 (debugging)
    LONG       reduce using rule 35 (debugging)
    LPAREN     reduce using rule 35 (debugging)
    NEW        reduce using rule 35 (debugging)
    NOT        reduce using rule 35 (debugging)
    PACKAGE    reduce using rule 35 (debugging)
    RBRACE     reduce using rule 35 (debugging)
    REM        reduce using rule 35 (debugging)
    RETURN     reduce using rule 35 (debugging)
    SFUNC      reduce using rule 35 (debugging)
    SPACKAGE   reduce using rule 35 (debugging)
    SSTRUCT    reduce using rule 35 (debugging)
    STEP       reduce using rule 35 (debugging)
    STRING     reduce using rule 35 (debugging)
    TAG        reduce using rule 35 (debugging)
    TSTEP      reduce using rule 35 (debugging)
    TYPSTRUCT  reduce using rule 35 (debugging)
    VALUE      reduce using rule 35 (debugging)
    VAR        reduce using rule 35 (debugging)

state 21 // DPROGRAM

   36 debugging: DPROGRAM .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 36 (debugging)
    ';'        reduce using rule 36 (debugging)
    ADDR       reduce using rule 36 (debugging)
    AFF        reduce using rule 36 (debugging)
    BASICTYPE  reduce using rule 36 (debugging)
    BOOLEAN    reduce using rule 36 (debugging)
    BYTENUM    reduce using rule 36 (debugging)
    DOUBLE     reduce using rule 36 (debugging)
    DPROGRAM   reduce using rule 36 (debugging)
    DSTACK     reduce using rule 36 (debugging)
    DSTATE     reduce using rule 36 (debugging)
    FLOAT      reduce using rule 36 (debugging)
    FOR        reduce using rule 36 (debugging)
    FUNC       reduce using rule 36 (debugging)
    GOTO       reduce using rule 36 (debugging)
    IDENT      reduce using rule 36 (debugging)
    IF         reduce using rule 36 (debugging)
    IMPORT     reduce using rule 36 (debugging)
    INFER      reduce using rule 36 (debugging)
    INT        reduce using rule 36 (debugging)
    LONG       reduce using rule 36 (debugging)
    LPAREN     reduce using rule 36 (debugging)
    NEW        reduce using rule 36 (debugging)
    NOT        reduce using rule 36 (debugging)
    PACKAGE    reduce using rule 36 (debugging)
    RBRACE     reduce using rule 36 (debugging)
    REM        reduce using rule 36 (debugging)
    RETURN     reduce using rule 36 (debugging)
    SFUNC      reduce using rule 36 (debugging)
    SPACKAGE   reduce using rule 36 (debugging)
    SSTRUCT    reduce using rule 36 (debugging)
    STEP       reduce using rule 36 (debugging)
    STRING     reduce using rule 36 (debugging)
    TAG        reduce using rule 36 (debugging)
    TSTEP      reduce using rule 36 (debugging)
    TYPSTRUCT  reduce using rule 36 (debugging)
    VALUE      reduce using rule 36 (debugging)
    VAR        reduce using rule 36 (debugging)

state 22 // REM

   37 remover: REM . FUNC IDENT  // assoc %right, prec 15
   38 remover: REM . PACKAGE IDENT  // assoc %right, prec 15
   39 remover: REM . DEF IDENT  // assoc %right, prec 15
   40 remover: REM . STRUCT IDENT  // assoc %right, prec 15
   41 remover: REM . IMPORT STRING
   42 remover: REM . EXPR IDENT FUNC IDENT  // assoc %right, prec 15
   43 remover: REM . FIELD IDENT STRUCT IDENT  // assoc %right, prec 15
   44 remover: REM . INPUT IDENT FUNC IDENT  // assoc %right, prec 15
   45 remover: REM . OUTPUT IDENT FUNC IDENT  // assoc %right, prec 15

    DEF      shift, and goto state 419
    EXPR     shift, and goto state 422
    FIELD    shift, and goto state 423
    FUNC     shift, and goto state 417
    IMPORT   shift, and goto state 421
    INPUT    shift, and goto state 424
    OUTPUT   shift, and goto state 425
    PACKAGE  shift, and goto state 418
    STRUCT   shift, and goto state 420

state 23 // SPACKAGE

   52 selector: SPACKAGE . IDENT selectorLines  // assoc %right, prec 15

    IDENT  shift, and goto state 412

state 24 // SFUNC

   53 selector: SFUNC . IDENT selectorExpressionsAndStatements  // assoc %right, prec 15

    IDENT  shift, and goto state 407

state 25 // SSTRUCT

   54 selector: SSTRUCT . IDENT selectorFields  // assoc %right, prec 15

    IDENT  shift, and goto state 402

state 26 // PACKAGE

   68 packageDeclaration: PACKAGE . IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 401

state 27 // VAR

   73 definitionDeclaration: VAR . IDENT BASICTYPE definitionAssignment
   74 definitionDeclaration: VAR . IDENT IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 397

state 28 // TYPSTRUCT

   84 structDeclaration: TYPSTRUCT . IDENT $@1 STRUCT structFields

    IDENT  shift, and goto state 383

state 29 // FUNC

   87 functionDeclaration: FUNC . functionParameters IDENT functionParameters functionParameters functionStatements  // assoc %right, prec 15
   88 functionDeclaration: FUNC . functionParameters IDENT functionParameters functionStatements  // assoc %right, prec 15
   89 functionDeclaration: FUNC . IDENT functionParameters functionStatements  // assoc %right, prec 15
   90 functionDeclaration: FUNC . IDENT functionParameters functionParameters functionStatements  // assoc %right, prec 15

    IDENT   shift, and goto state 32
    LPAREN  shift, and goto state 30

    functionParameters  goto state 31

state 30 // FUNC LPAREN

   85 functionParameters: LPAREN . parameters RPAREN
   86 functionParameters: LPAREN . RPAREN

    IDENT   shift, and goto state 374
    RPAREN  shift, and goto state 373

    parameter   goto state 375
    parameters  goto state 372

state 31 // FUNC LPAREN RPAREN [IDENT]

   87 functionDeclaration: FUNC functionParameters . IDENT functionParameters functionParameters functionStatements  // assoc %right, prec 15
   88 functionDeclaration: FUNC functionParameters . IDENT functionParameters functionStatements  // assoc %right, prec 15

    IDENT  shift, and goto state 367

state 32 // FUNC IDENT

   89 functionDeclaration: FUNC IDENT . functionParameters functionStatements  // assoc %right, prec 15
   90 functionDeclaration: FUNC IDENT . functionParameters functionParameters functionStatements  // assoc %right, prec 15

    LPAREN  shift, and goto state 30

    functionParameters  goto state 33

state 33 // FUNC IDENT LPAREN RPAREN [LBRACE]

   89 functionDeclaration: FUNC IDENT functionParameters . functionStatements  // assoc %right, prec 15
   90 functionDeclaration: FUNC IDENT functionParameters . functionParameters functionStatements  // assoc %right, prec 15

    LBRACE  shift, and goto state 36
    LPAREN  shift, and goto state 30

    functionParameters  goto state 35
    functionStatements  goto state 34

state 34 // FUNC IDENT LPAREN RPAREN LBRACE RBRACE [$end]

   89 functionDeclaration: FUNC IDENT functionParameters functionStatements .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]  // assoc %right, prec 15

    $end       reduce using rule 89 (functionDeclaration)
    ';'        reduce using rule 89 (functionDeclaration)
    AFF        reduce using rule 89 (functionDeclaration)
    DPROGRAM   reduce using rule 89 (functionDeclaration)
    DSTACK     reduce using rule 89 (functionDeclaration)
    DSTATE     reduce using rule 89 (functionDeclaration)
    FUNC       reduce using rule 89 (functionDeclaration)
    IMPORT     reduce using rule 89 (functionDeclaration)
    PACKAGE    reduce using rule 89 (functionDeclaration)
    RBRACE     reduce using rule 89 (functionDeclaration)
    REM        reduce using rule 89 (functionDeclaration)
    SFUNC      reduce using rule 89 (functionDeclaration)
    SPACKAGE   reduce using rule 89 (functionDeclaration)
    SSTRUCT    reduce using rule 89 (functionDeclaration)
    STEP       reduce using rule 89 (functionDeclaration)
    TAG        reduce using rule 89 (functionDeclaration)
    TSTEP      reduce using rule 89 (functionDeclaration)
    TYPSTRUCT  reduce using rule 89 (functionDeclaration)
    VAR        reduce using rule 89 (functionDeclaration)

state 35 // FUNC IDENT LPAREN RPAREN LPAREN RPAREN [LBRACE]

   90 functionDeclaration: FUNC IDENT functionParameters functionParameters . functionStatements  // assoc %right, prec 15

    LBRACE  shift, and goto state 36

    functionStatements  goto state 366

state 36 // FUNC IDENT LPAREN RPAREN LBRACE

   96 functionStatements: LBRACE . expressionsAndStatements RBRACE
   97 functionStatements: LBRACE . RBRACE

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    RBRACE     shift, and goto state 38
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance                goto state 45
    argument                  goto state 50
    argumentsList             goto state 48
    assignExpression          goto state 40
    beginFor                  goto state 55
    debugging                 goto state 44
    expressionsAndStatements  goto state 37
    nonAssignExpression       goto state 39
    remover                   goto state 46
    selector                  goto state 42
    statement                 goto state 41
    stepping                  goto state 43

state 37 // FUNC IDENT LPAREN RPAREN LBRACE ';' [';']

   96 functionStatements: LBRACE expressionsAndStatements . RBRACE
  106 expressionsAndStatements: expressionsAndStatements . nonAssignExpression
  107 expressionsAndStatements: expressionsAndStatements . assignExpression
  108 expressionsAndStatements: expressionsAndStatements . statement
  109 expressionsAndStatements: expressionsAndStatements . selector
  110 expressionsAndStatements: expressionsAndStatements . stepping
  111 expressionsAndStatements: expressionsAndStatements . debugging
  112 expressionsAndStatements: expressionsAndStatements . affordance
  113 expressionsAndStatements: expressionsAndStatements . remover

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    RBRACE     shift, and goto state 365
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance           goto state 314
    argument             goto state 50
    argumentsList        goto state 48
    assignExpression     goto state 309
    beginFor             goto state 55
    debugging            goto state 313
    nonAssignExpression  goto state 308
    remover              goto state 315
    selector             goto state 311
    statement            goto state 310
    stepping             goto state 312

state 38 // FUNC IDENT LPAREN RPAREN LBRACE RBRACE

   97 functionStatements: LBRACE RBRACE .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 97 (functionStatements)
    ';'        reduce using rule 97 (functionStatements)
    AFF        reduce using rule 97 (functionStatements)
    DPROGRAM   reduce using rule 97 (functionStatements)
    DSTACK     reduce using rule 97 (functionStatements)
    DSTATE     reduce using rule 97 (functionStatements)
    FUNC       reduce using rule 97 (functionStatements)
    IMPORT     reduce using rule 97 (functionStatements)
    PACKAGE    reduce using rule 97 (functionStatements)
    RBRACE     reduce using rule 97 (functionStatements)
    REM        reduce using rule 97 (functionStatements)
    SFUNC      reduce using rule 97 (functionStatements)
    SPACKAGE   reduce using rule 97 (functionStatements)
    SSTRUCT    reduce using rule 97 (functionStatements)
    STEP       reduce using rule 97 (functionStatements)
    TAG        reduce using rule 97 (functionStatements)
    TSTEP      reduce using rule 97 (functionStatements)
    TYPSTRUCT  reduce using rule 97 (functionStatements)
    VAR        reduce using rule 97 (functionStatements)

state 39 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS [';']

   98 expressionsAndStatements: nonAssignExpression .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]
  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3
  281 argumentsList: nonAssignExpression .  [ASSIGN, BITANDEQ, BITOREQ, BITXOREQ, CASSIGN, COMMA, DIVEQ, EXPEQ, LEFTSHIFTEQ, MINUSEQ, MULTEQ, PLUSEQ, REMAINDEREQ, RIGHTSHIFTEQ]

    ';'           reduce using rule 98 (expressionsAndStatements)
    ADDR          reduce using rule 98 (expressionsAndStatements)
    AFF           reduce using rule 98 (expressionsAndStatements)
    AND           shift, and goto state 88
    ASSIGN        reduce using rule 281 (argumentsList)
    BASICTYPE     reduce using rule 98 (expressionsAndStatements)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 281 (argumentsList)
    BITCLEAR      shift, and goto state 92
    BITOR         shift, and goto state 90
    BITOREQ       reduce using rule 281 (argumentsList)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 281 (argumentsList)
    BOOLEAN       reduce using rule 98 (expressionsAndStatements)
    BYTENUM       reduce using rule 98 (expressionsAndStatements)
    CASSIGN       reduce using rule 281 (argumentsList)
    COMMA         reduce using rule 281 (argumentsList)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 281 (argumentsList)
    DOUBLE        reduce using rule 98 (expressionsAndStatements)
    DPROGRAM      reduce using rule 98 (expressionsAndStatements)
    DSTACK        reduce using rule 98 (expressionsAndStatements)
    DSTATE        reduce using rule 98 (expressionsAndStatements)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 281 (argumentsList)
    FLOAT         reduce using rule 98 (expressionsAndStatements)
    FOR           reduce using rule 98 (expressionsAndStatements)
    GOTO          reduce using rule 98 (expressionsAndStatements)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 98 (expressionsAndStatements)
    IF            reduce using rule 98 (expressionsAndStatements)
    INFER         reduce using rule 98 (expressionsAndStatements)
    INT           reduce using rule 98 (expressionsAndStatements)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 281 (argumentsList)
    LONG          reduce using rule 98 (expressionsAndStatements)
    LPAREN        reduce using rule 98 (expressionsAndStatements)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 281 (argumentsList)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 281 (argumentsList)
    NEW           reduce using rule 98 (expressionsAndStatements)
    NOT           reduce using rule 98 (expressionsAndStatements)
    OR            shift, and goto state 87
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 281 (argumentsList)
    RBRACE        reduce using rule 98 (expressionsAndStatements)
    REM           reduce using rule 98 (expressionsAndStatements)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 281 (argumentsList)
    RETURN        reduce using rule 98 (expressionsAndStatements)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 281 (argumentsList)
    SFUNC         reduce using rule 98 (expressionsAndStatements)
    SPACKAGE      reduce using rule 98 (expressionsAndStatements)
    SSTRUCT       reduce using rule 98 (expressionsAndStatements)
    STEP          reduce using rule 98 (expressionsAndStatements)
    STRING        reduce using rule 98 (expressionsAndStatements)
    TAG           reduce using rule 98 (expressionsAndStatements)
    TSTEP         reduce using rule 98 (expressionsAndStatements)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 98 (expressionsAndStatements)
    VAR           reduce using rule 98 (expressionsAndStatements)

state 40 // SFUNC IDENT LBRACE BOOLEAN ASSIGN BOOLEAN [';']

   99 expressionsAndStatements: assignExpression .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 99 (expressionsAndStatements)
    ADDR       reduce using rule 99 (expressionsAndStatements)
    AFF        reduce using rule 99 (expressionsAndStatements)
    BASICTYPE  reduce using rule 99 (expressionsAndStatements)
    BOOLEAN    reduce using rule 99 (expressionsAndStatements)
    BYTENUM    reduce using rule 99 (expressionsAndStatements)
    DOUBLE     reduce using rule 99 (expressionsAndStatements)
    DPROGRAM   reduce using rule 99 (expressionsAndStatements)
    DSTACK     reduce using rule 99 (expressionsAndStatements)
    DSTATE     reduce using rule 99 (expressionsAndStatements)
    FLOAT      reduce using rule 99 (expressionsAndStatements)
    FOR        reduce using rule 99 (expressionsAndStatements)
    GOTO       reduce using rule 99 (expressionsAndStatements)
    IDENT      reduce using rule 99 (expressionsAndStatements)
    IF         reduce using rule 99 (expressionsAndStatements)
    INFER      reduce using rule 99 (expressionsAndStatements)
    INT        reduce using rule 99 (expressionsAndStatements)
    LONG       reduce using rule 99 (expressionsAndStatements)
    LPAREN     reduce using rule 99 (expressionsAndStatements)
    NEW        reduce using rule 99 (expressionsAndStatements)
    NOT        reduce using rule 99 (expressionsAndStatements)
    RBRACE     reduce using rule 99 (expressionsAndStatements)
    REM        reduce using rule 99 (expressionsAndStatements)
    RETURN     reduce using rule 99 (expressionsAndStatements)
    SFUNC      reduce using rule 99 (expressionsAndStatements)
    SPACKAGE   reduce using rule 99 (expressionsAndStatements)
    SSTRUCT    reduce using rule 99 (expressionsAndStatements)
    STEP       reduce using rule 99 (expressionsAndStatements)
    STRING     reduce using rule 99 (expressionsAndStatements)
    TAG        reduce using rule 99 (expressionsAndStatements)
    TSTEP      reduce using rule 99 (expressionsAndStatements)
    VALUE      reduce using rule 99 (expressionsAndStatements)
    VAR        reduce using rule 99 (expressionsAndStatements)

state 41 // SFUNC IDENT LBRACE ';' [';']

  100 expressionsAndStatements: statement .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 100 (expressionsAndStatements)
    ADDR       reduce using rule 100 (expressionsAndStatements)
    AFF        reduce using rule 100 (expressionsAndStatements)
    BASICTYPE  reduce using rule 100 (expressionsAndStatements)
    BOOLEAN    reduce using rule 100 (expressionsAndStatements)
    BYTENUM    reduce using rule 100 (expressionsAndStatements)
    DOUBLE     reduce using rule 100 (expressionsAndStatements)
    DPROGRAM   reduce using rule 100 (expressionsAndStatements)
    DSTACK     reduce using rule 100 (expressionsAndStatements)
    DSTATE     reduce using rule 100 (expressionsAndStatements)
    FLOAT      reduce using rule 100 (expressionsAndStatements)
    FOR        reduce using rule 100 (expressionsAndStatements)
    GOTO       reduce using rule 100 (expressionsAndStatements)
    IDENT      reduce using rule 100 (expressionsAndStatements)
    IF         reduce using rule 100 (expressionsAndStatements)
    INFER      reduce using rule 100 (expressionsAndStatements)
    INT        reduce using rule 100 (expressionsAndStatements)
    LONG       reduce using rule 100 (expressionsAndStatements)
    LPAREN     reduce using rule 100 (expressionsAndStatements)
    NEW        reduce using rule 100 (expressionsAndStatements)
    NOT        reduce using rule 100 (expressionsAndStatements)
    RBRACE     reduce using rule 100 (expressionsAndStatements)
    REM        reduce using rule 100 (expressionsAndStatements)
    RETURN     reduce using rule 100 (expressionsAndStatements)
    SFUNC      reduce using rule 100 (expressionsAndStatements)
    SPACKAGE   reduce using rule 100 (expressionsAndStatements)
    SSTRUCT    reduce using rule 100 (expressionsAndStatements)
    STEP       reduce using rule 100 (expressionsAndStatements)
    STRING     reduce using rule 100 (expressionsAndStatements)
    TAG        reduce using rule 100 (expressionsAndStatements)
    TSTEP      reduce using rule 100 (expressionsAndStatements)
    VALUE      reduce using rule 100 (expressionsAndStatements)
    VAR        reduce using rule 100 (expressionsAndStatements)

state 42 // SFUNC IDENT LBRACE SFUNC IDENT [';']

  101 expressionsAndStatements: selector .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 101 (expressionsAndStatements)
    ADDR       reduce using rule 101 (expressionsAndStatements)
    AFF        reduce using rule 101 (expressionsAndStatements)
    BASICTYPE  reduce using rule 101 (expressionsAndStatements)
    BOOLEAN    reduce using rule 101 (expressionsAndStatements)
    BYTENUM    reduce using rule 101 (expressionsAndStatements)
    DOUBLE     reduce using rule 101 (expressionsAndStatements)
    DPROGRAM   reduce using rule 101 (expressionsAndStatements)
    DSTACK     reduce using rule 101 (expressionsAndStatements)
    DSTATE     reduce using rule 101 (expressionsAndStatements)
    FLOAT      reduce using rule 101 (expressionsAndStatements)
    FOR        reduce using rule 101 (expressionsAndStatements)
    GOTO       reduce using rule 101 (expressionsAndStatements)
    IDENT      reduce using rule 101 (expressionsAndStatements)
    IF         reduce using rule 101 (expressionsAndStatements)
    INFER      reduce using rule 101 (expressionsAndStatements)
    INT        reduce using rule 101 (expressionsAndStatements)
    LONG       reduce using rule 101 (expressionsAndStatements)
    LPAREN     reduce using rule 101 (expressionsAndStatements)
    NEW        reduce using rule 101 (expressionsAndStatements)
    NOT        reduce using rule 101 (expressionsAndStatements)
    RBRACE     reduce using rule 101 (expressionsAndStatements)
    REM        reduce using rule 101 (expressionsAndStatements)
    RETURN     reduce using rule 101 (expressionsAndStatements)
    SFUNC      reduce using rule 101 (expressionsAndStatements)
    SPACKAGE   reduce using rule 101 (expressionsAndStatements)
    SSTRUCT    reduce using rule 101 (expressionsAndStatements)
    STEP       reduce using rule 101 (expressionsAndStatements)
    STRING     reduce using rule 101 (expressionsAndStatements)
    TAG        reduce using rule 101 (expressionsAndStatements)
    TSTEP      reduce using rule 101 (expressionsAndStatements)
    VALUE      reduce using rule 101 (expressionsAndStatements)
    VAR        reduce using rule 101 (expressionsAndStatements)

state 43 // SFUNC IDENT LBRACE STEP INT [';']

  102 expressionsAndStatements: stepping .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 102 (expressionsAndStatements)
    ADDR       reduce using rule 102 (expressionsAndStatements)
    AFF        reduce using rule 102 (expressionsAndStatements)
    BASICTYPE  reduce using rule 102 (expressionsAndStatements)
    BOOLEAN    reduce using rule 102 (expressionsAndStatements)
    BYTENUM    reduce using rule 102 (expressionsAndStatements)
    DOUBLE     reduce using rule 102 (expressionsAndStatements)
    DPROGRAM   reduce using rule 102 (expressionsAndStatements)
    DSTACK     reduce using rule 102 (expressionsAndStatements)
    DSTATE     reduce using rule 102 (expressionsAndStatements)
    FLOAT      reduce using rule 102 (expressionsAndStatements)
    FOR        reduce using rule 102 (expressionsAndStatements)
    GOTO       reduce using rule 102 (expressionsAndStatements)
    IDENT      reduce using rule 102 (expressionsAndStatements)
    IF         reduce using rule 102 (expressionsAndStatements)
    INFER      reduce using rule 102 (expressionsAndStatements)
    INT        reduce using rule 102 (expressionsAndStatements)
    LONG       reduce using rule 102 (expressionsAndStatements)
    LPAREN     reduce using rule 102 (expressionsAndStatements)
    NEW        reduce using rule 102 (expressionsAndStatements)
    NOT        reduce using rule 102 (expressionsAndStatements)
    RBRACE     reduce using rule 102 (expressionsAndStatements)
    REM        reduce using rule 102 (expressionsAndStatements)
    RETURN     reduce using rule 102 (expressionsAndStatements)
    SFUNC      reduce using rule 102 (expressionsAndStatements)
    SPACKAGE   reduce using rule 102 (expressionsAndStatements)
    SSTRUCT    reduce using rule 102 (expressionsAndStatements)
    STEP       reduce using rule 102 (expressionsAndStatements)
    STRING     reduce using rule 102 (expressionsAndStatements)
    TAG        reduce using rule 102 (expressionsAndStatements)
    TSTEP      reduce using rule 102 (expressionsAndStatements)
    VALUE      reduce using rule 102 (expressionsAndStatements)
    VAR        reduce using rule 102 (expressionsAndStatements)

state 44 // SFUNC IDENT LBRACE DPROGRAM [';']

  103 expressionsAndStatements: debugging .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 103 (expressionsAndStatements)
    ADDR       reduce using rule 103 (expressionsAndStatements)
    AFF        reduce using rule 103 (expressionsAndStatements)
    BASICTYPE  reduce using rule 103 (expressionsAndStatements)
    BOOLEAN    reduce using rule 103 (expressionsAndStatements)
    BYTENUM    reduce using rule 103 (expressionsAndStatements)
    DOUBLE     reduce using rule 103 (expressionsAndStatements)
    DPROGRAM   reduce using rule 103 (expressionsAndStatements)
    DSTACK     reduce using rule 103 (expressionsAndStatements)
    DSTATE     reduce using rule 103 (expressionsAndStatements)
    FLOAT      reduce using rule 103 (expressionsAndStatements)
    FOR        reduce using rule 103 (expressionsAndStatements)
    GOTO       reduce using rule 103 (expressionsAndStatements)
    IDENT      reduce using rule 103 (expressionsAndStatements)
    IF         reduce using rule 103 (expressionsAndStatements)
    INFER      reduce using rule 103 (expressionsAndStatements)
    INT        reduce using rule 103 (expressionsAndStatements)
    LONG       reduce using rule 103 (expressionsAndStatements)
    LPAREN     reduce using rule 103 (expressionsAndStatements)
    NEW        reduce using rule 103 (expressionsAndStatements)
    NOT        reduce using rule 103 (expressionsAndStatements)
    RBRACE     reduce using rule 103 (expressionsAndStatements)
    REM        reduce using rule 103 (expressionsAndStatements)
    RETURN     reduce using rule 103 (expressionsAndStatements)
    SFUNC      reduce using rule 103 (expressionsAndStatements)
    SPACKAGE   reduce using rule 103 (expressionsAndStatements)
    SSTRUCT    reduce using rule 103 (expressionsAndStatements)
    STEP       reduce using rule 103 (expressionsAndStatements)
    STRING     reduce using rule 103 (expressionsAndStatements)
    TAG        reduce using rule 103 (expressionsAndStatements)
    TSTEP      reduce using rule 103 (expressionsAndStatements)
    VALUE      reduce using rule 103 (expressionsAndStatements)
    VAR        reduce using rule 103 (expressionsAndStatements)

state 45 // SFUNC IDENT LBRACE TAG [';']

  104 expressionsAndStatements: affordance .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 104 (expressionsAndStatements)
    ADDR       reduce using rule 104 (expressionsAndStatements)
    AFF        reduce using rule 104 (expressionsAndStatements)
    BASICTYPE  reduce using rule 104 (expressionsAndStatements)
    BOOLEAN    reduce using rule 104 (expressionsAndStatements)
    BYTENUM    reduce using rule 104 (expressionsAndStatements)
    DOUBLE     reduce using rule 104 (expressionsAndStatements)
    DPROGRAM   reduce using rule 104 (expressionsAndStatements)
    DSTACK     reduce using rule 104 (expressionsAndStatements)
    DSTATE     reduce using rule 104 (expressionsAndStatements)
    FLOAT      reduce using rule 104 (expressionsAndStatements)
    FOR        reduce using rule 104 (expressionsAndStatements)
    GOTO       reduce using rule 104 (expressionsAndStatements)
    IDENT      reduce using rule 104 (expressionsAndStatements)
    IF         reduce using rule 104 (expressionsAndStatements)
    INFER      reduce using rule 104 (expressionsAndStatements)
    INT        reduce using rule 104 (expressionsAndStatements)
    LONG       reduce using rule 104 (expressionsAndStatements)
    LPAREN     reduce using rule 104 (expressionsAndStatements)
    NEW        reduce using rule 104 (expressionsAndStatements)
    NOT        reduce using rule 104 (expressionsAndStatements)
    RBRACE     reduce using rule 104 (expressionsAndStatements)
    REM        reduce using rule 104 (expressionsAndStatements)
    RETURN     reduce using rule 104 (expressionsAndStatements)
    SFUNC      reduce using rule 104 (expressionsAndStatements)
    SPACKAGE   reduce using rule 104 (expressionsAndStatements)
    SSTRUCT    reduce using rule 104 (expressionsAndStatements)
    STEP       reduce using rule 104 (expressionsAndStatements)
    STRING     reduce using rule 104 (expressionsAndStatements)
    TAG        reduce using rule 104 (expressionsAndStatements)
    TSTEP      reduce using rule 104 (expressionsAndStatements)
    VALUE      reduce using rule 104 (expressionsAndStatements)
    VAR        reduce using rule 104 (expressionsAndStatements)

state 46 // SFUNC IDENT LBRACE REM DEF IDENT [';']

  105 expressionsAndStatements: remover .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 105 (expressionsAndStatements)
    ADDR       reduce using rule 105 (expressionsAndStatements)
    AFF        reduce using rule 105 (expressionsAndStatements)
    BASICTYPE  reduce using rule 105 (expressionsAndStatements)
    BOOLEAN    reduce using rule 105 (expressionsAndStatements)
    BYTENUM    reduce using rule 105 (expressionsAndStatements)
    DOUBLE     reduce using rule 105 (expressionsAndStatements)
    DPROGRAM   reduce using rule 105 (expressionsAndStatements)
    DSTACK     reduce using rule 105 (expressionsAndStatements)
    DSTATE     reduce using rule 105 (expressionsAndStatements)
    FLOAT      reduce using rule 105 (expressionsAndStatements)
    FOR        reduce using rule 105 (expressionsAndStatements)
    GOTO       reduce using rule 105 (expressionsAndStatements)
    IDENT      reduce using rule 105 (expressionsAndStatements)
    IF         reduce using rule 105 (expressionsAndStatements)
    INFER      reduce using rule 105 (expressionsAndStatements)
    INT        reduce using rule 105 (expressionsAndStatements)
    LONG       reduce using rule 105 (expressionsAndStatements)
    LPAREN     reduce using rule 105 (expressionsAndStatements)
    NEW        reduce using rule 105 (expressionsAndStatements)
    NOT        reduce using rule 105 (expressionsAndStatements)
    RBRACE     reduce using rule 105 (expressionsAndStatements)
    REM        reduce using rule 105 (expressionsAndStatements)
    RETURN     reduce using rule 105 (expressionsAndStatements)
    SFUNC      reduce using rule 105 (expressionsAndStatements)
    SPACKAGE   reduce using rule 105 (expressionsAndStatements)
    SSTRUCT    reduce using rule 105 (expressionsAndStatements)
    STEP       reduce using rule 105 (expressionsAndStatements)
    STRING     reduce using rule 105 (expressionsAndStatements)
    TAG        reduce using rule 105 (expressionsAndStatements)
    TSTEP      reduce using rule 105 (expressionsAndStatements)
    VALUE      reduce using rule 105 (expressionsAndStatements)
    VAR        reduce using rule 105 (expressionsAndStatements)

state 47 // SFUNC IDENT LBRACE VAR

  114 assignExpression: VAR . IDENT BASICTYPE definitionAssignment
  115 assignExpression: VAR . IDENT LBRACK RBRACK IDENT  // assoc %right, prec 15
  131 statement: VAR . IDENT IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 363

state 48 // SFUNC IDENT LBRACE BOOLEAN [ASSIGN]

  116 assignExpression: argumentsList . assignOperator argumentsList
  285 argumentsList: argumentsList . COMMA argument
  286 argumentsList: argumentsList . COMMA nonAssignExpression
  287 argumentsList: argumentsList . COMMA ADDR argument
  288 argumentsList: argumentsList . COMMA VALUE argument
  289 argumentsList: argumentsList . COMMA VALUE nonAssignExpression

    ASSIGN        shift, and goto state 328
    BITANDEQ      shift, and goto state 338
    BITOREQ       shift, and goto state 340
    BITXOREQ      shift, and goto state 339
    CASSIGN       shift, and goto state 329
    COMMA         shift, and goto state 202
    DIVEQ         shift, and goto state 333
    EXPEQ         shift, and goto state 335
    LEFTSHIFTEQ   shift, and goto state 336
    MINUSEQ       shift, and goto state 331
    MULTEQ        shift, and goto state 332
    PLUSEQ        shift, and goto state 330
    REMAINDEREQ   shift, and goto state 334
    RIGHTSHIFTEQ  shift, and goto state 337

    assignOperator  goto state 361

state 49 // SFUNC IDENT LBRACE IDENT

  117 nonAssignExpression: IDENT . arguments  // assoc %right, prec 15
  272 argument: IDENT .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %right, prec 15
  274 argument: IDENT . LBRACK INT RBRACK

    $end          reduce using rule 272 (argument)
    ';'           reduce using rule 272 (argument)
    ADDR          reduce using rule 272 (argument)
    AFF           reduce using rule 272 (argument)
    AND           reduce using rule 272 (argument)
    ASSIGN        reduce using rule 272 (argument)
    BASICTYPE     reduce using rule 272 (argument)
    BITAND        reduce using rule 272 (argument)
    BITANDEQ      reduce using rule 272 (argument)
    BITCLEAR      reduce using rule 272 (argument)
    BITOR         reduce using rule 272 (argument)
    BITOREQ       reduce using rule 272 (argument)
    BITXOR        reduce using rule 272 (argument)
    BITXOREQ      reduce using rule 272 (argument)
    BOOLEAN       reduce using rule 272 (argument)
    BYTENUM       reduce using rule 272 (argument)
    CASSIGN       reduce using rule 272 (argument)
    COMMA         reduce using rule 272 (argument)
    DIV           reduce using rule 272 (argument)
    DIVEQ         reduce using rule 272 (argument)
    DOUBLE        reduce using rule 272 (argument)
    DPROGRAM      reduce using rule 272 (argument)
    DSTACK        reduce using rule 272 (argument)
    DSTATE        reduce using rule 272 (argument)
    EQUAL         reduce using rule 272 (argument)
    EXP           reduce using rule 272 (argument)
    EXPEQ         reduce using rule 272 (argument)
    FLOAT         reduce using rule 272 (argument)
    FOR           reduce using rule 272 (argument)
    FUNC          reduce using rule 272 (argument)
    GOTO          reduce using rule 272 (argument)
    GTHAN         reduce using rule 272 (argument)
    GTHANEQ       reduce using rule 272 (argument)
    IDENT         reduce using rule 272 (argument)
    IF            reduce using rule 272 (argument)
    IMPORT        reduce using rule 272 (argument)
    INFER         reduce using rule 272 (argument)
    INT           reduce using rule 272 (argument)
    LBRACE        reduce using rule 272 (argument)
    LBRACK        shift, and goto state 237
    LEFTSHIFT     reduce using rule 272 (argument)
    LEFTSHIFTEQ   reduce using rule 272 (argument)
    LONG          reduce using rule 272 (argument)
    LPAREN        shift, and goto state 238
    LTHAN         reduce using rule 272 (argument)
    LTHANEQ       reduce using rule 272 (argument)
    MINUS         reduce using rule 272 (argument)
    MINUSEQ       reduce using rule 272 (argument)
    MINUSMINUS    reduce using rule 272 (argument)
    MULT          reduce using rule 272 (argument)
    MULTEQ        reduce using rule 272 (argument)
    NEW           reduce using rule 272 (argument)
    NOT           reduce using rule 272 (argument)
    OR            reduce using rule 272 (argument)
    PACKAGE       reduce using rule 272 (argument)
    PLUS          reduce using rule 272 (argument)
    PLUSEQ        reduce using rule 272 (argument)
    PLUSPLUS      reduce using rule 272 (argument)
    RBRACE        reduce using rule 272 (argument)
    REM           reduce using rule 272 (argument)
    REMAINDER     reduce using rule 272 (argument)
    REMAINDEREQ   reduce using rule 272 (argument)
    RETURN        reduce using rule 272 (argument)
    RIGHTSHIFT    reduce using rule 272 (argument)
    RIGHTSHIFTEQ  reduce using rule 272 (argument)
    RPAREN        reduce using rule 272 (argument)
    SFUNC         reduce using rule 272 (argument)
    SPACKAGE      reduce using rule 272 (argument)
    SSTRUCT       reduce using rule 272 (argument)
    STEP          reduce using rule 272 (argument)
    STRING        reduce using rule 272 (argument)
    TAG           reduce using rule 272 (argument)
    TSTEP         reduce using rule 272 (argument)
    TYPSTRUCT     reduce using rule 272 (argument)
    UNEQUAL       reduce using rule 272 (argument)
    VALUE         reduce using rule 272 (argument)
    VAR           reduce using rule 272 (argument)

    arguments  goto state 236

state 50 // SFUNC IDENT LBRACE BOOLEAN [';']

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  280 argumentsList: argument .  [';', ADDR, AFF, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'           reduce using rule 280 (argumentsList)
    ADDR          reduce using rule 280 (argumentsList)
    AFF           reduce using rule 280 (argumentsList)
    AND           shift, and goto state 112
    ASSIGN        reduce using rule 280 (argumentsList)
    BASICTYPE     reduce using rule 280 (argumentsList)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 280 (argumentsList)
    BITCLEAR      shift, and goto state 116
    BITOR         shift, and goto state 114
    BITOREQ       reduce using rule 280 (argumentsList)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 280 (argumentsList)
    BOOLEAN       reduce using rule 280 (argumentsList)
    BYTENUM       reduce using rule 280 (argumentsList)
    CASSIGN       reduce using rule 280 (argumentsList)
    COMMA         reduce using rule 280 (argumentsList)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 280 (argumentsList)
    DOUBLE        reduce using rule 280 (argumentsList)
    DPROGRAM      reduce using rule 280 (argumentsList)
    DSTACK        reduce using rule 280 (argumentsList)
    DSTATE        reduce using rule 280 (argumentsList)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 280 (argumentsList)
    FLOAT         reduce using rule 280 (argumentsList)
    FOR           reduce using rule 280 (argumentsList)
    GOTO          reduce using rule 280 (argumentsList)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 280 (argumentsList)
    IF            reduce using rule 280 (argumentsList)
    INFER         reduce using rule 280 (argumentsList)
    INT           reduce using rule 280 (argumentsList)
    LBRACE        reduce using rule 280 (argumentsList)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 280 (argumentsList)
    LONG          reduce using rule 280 (argumentsList)
    LPAREN        reduce using rule 280 (argumentsList)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 280 (argumentsList)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 280 (argumentsList)
    NEW           reduce using rule 280 (argumentsList)
    NOT           reduce using rule 280 (argumentsList)
    OR            shift, and goto state 111
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 280 (argumentsList)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 280 (argumentsList)
    REM           reduce using rule 280 (argumentsList)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 280 (argumentsList)
    RETURN        reduce using rule 280 (argumentsList)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 280 (argumentsList)
    RPAREN        reduce using rule 280 (argumentsList)
    SFUNC         reduce using rule 280 (argumentsList)
    SPACKAGE      reduce using rule 280 (argumentsList)
    SSTRUCT       reduce using rule 280 (argumentsList)
    STEP          reduce using rule 280 (argumentsList)
    STRING        reduce using rule 280 (argumentsList)
    TAG           reduce using rule 280 (argumentsList)
    TSTEP         reduce using rule 280 (argumentsList)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 280 (argumentsList)
    VAR           reduce using rule 280 (argumentsList)

state 51 // SFUNC IDENT LBRACE FOR

  120 beginFor: FOR .  [';', ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE, VAR]

    ';'        reduce using rule 120 (beginFor)
    ADDR       reduce using rule 120 (beginFor)
    BASICTYPE  reduce using rule 120 (beginFor)
    BOOLEAN    reduce using rule 120 (beginFor)
    BYTENUM    reduce using rule 120 (beginFor)
    DOUBLE     reduce using rule 120 (beginFor)
    FLOAT      reduce using rule 120 (beginFor)
    IDENT      reduce using rule 120 (beginFor)
    INFER      reduce using rule 120 (beginFor)
    INT        reduce using rule 120 (beginFor)
    LONG       reduce using rule 120 (beginFor)
    LPAREN     reduce using rule 120 (beginFor)
    NEW        reduce using rule 120 (beginFor)
    NOT        reduce using rule 120 (beginFor)
    STRING     reduce using rule 120 (beginFor)
    VALUE      reduce using rule 120 (beginFor)
    VAR        reduce using rule 120 (beginFor)

state 52 // SFUNC IDENT LBRACE RETURN

  125 statement: RETURN . returnArg

    ';'        shift, and goto state 358
    ADDR       shift, and goto state 69
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65
    VALUE      shift, and goto state 70

    argument             goto state 50
    argumentsList        goto state 359
    nonAssignExpression  goto state 198
    returnArg            goto state 360

state 53 // SFUNC IDENT LBRACE GOTO

  126 statement: GOTO . IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 357

state 54 // SFUNC IDENT LBRACE IF

  127 statement: IF . conditionControl LBRACE expressionsAndStatements RBRACE elseStatement

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 300
    conditionControl     goto state 348
    nonAssignExpression  goto state 301

state 55 // SFUNC IDENT LBRACE FOR [';']

  128 statement: beginFor . nonAssignExpression LBRACE expressionsAndStatements RBRACE
  129 statement: beginFor . argument LBRACE expressionsAndStatements RBRACE
  130 statement: beginFor . forLoopAssignExpression ';' conditionControl ';' forLoopAssignExpression LBRACE expressionsAndStatements RBRACE
  133 forLoopAssignExpression: .  [';']

    ';'        reduce using rule 133 (forLoopAssignExpression)
    ADDR       shift, and goto state 69
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 294

    argument                 goto state 295
    argumentsList            goto state 48
    assignExpression         goto state 298
    forLoopAssignExpression  goto state 297
    nonAssignExpression      goto state 296

state 56 // SFUNC IDENT LBRACE ';'

  132 statement: ';' .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 132 (statement)
    ADDR       reduce using rule 132 (statement)
    AFF        reduce using rule 132 (statement)
    BASICTYPE  reduce using rule 132 (statement)
    BOOLEAN    reduce using rule 132 (statement)
    BYTENUM    reduce using rule 132 (statement)
    DOUBLE     reduce using rule 132 (statement)
    DPROGRAM   reduce using rule 132 (statement)
    DSTACK     reduce using rule 132 (statement)
    DSTATE     reduce using rule 132 (statement)
    FLOAT      reduce using rule 132 (statement)
    FOR        reduce using rule 132 (statement)
    GOTO       reduce using rule 132 (statement)
    IDENT      reduce using rule 132 (statement)
    IF         reduce using rule 132 (statement)
    INFER      reduce using rule 132 (statement)
    INT        reduce using rule 132 (statement)
    LONG       reduce using rule 132 (statement)
    LPAREN     reduce using rule 132 (statement)
    NEW        reduce using rule 132 (statement)
    NOT        reduce using rule 132 (statement)
    RBRACE     reduce using rule 132 (statement)
    REM        reduce using rule 132 (statement)
    RETURN     reduce using rule 132 (statement)
    SFUNC      reduce using rule 132 (statement)
    SPACKAGE   reduce using rule 132 (statement)
    SSTRUCT    reduce using rule 132 (statement)
    STEP       reduce using rule 132 (statement)
    STRING     reduce using rule 132 (statement)
    TAG        reduce using rule 132 (statement)
    TSTEP      reduce using rule 132 (statement)
    VALUE      reduce using rule 132 (statement)
    VAR        reduce using rule 132 (statement)

state 57 // SFUNC IDENT LBRACE NOT

  262 argument: NOT . argument  // assoc %left, prec 14
  263 argument: NOT . nonAssignExpression  // assoc %left, prec 14

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 292
    nonAssignExpression  goto state 293

state 58 // SFUNC IDENT LBRACE LPAREN

  264 argument: LPAREN . argument RPAREN

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 290
    nonAssignExpression  goto state 196

state 59 // SFUNC IDENT LBRACE BYTENUM

  265 argument: BYTENUM .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 265 (argument)
    ';'           reduce using rule 265 (argument)
    ADDR          reduce using rule 265 (argument)
    AFF           reduce using rule 265 (argument)
    AND           reduce using rule 265 (argument)
    ASSIGN        reduce using rule 265 (argument)
    BASICTYPE     reduce using rule 265 (argument)
    BITAND        reduce using rule 265 (argument)
    BITANDEQ      reduce using rule 265 (argument)
    BITCLEAR      reduce using rule 265 (argument)
    BITOR         reduce using rule 265 (argument)
    BITOREQ       reduce using rule 265 (argument)
    BITXOR        reduce using rule 265 (argument)
    BITXOREQ      reduce using rule 265 (argument)
    BOOLEAN       reduce using rule 265 (argument)
    BYTENUM       reduce using rule 265 (argument)
    CASSIGN       reduce using rule 265 (argument)
    COMMA         reduce using rule 265 (argument)
    DIV           reduce using rule 265 (argument)
    DIVEQ         reduce using rule 265 (argument)
    DOUBLE        reduce using rule 265 (argument)
    DPROGRAM      reduce using rule 265 (argument)
    DSTACK        reduce using rule 265 (argument)
    DSTATE        reduce using rule 265 (argument)
    EQUAL         reduce using rule 265 (argument)
    EXP           reduce using rule 265 (argument)
    EXPEQ         reduce using rule 265 (argument)
    FLOAT         reduce using rule 265 (argument)
    FOR           reduce using rule 265 (argument)
    FUNC          reduce using rule 265 (argument)
    GOTO          reduce using rule 265 (argument)
    GTHAN         reduce using rule 265 (argument)
    GTHANEQ       reduce using rule 265 (argument)
    IDENT         reduce using rule 265 (argument)
    IF            reduce using rule 265 (argument)
    IMPORT        reduce using rule 265 (argument)
    INFER         reduce using rule 265 (argument)
    INT           reduce using rule 265 (argument)
    LBRACE        reduce using rule 265 (argument)
    LEFTSHIFT     reduce using rule 265 (argument)
    LEFTSHIFTEQ   reduce using rule 265 (argument)
    LONG          reduce using rule 265 (argument)
    LPAREN        reduce using rule 265 (argument)
    LTHAN         reduce using rule 265 (argument)
    LTHANEQ       reduce using rule 265 (argument)
    MINUS         reduce using rule 265 (argument)
    MINUSEQ       reduce using rule 265 (argument)
    MINUSMINUS    reduce using rule 265 (argument)
    MULT          reduce using rule 265 (argument)
    MULTEQ        reduce using rule 265 (argument)
    NEW           reduce using rule 265 (argument)
    NOT           reduce using rule 265 (argument)
    OR            reduce using rule 265 (argument)
    PACKAGE       reduce using rule 265 (argument)
    PLUS          reduce using rule 265 (argument)
    PLUSEQ        reduce using rule 265 (argument)
    PLUSPLUS      reduce using rule 265 (argument)
    RBRACE        reduce using rule 265 (argument)
    REM           reduce using rule 265 (argument)
    REMAINDER     reduce using rule 265 (argument)
    REMAINDEREQ   reduce using rule 265 (argument)
    RETURN        reduce using rule 265 (argument)
    RIGHTSHIFT    reduce using rule 265 (argument)
    RIGHTSHIFTEQ  reduce using rule 265 (argument)
    RPAREN        reduce using rule 265 (argument)
    SFUNC         reduce using rule 265 (argument)
    SPACKAGE      reduce using rule 265 (argument)
    SSTRUCT       reduce using rule 265 (argument)
    STEP          reduce using rule 265 (argument)
    STRING        reduce using rule 265 (argument)
    TAG           reduce using rule 265 (argument)
    TSTEP         reduce using rule 265 (argument)
    TYPSTRUCT     reduce using rule 265 (argument)
    UNEQUAL       reduce using rule 265 (argument)
    VALUE         reduce using rule 265 (argument)
    VAR           reduce using rule 265 (argument)

state 60 // SFUNC IDENT LBRACE INT

  266 argument: INT .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 266 (argument)
    ';'           reduce using rule 266 (argument)
    ADDR          reduce using rule 266 (argument)
    AFF           reduce using rule 266 (argument)
    AND           reduce using rule 266 (argument)
    ASSIGN        reduce using rule 266 (argument)
    BASICTYPE     reduce using rule 266 (argument)
    BITAND        reduce using rule 266 (argument)
    BITANDEQ      reduce using rule 266 (argument)
    BITCLEAR      reduce using rule 266 (argument)
    BITOR         reduce using rule 266 (argument)
    BITOREQ       reduce using rule 266 (argument)
    BITXOR        reduce using rule 266 (argument)
    BITXOREQ      reduce using rule 266 (argument)
    BOOLEAN       reduce using rule 266 (argument)
    BYTENUM       reduce using rule 266 (argument)
    CASSIGN       reduce using rule 266 (argument)
    COMMA         reduce using rule 266 (argument)
    DIV           reduce using rule 266 (argument)
    DIVEQ         reduce using rule 266 (argument)
    DOUBLE        reduce using rule 266 (argument)
    DPROGRAM      reduce using rule 266 (argument)
    DSTACK        reduce using rule 266 (argument)
    DSTATE        reduce using rule 266 (argument)
    EQUAL         reduce using rule 266 (argument)
    EXP           reduce using rule 266 (argument)
    EXPEQ         reduce using rule 266 (argument)
    FLOAT         reduce using rule 266 (argument)
    FOR           reduce using rule 266 (argument)
    FUNC          reduce using rule 266 (argument)
    GOTO          reduce using rule 266 (argument)
    GTHAN         reduce using rule 266 (argument)
    GTHANEQ       reduce using rule 266 (argument)
    IDENT         reduce using rule 266 (argument)
    IF            reduce using rule 266 (argument)
    IMPORT        reduce using rule 266 (argument)
    INFER         reduce using rule 266 (argument)
    INT           reduce using rule 266 (argument)
    LBRACE        reduce using rule 266 (argument)
    LEFTSHIFT     reduce using rule 266 (argument)
    LEFTSHIFTEQ   reduce using rule 266 (argument)
    LONG          reduce using rule 266 (argument)
    LPAREN        reduce using rule 266 (argument)
    LTHAN         reduce using rule 266 (argument)
    LTHANEQ       reduce using rule 266 (argument)
    MINUS         reduce using rule 266 (argument)
    MINUSEQ       reduce using rule 266 (argument)
    MINUSMINUS    reduce using rule 266 (argument)
    MULT          reduce using rule 266 (argument)
    MULTEQ        reduce using rule 266 (argument)
    NEW           reduce using rule 266 (argument)
    NOT           reduce using rule 266 (argument)
    OR            reduce using rule 266 (argument)
    PACKAGE       reduce using rule 266 (argument)
    PLUS          reduce using rule 266 (argument)
    PLUSEQ        reduce using rule 266 (argument)
    PLUSPLUS      reduce using rule 266 (argument)
    RBRACE        reduce using rule 266 (argument)
    REM           reduce using rule 266 (argument)
    REMAINDER     reduce using rule 266 (argument)
    REMAINDEREQ   reduce using rule 266 (argument)
    RETURN        reduce using rule 266 (argument)
    RIGHTSHIFT    reduce using rule 266 (argument)
    RIGHTSHIFTEQ  reduce using rule 266 (argument)
    RPAREN        reduce using rule 266 (argument)
    SFUNC         reduce using rule 266 (argument)
    SPACKAGE      reduce using rule 266 (argument)
    SSTRUCT       reduce using rule 266 (argument)
    STEP          reduce using rule 266 (argument)
    STRING        reduce using rule 266 (argument)
    TAG           reduce using rule 266 (argument)
    TSTEP         reduce using rule 266 (argument)
    TYPSTRUCT     reduce using rule 266 (argument)
    UNEQUAL       reduce using rule 266 (argument)
    VALUE         reduce using rule 266 (argument)
    VAR           reduce using rule 266 (argument)

state 61 // SFUNC IDENT LBRACE LONG

  267 argument: LONG .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 267 (argument)
    ';'           reduce using rule 267 (argument)
    ADDR          reduce using rule 267 (argument)
    AFF           reduce using rule 267 (argument)
    AND           reduce using rule 267 (argument)
    ASSIGN        reduce using rule 267 (argument)
    BASICTYPE     reduce using rule 267 (argument)
    BITAND        reduce using rule 267 (argument)
    BITANDEQ      reduce using rule 267 (argument)
    BITCLEAR      reduce using rule 267 (argument)
    BITOR         reduce using rule 267 (argument)
    BITOREQ       reduce using rule 267 (argument)
    BITXOR        reduce using rule 267 (argument)
    BITXOREQ      reduce using rule 267 (argument)
    BOOLEAN       reduce using rule 267 (argument)
    BYTENUM       reduce using rule 267 (argument)
    CASSIGN       reduce using rule 267 (argument)
    COMMA         reduce using rule 267 (argument)
    DIV           reduce using rule 267 (argument)
    DIVEQ         reduce using rule 267 (argument)
    DOUBLE        reduce using rule 267 (argument)
    DPROGRAM      reduce using rule 267 (argument)
    DSTACK        reduce using rule 267 (argument)
    DSTATE        reduce using rule 267 (argument)
    EQUAL         reduce using rule 267 (argument)
    EXP           reduce using rule 267 (argument)
    EXPEQ         reduce using rule 267 (argument)
    FLOAT         reduce using rule 267 (argument)
    FOR           reduce using rule 267 (argument)
    FUNC          reduce using rule 267 (argument)
    GOTO          reduce using rule 267 (argument)
    GTHAN         reduce using rule 267 (argument)
    GTHANEQ       reduce using rule 267 (argument)
    IDENT         reduce using rule 267 (argument)
    IF            reduce using rule 267 (argument)
    IMPORT        reduce using rule 267 (argument)
    INFER         reduce using rule 267 (argument)
    INT           reduce using rule 267 (argument)
    LBRACE        reduce using rule 267 (argument)
    LEFTSHIFT     reduce using rule 267 (argument)
    LEFTSHIFTEQ   reduce using rule 267 (argument)
    LONG          reduce using rule 267 (argument)
    LPAREN        reduce using rule 267 (argument)
    LTHAN         reduce using rule 267 (argument)
    LTHANEQ       reduce using rule 267 (argument)
    MINUS         reduce using rule 267 (argument)
    MINUSEQ       reduce using rule 267 (argument)
    MINUSMINUS    reduce using rule 267 (argument)
    MULT          reduce using rule 267 (argument)
    MULTEQ        reduce using rule 267 (argument)
    NEW           reduce using rule 267 (argument)
    NOT           reduce using rule 267 (argument)
    OR            reduce using rule 267 (argument)
    PACKAGE       reduce using rule 267 (argument)
    PLUS          reduce using rule 267 (argument)
    PLUSEQ        reduce using rule 267 (argument)
    PLUSPLUS      reduce using rule 267 (argument)
    RBRACE        reduce using rule 267 (argument)
    REM           reduce using rule 267 (argument)
    REMAINDER     reduce using rule 267 (argument)
    REMAINDEREQ   reduce using rule 267 (argument)
    RETURN        reduce using rule 267 (argument)
    RIGHTSHIFT    reduce using rule 267 (argument)
    RIGHTSHIFTEQ  reduce using rule 267 (argument)
    RPAREN        reduce using rule 267 (argument)
    SFUNC         reduce using rule 267 (argument)
    SPACKAGE      reduce using rule 267 (argument)
    SSTRUCT       reduce using rule 267 (argument)
    STEP          reduce using rule 267 (argument)
    STRING        reduce using rule 267 (argument)
    TAG           reduce using rule 267 (argument)
    TSTEP         reduce using rule 267 (argument)
    TYPSTRUCT     reduce using rule 267 (argument)
    UNEQUAL       reduce using rule 267 (argument)
    VALUE         reduce using rule 267 (argument)
    VAR           reduce using rule 267 (argument)

state 62 // SFUNC IDENT LBRACE FLOAT

  268 argument: FLOAT .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 268 (argument)
    ';'           reduce using rule 268 (argument)
    ADDR          reduce using rule 268 (argument)
    AFF           reduce using rule 268 (argument)
    AND           reduce using rule 268 (argument)
    ASSIGN        reduce using rule 268 (argument)
    BASICTYPE     reduce using rule 268 (argument)
    BITAND        reduce using rule 268 (argument)
    BITANDEQ      reduce using rule 268 (argument)
    BITCLEAR      reduce using rule 268 (argument)
    BITOR         reduce using rule 268 (argument)
    BITOREQ       reduce using rule 268 (argument)
    BITXOR        reduce using rule 268 (argument)
    BITXOREQ      reduce using rule 268 (argument)
    BOOLEAN       reduce using rule 268 (argument)
    BYTENUM       reduce using rule 268 (argument)
    CASSIGN       reduce using rule 268 (argument)
    COMMA         reduce using rule 268 (argument)
    DIV           reduce using rule 268 (argument)
    DIVEQ         reduce using rule 268 (argument)
    DOUBLE        reduce using rule 268 (argument)
    DPROGRAM      reduce using rule 268 (argument)
    DSTACK        reduce using rule 268 (argument)
    DSTATE        reduce using rule 268 (argument)
    EQUAL         reduce using rule 268 (argument)
    EXP           reduce using rule 268 (argument)
    EXPEQ         reduce using rule 268 (argument)
    FLOAT         reduce using rule 268 (argument)
    FOR           reduce using rule 268 (argument)
    FUNC          reduce using rule 268 (argument)
    GOTO          reduce using rule 268 (argument)
    GTHAN         reduce using rule 268 (argument)
    GTHANEQ       reduce using rule 268 (argument)
    IDENT         reduce using rule 268 (argument)
    IF            reduce using rule 268 (argument)
    IMPORT        reduce using rule 268 (argument)
    INFER         reduce using rule 268 (argument)
    INT           reduce using rule 268 (argument)
    LBRACE        reduce using rule 268 (argument)
    LEFTSHIFT     reduce using rule 268 (argument)
    LEFTSHIFTEQ   reduce using rule 268 (argument)
    LONG          reduce using rule 268 (argument)
    LPAREN        reduce using rule 268 (argument)
    LTHAN         reduce using rule 268 (argument)
    LTHANEQ       reduce using rule 268 (argument)
    MINUS         reduce using rule 268 (argument)
    MINUSEQ       reduce using rule 268 (argument)
    MINUSMINUS    reduce using rule 268 (argument)
    MULT          reduce using rule 268 (argument)
    MULTEQ        reduce using rule 268 (argument)
    NEW           reduce using rule 268 (argument)
    NOT           reduce using rule 268 (argument)
    OR            reduce using rule 268 (argument)
    PACKAGE       reduce using rule 268 (argument)
    PLUS          reduce using rule 268 (argument)
    PLUSEQ        reduce using rule 268 (argument)
    PLUSPLUS      reduce using rule 268 (argument)
    RBRACE        reduce using rule 268 (argument)
    REM           reduce using rule 268 (argument)
    REMAINDER     reduce using rule 268 (argument)
    REMAINDEREQ   reduce using rule 268 (argument)
    RETURN        reduce using rule 268 (argument)
    RIGHTSHIFT    reduce using rule 268 (argument)
    RIGHTSHIFTEQ  reduce using rule 268 (argument)
    RPAREN        reduce using rule 268 (argument)
    SFUNC         reduce using rule 268 (argument)
    SPACKAGE      reduce using rule 268 (argument)
    SSTRUCT       reduce using rule 268 (argument)
    STEP          reduce using rule 268 (argument)
    STRING        reduce using rule 268 (argument)
    TAG           reduce using rule 268 (argument)
    TSTEP         reduce using rule 268 (argument)
    TYPSTRUCT     reduce using rule 268 (argument)
    UNEQUAL       reduce using rule 268 (argument)
    VALUE         reduce using rule 268 (argument)
    VAR           reduce using rule 268 (argument)

state 63 // SFUNC IDENT LBRACE DOUBLE

  269 argument: DOUBLE .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 269 (argument)
    ';'           reduce using rule 269 (argument)
    ADDR          reduce using rule 269 (argument)
    AFF           reduce using rule 269 (argument)
    AND           reduce using rule 269 (argument)
    ASSIGN        reduce using rule 269 (argument)
    BASICTYPE     reduce using rule 269 (argument)
    BITAND        reduce using rule 269 (argument)
    BITANDEQ      reduce using rule 269 (argument)
    BITCLEAR      reduce using rule 269 (argument)
    BITOR         reduce using rule 269 (argument)
    BITOREQ       reduce using rule 269 (argument)
    BITXOR        reduce using rule 269 (argument)
    BITXOREQ      reduce using rule 269 (argument)
    BOOLEAN       reduce using rule 269 (argument)
    BYTENUM       reduce using rule 269 (argument)
    CASSIGN       reduce using rule 269 (argument)
    COMMA         reduce using rule 269 (argument)
    DIV           reduce using rule 269 (argument)
    DIVEQ         reduce using rule 269 (argument)
    DOUBLE        reduce using rule 269 (argument)
    DPROGRAM      reduce using rule 269 (argument)
    DSTACK        reduce using rule 269 (argument)
    DSTATE        reduce using rule 269 (argument)
    EQUAL         reduce using rule 269 (argument)
    EXP           reduce using rule 269 (argument)
    EXPEQ         reduce using rule 269 (argument)
    FLOAT         reduce using rule 269 (argument)
    FOR           reduce using rule 269 (argument)
    FUNC          reduce using rule 269 (argument)
    GOTO          reduce using rule 269 (argument)
    GTHAN         reduce using rule 269 (argument)
    GTHANEQ       reduce using rule 269 (argument)
    IDENT         reduce using rule 269 (argument)
    IF            reduce using rule 269 (argument)
    IMPORT        reduce using rule 269 (argument)
    INFER         reduce using rule 269 (argument)
    INT           reduce using rule 269 (argument)
    LBRACE        reduce using rule 269 (argument)
    LEFTSHIFT     reduce using rule 269 (argument)
    LEFTSHIFTEQ   reduce using rule 269 (argument)
    LONG          reduce using rule 269 (argument)
    LPAREN        reduce using rule 269 (argument)
    LTHAN         reduce using rule 269 (argument)
    LTHANEQ       reduce using rule 269 (argument)
    MINUS         reduce using rule 269 (argument)
    MINUSEQ       reduce using rule 269 (argument)
    MINUSMINUS    reduce using rule 269 (argument)
    MULT          reduce using rule 269 (argument)
    MULTEQ        reduce using rule 269 (argument)
    NEW           reduce using rule 269 (argument)
    NOT           reduce using rule 269 (argument)
    OR            reduce using rule 269 (argument)
    PACKAGE       reduce using rule 269 (argument)
    PLUS          reduce using rule 269 (argument)
    PLUSEQ        reduce using rule 269 (argument)
    PLUSPLUS      reduce using rule 269 (argument)
    RBRACE        reduce using rule 269 (argument)
    REM           reduce using rule 269 (argument)
    REMAINDER     reduce using rule 269 (argument)
    REMAINDEREQ   reduce using rule 269 (argument)
    RETURN        reduce using rule 269 (argument)
    RIGHTSHIFT    reduce using rule 269 (argument)
    RIGHTSHIFTEQ  reduce using rule 269 (argument)
    RPAREN        reduce using rule 269 (argument)
    SFUNC         reduce using rule 269 (argument)
    SPACKAGE      reduce using rule 269 (argument)
    SSTRUCT       reduce using rule 269 (argument)
    STEP          reduce using rule 269 (argument)
    STRING        reduce using rule 269 (argument)
    TAG           reduce using rule 269 (argument)
    TSTEP         reduce using rule 269 (argument)
    TYPSTRUCT     reduce using rule 269 (argument)
    UNEQUAL       reduce using rule 269 (argument)
    VALUE         reduce using rule 269 (argument)
    VAR           reduce using rule 269 (argument)

state 64 // SFUNC IDENT LBRACE BOOLEAN

  270 argument: BOOLEAN .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 270 (argument)
    ';'           reduce using rule 270 (argument)
    ADDR          reduce using rule 270 (argument)
    AFF           reduce using rule 270 (argument)
    AND           reduce using rule 270 (argument)
    ASSIGN        reduce using rule 270 (argument)
    BASICTYPE     reduce using rule 270 (argument)
    BITAND        reduce using rule 270 (argument)
    BITANDEQ      reduce using rule 270 (argument)
    BITCLEAR      reduce using rule 270 (argument)
    BITOR         reduce using rule 270 (argument)
    BITOREQ       reduce using rule 270 (argument)
    BITXOR        reduce using rule 270 (argument)
    BITXOREQ      reduce using rule 270 (argument)
    BOOLEAN       reduce using rule 270 (argument)
    BYTENUM       reduce using rule 270 (argument)
    CASSIGN       reduce using rule 270 (argument)
    COMMA         reduce using rule 270 (argument)
    DIV           reduce using rule 270 (argument)
    DIVEQ         reduce using rule 270 (argument)
    DOUBLE        reduce using rule 270 (argument)
    DPROGRAM      reduce using rule 270 (argument)
    DSTACK        reduce using rule 270 (argument)
    DSTATE        reduce using rule 270 (argument)
    EQUAL         reduce using rule 270 (argument)
    EXP           reduce using rule 270 (argument)
    EXPEQ         reduce using rule 270 (argument)
    FLOAT         reduce using rule 270 (argument)
    FOR           reduce using rule 270 (argument)
    FUNC          reduce using rule 270 (argument)
    GOTO          reduce using rule 270 (argument)
    GTHAN         reduce using rule 270 (argument)
    GTHANEQ       reduce using rule 270 (argument)
    IDENT         reduce using rule 270 (argument)
    IF            reduce using rule 270 (argument)
    IMPORT        reduce using rule 270 (argument)
    INFER         reduce using rule 270 (argument)
    INT           reduce using rule 270 (argument)
    LBRACE        reduce using rule 270 (argument)
    LEFTSHIFT     reduce using rule 270 (argument)
    LEFTSHIFTEQ   reduce using rule 270 (argument)
    LONG          reduce using rule 270 (argument)
    LPAREN        reduce using rule 270 (argument)
    LTHAN         reduce using rule 270 (argument)
    LTHANEQ       reduce using rule 270 (argument)
    MINUS         reduce using rule 270 (argument)
    MINUSEQ       reduce using rule 270 (argument)
    MINUSMINUS    reduce using rule 270 (argument)
    MULT          reduce using rule 270 (argument)
    MULTEQ        reduce using rule 270 (argument)
    NEW           reduce using rule 270 (argument)
    NOT           reduce using rule 270 (argument)
    OR            reduce using rule 270 (argument)
    PACKAGE       reduce using rule 270 (argument)
    PLUS          reduce using rule 270 (argument)
    PLUSEQ        reduce using rule 270 (argument)
    PLUSPLUS      reduce using rule 270 (argument)
    RBRACE        reduce using rule 270 (argument)
    REM           reduce using rule 270 (argument)
    REMAINDER     reduce using rule 270 (argument)
    REMAINDEREQ   reduce using rule 270 (argument)
    RETURN        reduce using rule 270 (argument)
    RIGHTSHIFT    reduce using rule 270 (argument)
    RIGHTSHIFTEQ  reduce using rule 270 (argument)
    RPAREN        reduce using rule 270 (argument)
    SFUNC         reduce using rule 270 (argument)
    SPACKAGE      reduce using rule 270 (argument)
    SSTRUCT       reduce using rule 270 (argument)
    STEP          reduce using rule 270 (argument)
    STRING        reduce using rule 270 (argument)
    TAG           reduce using rule 270 (argument)
    TSTEP         reduce using rule 270 (argument)
    TYPSTRUCT     reduce using rule 270 (argument)
    UNEQUAL       reduce using rule 270 (argument)
    VALUE         reduce using rule 270 (argument)
    VAR           reduce using rule 270 (argument)

state 65 // SFUNC IDENT LBRACE STRING

  271 argument: STRING .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 271 (argument)
    ';'           reduce using rule 271 (argument)
    ADDR          reduce using rule 271 (argument)
    AFF           reduce using rule 271 (argument)
    AND           reduce using rule 271 (argument)
    ASSIGN        reduce using rule 271 (argument)
    BASICTYPE     reduce using rule 271 (argument)
    BITAND        reduce using rule 271 (argument)
    BITANDEQ      reduce using rule 271 (argument)
    BITCLEAR      reduce using rule 271 (argument)
    BITOR         reduce using rule 271 (argument)
    BITOREQ       reduce using rule 271 (argument)
    BITXOR        reduce using rule 271 (argument)
    BITXOREQ      reduce using rule 271 (argument)
    BOOLEAN       reduce using rule 271 (argument)
    BYTENUM       reduce using rule 271 (argument)
    CASSIGN       reduce using rule 271 (argument)
    COMMA         reduce using rule 271 (argument)
    DIV           reduce using rule 271 (argument)
    DIVEQ         reduce using rule 271 (argument)
    DOUBLE        reduce using rule 271 (argument)
    DPROGRAM      reduce using rule 271 (argument)
    DSTACK        reduce using rule 271 (argument)
    DSTATE        reduce using rule 271 (argument)
    EQUAL         reduce using rule 271 (argument)
    EXP           reduce using rule 271 (argument)
    EXPEQ         reduce using rule 271 (argument)
    FLOAT         reduce using rule 271 (argument)
    FOR           reduce using rule 271 (argument)
    FUNC          reduce using rule 271 (argument)
    GOTO          reduce using rule 271 (argument)
    GTHAN         reduce using rule 271 (argument)
    GTHANEQ       reduce using rule 271 (argument)
    IDENT         reduce using rule 271 (argument)
    IF            reduce using rule 271 (argument)
    IMPORT        reduce using rule 271 (argument)
    INFER         reduce using rule 271 (argument)
    INT           reduce using rule 271 (argument)
    LBRACE        reduce using rule 271 (argument)
    LEFTSHIFT     reduce using rule 271 (argument)
    LEFTSHIFTEQ   reduce using rule 271 (argument)
    LONG          reduce using rule 271 (argument)
    LPAREN        reduce using rule 271 (argument)
    LTHAN         reduce using rule 271 (argument)
    LTHANEQ       reduce using rule 271 (argument)
    MINUS         reduce using rule 271 (argument)
    MINUSEQ       reduce using rule 271 (argument)
    MINUSMINUS    reduce using rule 271 (argument)
    MULT          reduce using rule 271 (argument)
    MULTEQ        reduce using rule 271 (argument)
    NEW           reduce using rule 271 (argument)
    NOT           reduce using rule 271 (argument)
    OR            reduce using rule 271 (argument)
    PACKAGE       reduce using rule 271 (argument)
    PLUS          reduce using rule 271 (argument)
    PLUSEQ        reduce using rule 271 (argument)
    PLUSPLUS      reduce using rule 271 (argument)
    RBRACE        reduce using rule 271 (argument)
    REM           reduce using rule 271 (argument)
    REMAINDER     reduce using rule 271 (argument)
    REMAINDEREQ   reduce using rule 271 (argument)
    RETURN        reduce using rule 271 (argument)
    RIGHTSHIFT    reduce using rule 271 (argument)
    RIGHTSHIFTEQ  reduce using rule 271 (argument)
    RPAREN        reduce using rule 271 (argument)
    SFUNC         reduce using rule 271 (argument)
    SPACKAGE      reduce using rule 271 (argument)
    SSTRUCT       reduce using rule 271 (argument)
    STEP          reduce using rule 271 (argument)
    STRING        reduce using rule 271 (argument)
    TAG           reduce using rule 271 (argument)
    TSTEP         reduce using rule 271 (argument)
    TYPSTRUCT     reduce using rule 271 (argument)
    UNEQUAL       reduce using rule 271 (argument)
    VALUE         reduce using rule 271 (argument)
    VAR           reduce using rule 271 (argument)

state 66 // SFUNC IDENT LBRACE NEW

  273 argument: NEW . IDENT LBRACE structLitDefs RBRACE

    IDENT  shift, and goto state 280

state 67 // SFUNC IDENT LBRACE INFER

  275 argument: INFER . LBRACE inferClauses RBRACE

    LBRACE  shift, and goto state 210

state 68 // SFUNC IDENT LBRACE BASICTYPE

  276 argument: BASICTYPE . LBRACE argumentsList RBRACE
  277 argument: BASICTYPE . LBRACE RBRACE

    LBRACE  shift, and goto state 197

state 69 // SFUNC IDENT LBRACE ADDR

  282 argumentsList: ADDR . argument

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 195
    nonAssignExpression  goto state 196

state 70 // SFUNC IDENT LBRACE VALUE

  283 argumentsList: VALUE . argument
  284 argumentsList: VALUE . nonAssignExpression

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 71
    nonAssignExpression  goto state 72

state 71 // SFUNC IDENT LBRACE VALUE BOOLEAN [';']

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  283 argumentsList: VALUE argument .  [';', ADDR, AFF, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'           reduce using rule 283 (argumentsList)
    ADDR          reduce using rule 283 (argumentsList)
    AFF           reduce using rule 283 (argumentsList)
    AND           shift, and goto state 112
    ASSIGN        reduce using rule 283 (argumentsList)
    BASICTYPE     reduce using rule 283 (argumentsList)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 283 (argumentsList)
    BITCLEAR      shift, and goto state 116
    BITOR         shift, and goto state 114
    BITOREQ       reduce using rule 283 (argumentsList)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 283 (argumentsList)
    BOOLEAN       reduce using rule 283 (argumentsList)
    BYTENUM       reduce using rule 283 (argumentsList)
    CASSIGN       reduce using rule 283 (argumentsList)
    COMMA         reduce using rule 283 (argumentsList)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 283 (argumentsList)
    DOUBLE        reduce using rule 283 (argumentsList)
    DPROGRAM      reduce using rule 283 (argumentsList)
    DSTACK        reduce using rule 283 (argumentsList)
    DSTATE        reduce using rule 283 (argumentsList)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 283 (argumentsList)
    FLOAT         reduce using rule 283 (argumentsList)
    FOR           reduce using rule 283 (argumentsList)
    GOTO          reduce using rule 283 (argumentsList)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 283 (argumentsList)
    IF            reduce using rule 283 (argumentsList)
    INFER         reduce using rule 283 (argumentsList)
    INT           reduce using rule 283 (argumentsList)
    LBRACE        reduce using rule 283 (argumentsList)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 283 (argumentsList)
    LONG          reduce using rule 283 (argumentsList)
    LPAREN        reduce using rule 283 (argumentsList)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 283 (argumentsList)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 283 (argumentsList)
    NEW           reduce using rule 283 (argumentsList)
    NOT           reduce using rule 283 (argumentsList)
    OR            shift, and goto state 111
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 283 (argumentsList)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 283 (argumentsList)
    REM           reduce using rule 283 (argumentsList)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 283 (argumentsList)
    RETURN        reduce using rule 283 (argumentsList)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 283 (argumentsList)
    RPAREN        reduce using rule 283 (argumentsList)
    SFUNC         reduce using rule 283 (argumentsList)
    SPACKAGE      reduce using rule 283 (argumentsList)
    SSTRUCT       reduce using rule 283 (argumentsList)
    STEP          reduce using rule 283 (argumentsList)
    STRING        reduce using rule 283 (argumentsList)
    TAG           reduce using rule 283 (argumentsList)
    TSTEP         reduce using rule 283 (argumentsList)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 283 (argumentsList)
    VAR           reduce using rule 283 (argumentsList)

state 72 // SFUNC IDENT LBRACE VALUE BOOLEAN MINUSMINUS [';']

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3
  284 argumentsList: VALUE nonAssignExpression .  [';', ADDR, AFF, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'           reduce using rule 284 (argumentsList)
    ADDR          reduce using rule 284 (argumentsList)
    AFF           reduce using rule 284 (argumentsList)
    AND           shift, and goto state 88
    ASSIGN        reduce using rule 284 (argumentsList)
    BASICTYPE     reduce using rule 284 (argumentsList)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 284 (argumentsList)
    BITCLEAR      shift, and goto state 92
    BITOR         shift, and goto state 90
    BITOREQ       reduce using rule 284 (argumentsList)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 284 (argumentsList)
    BOOLEAN       reduce using rule 284 (argumentsList)
    BYTENUM       reduce using rule 284 (argumentsList)
    CASSIGN       reduce using rule 284 (argumentsList)
    COMMA         reduce using rule 284 (argumentsList)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 284 (argumentsList)
    DOUBLE        reduce using rule 284 (argumentsList)
    DPROGRAM      reduce using rule 284 (argumentsList)
    DSTACK        reduce using rule 284 (argumentsList)
    DSTATE        reduce using rule 284 (argumentsList)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 284 (argumentsList)
    FLOAT         reduce using rule 284 (argumentsList)
    FOR           reduce using rule 284 (argumentsList)
    GOTO          reduce using rule 284 (argumentsList)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 284 (argumentsList)
    IF            reduce using rule 284 (argumentsList)
    INFER         reduce using rule 284 (argumentsList)
    INT           reduce using rule 284 (argumentsList)
    LBRACE        reduce using rule 284 (argumentsList)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 284 (argumentsList)
    LONG          reduce using rule 284 (argumentsList)
    LPAREN        reduce using rule 284 (argumentsList)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 284 (argumentsList)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 284 (argumentsList)
    NEW           reduce using rule 284 (argumentsList)
    NOT           reduce using rule 284 (argumentsList)
    OR            shift, and goto state 87
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 284 (argumentsList)
    RBRACE        reduce using rule 284 (argumentsList)
    REM           reduce using rule 284 (argumentsList)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 284 (argumentsList)
    RETURN        reduce using rule 284 (argumentsList)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 284 (argumentsList)
    RPAREN        reduce using rule 284 (argumentsList)
    SFUNC         reduce using rule 284 (argumentsList)
    SPACKAGE      reduce using rule 284 (argumentsList)
    SSTRUCT       reduce using rule 284 (argumentsList)
    STEP          reduce using rule 284 (argumentsList)
    STRING        reduce using rule 284 (argumentsList)
    TAG           reduce using rule 284 (argumentsList)
    TSTEP         reduce using rule 284 (argumentsList)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 284 (argumentsList)
    VAR           reduce using rule 284 (argumentsList)

state 73 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS PLUS

  183 argument: nonAssignExpression PLUS . nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression PLUS . argument  // assoc %left, prec 10

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 193
    nonAssignExpression  goto state 194

state 74 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS MINUS

  187 argument: nonAssignExpression MINUS . nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression MINUS . argument  // assoc %left, prec 10

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 191
    nonAssignExpression  goto state 192

state 75 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS MULT

  191 argument: nonAssignExpression MULT . nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression MULT . argument  // assoc %left, prec 11

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 189
    nonAssignExpression  goto state 190

state 76 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS DIV

  195 argument: nonAssignExpression DIV . nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression DIV . argument  // assoc %left, prec 11

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 187
    nonAssignExpression  goto state 188

state 77 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS REMAINDER

  199 argument: nonAssignExpression REMAINDER . nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression REMAINDER . argument  // assoc %left, prec 11

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 185
    nonAssignExpression  goto state 186

state 78 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS LEFTSHIFT

  203 argument: nonAssignExpression LEFTSHIFT . nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression LEFTSHIFT . argument  // assoc %left, prec 9

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 183
    nonAssignExpression  goto state 184

state 79 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS RIGHTSHIFT

  207 argument: nonAssignExpression RIGHTSHIFT . nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression RIGHTSHIFT . argument  // assoc %left, prec 9

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 181
    nonAssignExpression  goto state 182

state 80 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS EXP

  211 argument: nonAssignExpression EXP . nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression EXP . argument  // assoc %left, prec 12

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 179
    nonAssignExpression  goto state 180

state 81 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS EQUAL

  215 argument: nonAssignExpression EQUAL . nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression EQUAL . argument  // assoc %left, prec 7

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 177
    nonAssignExpression  goto state 178

state 82 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS UNEQUAL

  219 argument: nonAssignExpression UNEQUAL . nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression UNEQUAL . argument  // assoc %left, prec 7

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 175
    nonAssignExpression  goto state 176

state 83 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS GTHAN

  223 argument: nonAssignExpression GTHAN . nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression GTHAN . argument  // assoc %left, prec 8

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 173
    nonAssignExpression  goto state 174

state 84 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS GTHANEQ

  227 argument: nonAssignExpression GTHANEQ . nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression GTHANEQ . argument  // assoc %left, prec 8

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 171
    nonAssignExpression  goto state 172

state 85 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS LTHAN

  231 argument: nonAssignExpression LTHAN . nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression LTHAN . argument  // assoc %left, prec 8

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 169
    nonAssignExpression  goto state 170

state 86 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS LTHANEQ

  235 argument: nonAssignExpression LTHANEQ . nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression LTHANEQ . argument  // assoc %left, prec 8

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 167
    nonAssignExpression  goto state 168

state 87 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS OR

  239 argument: nonAssignExpression OR . nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression OR . argument  // assoc %left, prec 1

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 165
    nonAssignExpression  goto state 166

state 88 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS AND

  243 argument: nonAssignExpression AND . nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression AND . argument  // assoc %left, prec 2

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 163
    nonAssignExpression  goto state 164

state 89 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS BITAND

  247 argument: nonAssignExpression BITAND . nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression BITAND . argument  // assoc %left, prec 6

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 161
    nonAssignExpression  goto state 162

state 90 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS BITOR

  251 argument: nonAssignExpression BITOR . nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression BITOR . argument  // assoc %left, prec 4

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 159
    nonAssignExpression  goto state 160

state 91 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS BITXOR

  255 argument: nonAssignExpression BITXOR . nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression BITXOR . argument  // assoc %left, prec 5

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 157
    nonAssignExpression  goto state 158

state 92 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS BITCLEAR

  259 argument: nonAssignExpression BITCLEAR . nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression BITCLEAR . argument  // assoc %left, prec 3

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 93
    nonAssignExpression  goto state 94

state 93 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS BITCLEAR BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression BITCLEAR argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITCLEAR, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 3

    $end          reduce using rule 261 (argument)
    ';'           reduce using rule 261 (argument)
    ADDR          reduce using rule 261 (argument)
    AFF           reduce using rule 261 (argument)
    AND           reduce using rule 261 (argument)
    ASSIGN        reduce using rule 261 (argument)
    BASICTYPE     reduce using rule 261 (argument)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 261 (argument)
    BITCLEAR      reduce using rule 261 (argument)
    BITOR         shift, and goto state 114
    BITOREQ       reduce using rule 261 (argument)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 261 (argument)
    BOOLEAN       reduce using rule 261 (argument)
    BYTENUM       reduce using rule 261 (argument)
    CASSIGN       reduce using rule 261 (argument)
    COMMA         reduce using rule 261 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 261 (argument)
    DOUBLE        reduce using rule 261 (argument)
    DPROGRAM      reduce using rule 261 (argument)
    DSTACK        reduce using rule 261 (argument)
    DSTATE        reduce using rule 261 (argument)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 261 (argument)
    FLOAT         reduce using rule 261 (argument)
    FOR           reduce using rule 261 (argument)
    FUNC          reduce using rule 261 (argument)
    GOTO          reduce using rule 261 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 261 (argument)
    IF            reduce using rule 261 (argument)
    IMPORT        reduce using rule 261 (argument)
    INFER         reduce using rule 261 (argument)
    INT           reduce using rule 261 (argument)
    LBRACE        reduce using rule 261 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 261 (argument)
    LONG          reduce using rule 261 (argument)
    LPAREN        reduce using rule 261 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 261 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 261 (argument)
    NEW           reduce using rule 261 (argument)
    NOT           reduce using rule 261 (argument)
    OR            reduce using rule 261 (argument)
    PACKAGE       reduce using rule 261 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 261 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 261 (argument)
    REM           reduce using rule 261 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 261 (argument)
    RETURN        reduce using rule 261 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 261 (argument)
    RPAREN        reduce using rule 261 (argument)
    SFUNC         reduce using rule 261 (argument)
    SPACKAGE      reduce using rule 261 (argument)
    SSTRUCT       reduce using rule 261 (argument)
    STEP          reduce using rule 261 (argument)
    STRING        reduce using rule 261 (argument)
    TAG           reduce using rule 261 (argument)
    TSTEP         reduce using rule 261 (argument)
    TYPSTRUCT     reduce using rule 261 (argument)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 261 (argument)
    VAR           reduce using rule 261 (argument)

state 94 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS BITCLEAR BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  259 argument: nonAssignExpression BITCLEAR nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITCLEAR, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 259 (argument)
    ';'           reduce using rule 259 (argument)
    ADDR          reduce using rule 259 (argument)
    AFF           reduce using rule 259 (argument)
    AND           reduce using rule 259 (argument)
    ASSIGN        reduce using rule 259 (argument)
    BASICTYPE     reduce using rule 259 (argument)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 259 (argument)
    BITCLEAR      reduce using rule 259 (argument)
    BITOR         shift, and goto state 90
    BITOREQ       reduce using rule 259 (argument)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 259 (argument)
    BOOLEAN       reduce using rule 259 (argument)
    BYTENUM       reduce using rule 259 (argument)
    CASSIGN       reduce using rule 259 (argument)
    COMMA         reduce using rule 259 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 259 (argument)
    DOUBLE        reduce using rule 259 (argument)
    DPROGRAM      reduce using rule 259 (argument)
    DSTACK        reduce using rule 259 (argument)
    DSTATE        reduce using rule 259 (argument)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 259 (argument)
    FLOAT         reduce using rule 259 (argument)
    FOR           reduce using rule 259 (argument)
    FUNC          reduce using rule 259 (argument)
    GOTO          reduce using rule 259 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 259 (argument)
    IF            reduce using rule 259 (argument)
    IMPORT        reduce using rule 259 (argument)
    INFER         reduce using rule 259 (argument)
    INT           reduce using rule 259 (argument)
    LBRACE        reduce using rule 259 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 259 (argument)
    LONG          reduce using rule 259 (argument)
    LPAREN        reduce using rule 259 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 259 (argument)
    MINUSMINUS    reduce using rule 259 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 259 (argument)
    NEW           reduce using rule 259 (argument)
    NOT           reduce using rule 259 (argument)
    OR            reduce using rule 259 (argument)
    PACKAGE       reduce using rule 259 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 259 (argument)
    PLUSPLUS      reduce using rule 259 (argument)
    RBRACE        reduce using rule 259 (argument)
    REM           reduce using rule 259 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 259 (argument)
    RETURN        reduce using rule 259 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 259 (argument)
    RPAREN        reduce using rule 259 (argument)
    SFUNC         reduce using rule 259 (argument)
    SPACKAGE      reduce using rule 259 (argument)
    SSTRUCT       reduce using rule 259 (argument)
    STEP          reduce using rule 259 (argument)
    STRING        reduce using rule 259 (argument)
    TAG           reduce using rule 259 (argument)
    TSTEP         reduce using rule 259 (argument)
    TYPSTRUCT     reduce using rule 259 (argument)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 259 (argument)
    VAR           reduce using rule 259 (argument)

state 95 // SFUNC IDENT LBRACE BOOLEAN PLUSPLUS

  118 nonAssignExpression: argument PLUSPLUS .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 13

    $end          reduce using rule 118 (nonAssignExpression)
    ';'           reduce using rule 118 (nonAssignExpression)
    ADDR          reduce using rule 118 (nonAssignExpression)
    AFF           reduce using rule 118 (nonAssignExpression)
    AND           reduce using rule 118 (nonAssignExpression)
    ASSIGN        reduce using rule 118 (nonAssignExpression)
    BASICTYPE     reduce using rule 118 (nonAssignExpression)
    BITAND        reduce using rule 118 (nonAssignExpression)
    BITANDEQ      reduce using rule 118 (nonAssignExpression)
    BITCLEAR      reduce using rule 118 (nonAssignExpression)
    BITOR         reduce using rule 118 (nonAssignExpression)
    BITOREQ       reduce using rule 118 (nonAssignExpression)
    BITXOR        reduce using rule 118 (nonAssignExpression)
    BITXOREQ      reduce using rule 118 (nonAssignExpression)
    BOOLEAN       reduce using rule 118 (nonAssignExpression)
    BYTENUM       reduce using rule 118 (nonAssignExpression)
    CASSIGN       reduce using rule 118 (nonAssignExpression)
    COMMA         reduce using rule 118 (nonAssignExpression)
    DIV           reduce using rule 118 (nonAssignExpression)
    DIVEQ         reduce using rule 118 (nonAssignExpression)
    DOUBLE        reduce using rule 118 (nonAssignExpression)
    DPROGRAM      reduce using rule 118 (nonAssignExpression)
    DSTACK        reduce using rule 118 (nonAssignExpression)
    DSTATE        reduce using rule 118 (nonAssignExpression)
    EQUAL         reduce using rule 118 (nonAssignExpression)
    EXP           reduce using rule 118 (nonAssignExpression)
    EXPEQ         reduce using rule 118 (nonAssignExpression)
    FLOAT         reduce using rule 118 (nonAssignExpression)
    FOR           reduce using rule 118 (nonAssignExpression)
    FUNC          reduce using rule 118 (nonAssignExpression)
    GOTO          reduce using rule 118 (nonAssignExpression)
    GTHAN         reduce using rule 118 (nonAssignExpression)
    GTHANEQ       reduce using rule 118 (nonAssignExpression)
    IDENT         reduce using rule 118 (nonAssignExpression)
    IF            reduce using rule 118 (nonAssignExpression)
    IMPORT        reduce using rule 118 (nonAssignExpression)
    INFER         reduce using rule 118 (nonAssignExpression)
    INT           reduce using rule 118 (nonAssignExpression)
    LBRACE        reduce using rule 118 (nonAssignExpression)
    LEFTSHIFT     reduce using rule 118 (nonAssignExpression)
    LEFTSHIFTEQ   reduce using rule 118 (nonAssignExpression)
    LONG          reduce using rule 118 (nonAssignExpression)
    LPAREN        reduce using rule 118 (nonAssignExpression)
    LTHAN         reduce using rule 118 (nonAssignExpression)
    LTHANEQ       reduce using rule 118 (nonAssignExpression)
    MINUS         reduce using rule 118 (nonAssignExpression)
    MINUSEQ       reduce using rule 118 (nonAssignExpression)
    MINUSMINUS    reduce using rule 118 (nonAssignExpression)
    MULT          reduce using rule 118 (nonAssignExpression)
    MULTEQ        reduce using rule 118 (nonAssignExpression)
    NEW           reduce using rule 118 (nonAssignExpression)
    NOT           reduce using rule 118 (nonAssignExpression)
    OR            reduce using rule 118 (nonAssignExpression)
    PACKAGE       reduce using rule 118 (nonAssignExpression)
    PLUS          reduce using rule 118 (nonAssignExpression)
    PLUSEQ        reduce using rule 118 (nonAssignExpression)
    PLUSPLUS      reduce using rule 118 (nonAssignExpression)
    RBRACE        reduce using rule 118 (nonAssignExpression)
    REM           reduce using rule 118 (nonAssignExpression)
    REMAINDER     reduce using rule 118 (nonAssignExpression)
    REMAINDEREQ   reduce using rule 118 (nonAssignExpression)
    RETURN        reduce using rule 118 (nonAssignExpression)
    RIGHTSHIFT    reduce using rule 118 (nonAssignExpression)
    RIGHTSHIFTEQ  reduce using rule 118 (nonAssignExpression)
    RPAREN        reduce using rule 118 (nonAssignExpression)
    SFUNC         reduce using rule 118 (nonAssignExpression)
    SPACKAGE      reduce using rule 118 (nonAssignExpression)
    SSTRUCT       reduce using rule 118 (nonAssignExpression)
    STEP          reduce using rule 118 (nonAssignExpression)
    STRING        reduce using rule 118 (nonAssignExpression)
    TAG           reduce using rule 118 (nonAssignExpression)
    TSTEP         reduce using rule 118 (nonAssignExpression)
    TYPSTRUCT     reduce using rule 118 (nonAssignExpression)
    UNEQUAL       reduce using rule 118 (nonAssignExpression)
    VALUE         reduce using rule 118 (nonAssignExpression)
    VAR           reduce using rule 118 (nonAssignExpression)

state 96 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS

  119 nonAssignExpression: argument MINUSMINUS .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 13

    $end          reduce using rule 119 (nonAssignExpression)
    ';'           reduce using rule 119 (nonAssignExpression)
    ADDR          reduce using rule 119 (nonAssignExpression)
    AFF           reduce using rule 119 (nonAssignExpression)
    AND           reduce using rule 119 (nonAssignExpression)
    ASSIGN        reduce using rule 119 (nonAssignExpression)
    BASICTYPE     reduce using rule 119 (nonAssignExpression)
    BITAND        reduce using rule 119 (nonAssignExpression)
    BITANDEQ      reduce using rule 119 (nonAssignExpression)
    BITCLEAR      reduce using rule 119 (nonAssignExpression)
    BITOR         reduce using rule 119 (nonAssignExpression)
    BITOREQ       reduce using rule 119 (nonAssignExpression)
    BITXOR        reduce using rule 119 (nonAssignExpression)
    BITXOREQ      reduce using rule 119 (nonAssignExpression)
    BOOLEAN       reduce using rule 119 (nonAssignExpression)
    BYTENUM       reduce using rule 119 (nonAssignExpression)
    CASSIGN       reduce using rule 119 (nonAssignExpression)
    COMMA         reduce using rule 119 (nonAssignExpression)
    DIV           reduce using rule 119 (nonAssignExpression)
    DIVEQ         reduce using rule 119 (nonAssignExpression)
    DOUBLE        reduce using rule 119 (nonAssignExpression)
    DPROGRAM      reduce using rule 119 (nonAssignExpression)
    DSTACK        reduce using rule 119 (nonAssignExpression)
    DSTATE        reduce using rule 119 (nonAssignExpression)
    EQUAL         reduce using rule 119 (nonAssignExpression)
    EXP           reduce using rule 119 (nonAssignExpression)
    EXPEQ         reduce using rule 119 (nonAssignExpression)
    FLOAT         reduce using rule 119 (nonAssignExpression)
    FOR           reduce using rule 119 (nonAssignExpression)
    FUNC          reduce using rule 119 (nonAssignExpression)
    GOTO          reduce using rule 119 (nonAssignExpression)
    GTHAN         reduce using rule 119 (nonAssignExpression)
    GTHANEQ       reduce using rule 119 (nonAssignExpression)
    IDENT         reduce using rule 119 (nonAssignExpression)
    IF            reduce using rule 119 (nonAssignExpression)
    IMPORT        reduce using rule 119 (nonAssignExpression)
    INFER         reduce using rule 119 (nonAssignExpression)
    INT           reduce using rule 119 (nonAssignExpression)
    LBRACE        reduce using rule 119 (nonAssignExpression)
    LEFTSHIFT     reduce using rule 119 (nonAssignExpression)
    LEFTSHIFTEQ   reduce using rule 119 (nonAssignExpression)
    LONG          reduce using rule 119 (nonAssignExpression)
    LPAREN        reduce using rule 119 (nonAssignExpression)
    LTHAN         reduce using rule 119 (nonAssignExpression)
    LTHANEQ       reduce using rule 119 (nonAssignExpression)
    MINUS         reduce using rule 119 (nonAssignExpression)
    MINUSEQ       reduce using rule 119 (nonAssignExpression)
    MINUSMINUS    reduce using rule 119 (nonAssignExpression)
    MULT          reduce using rule 119 (nonAssignExpression)
    MULTEQ        reduce using rule 119 (nonAssignExpression)
    NEW           reduce using rule 119 (nonAssignExpression)
    NOT           reduce using rule 119 (nonAssignExpression)
    OR            reduce using rule 119 (nonAssignExpression)
    PACKAGE       reduce using rule 119 (nonAssignExpression)
    PLUS          reduce using rule 119 (nonAssignExpression)
    PLUSEQ        reduce using rule 119 (nonAssignExpression)
    PLUSPLUS      reduce using rule 119 (nonAssignExpression)
    RBRACE        reduce using rule 119 (nonAssignExpression)
    REM           reduce using rule 119 (nonAssignExpression)
    REMAINDER     reduce using rule 119 (nonAssignExpression)
    REMAINDEREQ   reduce using rule 119 (nonAssignExpression)
    RETURN        reduce using rule 119 (nonAssignExpression)
    RIGHTSHIFT    reduce using rule 119 (nonAssignExpression)
    RIGHTSHIFTEQ  reduce using rule 119 (nonAssignExpression)
    RPAREN        reduce using rule 119 (nonAssignExpression)
    SFUNC         reduce using rule 119 (nonAssignExpression)
    SPACKAGE      reduce using rule 119 (nonAssignExpression)
    SSTRUCT       reduce using rule 119 (nonAssignExpression)
    STEP          reduce using rule 119 (nonAssignExpression)
    STRING        reduce using rule 119 (nonAssignExpression)
    TAG           reduce using rule 119 (nonAssignExpression)
    TSTEP         reduce using rule 119 (nonAssignExpression)
    TYPSTRUCT     reduce using rule 119 (nonAssignExpression)
    UNEQUAL       reduce using rule 119 (nonAssignExpression)
    VALUE         reduce using rule 119 (nonAssignExpression)
    VAR           reduce using rule 119 (nonAssignExpression)

state 97 // SFUNC IDENT LBRACE BOOLEAN PLUS

  182 argument: argument PLUS . argument  // assoc %left, prec 10
  184 argument: argument PLUS . nonAssignExpression  // assoc %left, prec 10

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 155
    nonAssignExpression  goto state 156

state 98 // SFUNC IDENT LBRACE BOOLEAN MINUS

  186 argument: argument MINUS . argument  // assoc %left, prec 10
  188 argument: argument MINUS . nonAssignExpression  // assoc %left, prec 10

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 153
    nonAssignExpression  goto state 154

state 99 // SFUNC IDENT LBRACE BOOLEAN MULT

  190 argument: argument MULT . argument  // assoc %left, prec 11
  192 argument: argument MULT . nonAssignExpression  // assoc %left, prec 11

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 151
    nonAssignExpression  goto state 152

state 100 // SFUNC IDENT LBRACE BOOLEAN DIV

  194 argument: argument DIV . argument  // assoc %left, prec 11
  196 argument: argument DIV . nonAssignExpression  // assoc %left, prec 11

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 149
    nonAssignExpression  goto state 150

state 101 // SFUNC IDENT LBRACE BOOLEAN REMAINDER

  198 argument: argument REMAINDER . argument  // assoc %left, prec 11
  200 argument: argument REMAINDER . nonAssignExpression  // assoc %left, prec 11

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 147
    nonAssignExpression  goto state 148

state 102 // SFUNC IDENT LBRACE BOOLEAN LEFTSHIFT

  202 argument: argument LEFTSHIFT . argument  // assoc %left, prec 9
  204 argument: argument LEFTSHIFT . nonAssignExpression  // assoc %left, prec 9

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 145
    nonAssignExpression  goto state 146

state 103 // SFUNC IDENT LBRACE BOOLEAN RIGHTSHIFT

  206 argument: argument RIGHTSHIFT . argument  // assoc %left, prec 9
  208 argument: argument RIGHTSHIFT . nonAssignExpression  // assoc %left, prec 9

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 143
    nonAssignExpression  goto state 144

state 104 // SFUNC IDENT LBRACE BOOLEAN EXP

  210 argument: argument EXP . argument  // assoc %left, prec 12
  212 argument: argument EXP . nonAssignExpression  // assoc %left, prec 12

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 141
    nonAssignExpression  goto state 142

state 105 // SFUNC IDENT LBRACE BOOLEAN EQUAL

  214 argument: argument EQUAL . argument  // assoc %left, prec 7
  216 argument: argument EQUAL . nonAssignExpression  // assoc %left, prec 7

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 139
    nonAssignExpression  goto state 140

state 106 // SFUNC IDENT LBRACE BOOLEAN UNEQUAL

  218 argument: argument UNEQUAL . argument  // assoc %left, prec 7
  220 argument: argument UNEQUAL . nonAssignExpression  // assoc %left, prec 7

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 137
    nonAssignExpression  goto state 138

state 107 // SFUNC IDENT LBRACE BOOLEAN GTHAN

  222 argument: argument GTHAN . argument  // assoc %left, prec 8
  224 argument: argument GTHAN . nonAssignExpression  // assoc %left, prec 8

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 135
    nonAssignExpression  goto state 136

state 108 // SFUNC IDENT LBRACE BOOLEAN GTHANEQ

  226 argument: argument GTHANEQ . argument  // assoc %left, prec 8
  228 argument: argument GTHANEQ . nonAssignExpression  // assoc %left, prec 8

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 133
    nonAssignExpression  goto state 134

state 109 // SFUNC IDENT LBRACE BOOLEAN LTHAN

  230 argument: argument LTHAN . argument  // assoc %left, prec 8
  232 argument: argument LTHAN . nonAssignExpression  // assoc %left, prec 8

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 131
    nonAssignExpression  goto state 132

state 110 // SFUNC IDENT LBRACE BOOLEAN LTHANEQ

  234 argument: argument LTHANEQ . argument  // assoc %left, prec 8
  236 argument: argument LTHANEQ . nonAssignExpression  // assoc %left, prec 8

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 129
    nonAssignExpression  goto state 130

state 111 // SFUNC IDENT LBRACE BOOLEAN OR

  238 argument: argument OR . argument  // assoc %left, prec 1
  240 argument: argument OR . nonAssignExpression  // assoc %left, prec 1

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 127
    nonAssignExpression  goto state 128

state 112 // SFUNC IDENT LBRACE BOOLEAN AND

  242 argument: argument AND . argument  // assoc %left, prec 2
  244 argument: argument AND . nonAssignExpression  // assoc %left, prec 2

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 125
    nonAssignExpression  goto state 126

state 113 // SFUNC IDENT LBRACE BOOLEAN BITAND

  246 argument: argument BITAND . argument  // assoc %left, prec 6
  248 argument: argument BITAND . nonAssignExpression  // assoc %left, prec 6

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 123
    nonAssignExpression  goto state 124

state 114 // SFUNC IDENT LBRACE BOOLEAN BITOR

  250 argument: argument BITOR . argument  // assoc %left, prec 4
  252 argument: argument BITOR . nonAssignExpression  // assoc %left, prec 4

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 121
    nonAssignExpression  goto state 122

state 115 // SFUNC IDENT LBRACE BOOLEAN BITXOR

  254 argument: argument BITXOR . argument  // assoc %left, prec 5
  256 argument: argument BITXOR . nonAssignExpression  // assoc %left, prec 5

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 119
    nonAssignExpression  goto state 120

state 116 // SFUNC IDENT LBRACE BOOLEAN BITCLEAR

  258 argument: argument BITCLEAR . argument  // assoc %left, prec 3
  260 argument: argument BITCLEAR . nonAssignExpression  // assoc %left, prec 3

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 117
    nonAssignExpression  goto state 118

state 117 // SFUNC IDENT LBRACE BOOLEAN BITCLEAR BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  258 argument: argument BITCLEAR argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITCLEAR, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 258 (argument)
    ';'           reduce using rule 258 (argument)
    ADDR          reduce using rule 258 (argument)
    AFF           reduce using rule 258 (argument)
    AND           reduce using rule 258 (argument)
    ASSIGN        reduce using rule 258 (argument)
    BASICTYPE     reduce using rule 258 (argument)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 258 (argument)
    BITCLEAR      reduce using rule 258 (argument)
    BITOR         shift, and goto state 114
    BITOREQ       reduce using rule 258 (argument)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 258 (argument)
    BOOLEAN       reduce using rule 258 (argument)
    BYTENUM       reduce using rule 258 (argument)
    CASSIGN       reduce using rule 258 (argument)
    COMMA         reduce using rule 258 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 258 (argument)
    DOUBLE        reduce using rule 258 (argument)
    DPROGRAM      reduce using rule 258 (argument)
    DSTACK        reduce using rule 258 (argument)
    DSTATE        reduce using rule 258 (argument)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 258 (argument)
    FLOAT         reduce using rule 258 (argument)
    FOR           reduce using rule 258 (argument)
    FUNC          reduce using rule 258 (argument)
    GOTO          reduce using rule 258 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 258 (argument)
    IF            reduce using rule 258 (argument)
    IMPORT        reduce using rule 258 (argument)
    INFER         reduce using rule 258 (argument)
    INT           reduce using rule 258 (argument)
    LBRACE        reduce using rule 258 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 258 (argument)
    LONG          reduce using rule 258 (argument)
    LPAREN        reduce using rule 258 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 258 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 258 (argument)
    NEW           reduce using rule 258 (argument)
    NOT           reduce using rule 258 (argument)
    OR            reduce using rule 258 (argument)
    PACKAGE       reduce using rule 258 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 258 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 258 (argument)
    REM           reduce using rule 258 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 258 (argument)
    RETURN        reduce using rule 258 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 258 (argument)
    RPAREN        reduce using rule 258 (argument)
    SFUNC         reduce using rule 258 (argument)
    SPACKAGE      reduce using rule 258 (argument)
    SSTRUCT       reduce using rule 258 (argument)
    STEP          reduce using rule 258 (argument)
    STRING        reduce using rule 258 (argument)
    TAG           reduce using rule 258 (argument)
    TSTEP         reduce using rule 258 (argument)
    TYPSTRUCT     reduce using rule 258 (argument)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 258 (argument)
    VAR           reduce using rule 258 (argument)

state 118 // SFUNC IDENT LBRACE BOOLEAN BITCLEAR BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  260 argument: argument BITCLEAR nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITCLEAR, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 260 (argument)
    ';'           reduce using rule 260 (argument)
    ADDR          reduce using rule 260 (argument)
    AFF           reduce using rule 260 (argument)
    AND           reduce using rule 260 (argument)
    ASSIGN        reduce using rule 260 (argument)
    BASICTYPE     reduce using rule 260 (argument)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 260 (argument)
    BITCLEAR      reduce using rule 260 (argument)
    BITOR         shift, and goto state 90
    BITOREQ       reduce using rule 260 (argument)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 260 (argument)
    BOOLEAN       reduce using rule 260 (argument)
    BYTENUM       reduce using rule 260 (argument)
    CASSIGN       reduce using rule 260 (argument)
    COMMA         reduce using rule 260 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 260 (argument)
    DOUBLE        reduce using rule 260 (argument)
    DPROGRAM      reduce using rule 260 (argument)
    DSTACK        reduce using rule 260 (argument)
    DSTATE        reduce using rule 260 (argument)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 260 (argument)
    FLOAT         reduce using rule 260 (argument)
    FOR           reduce using rule 260 (argument)
    FUNC          reduce using rule 260 (argument)
    GOTO          reduce using rule 260 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 260 (argument)
    IF            reduce using rule 260 (argument)
    IMPORT        reduce using rule 260 (argument)
    INFER         reduce using rule 260 (argument)
    INT           reduce using rule 260 (argument)
    LBRACE        reduce using rule 260 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 260 (argument)
    LONG          reduce using rule 260 (argument)
    LPAREN        reduce using rule 260 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 260 (argument)
    MINUSMINUS    reduce using rule 260 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 260 (argument)
    NEW           reduce using rule 260 (argument)
    NOT           reduce using rule 260 (argument)
    OR            reduce using rule 260 (argument)
    PACKAGE       reduce using rule 260 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 260 (argument)
    PLUSPLUS      reduce using rule 260 (argument)
    RBRACE        reduce using rule 260 (argument)
    REM           reduce using rule 260 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 260 (argument)
    RETURN        reduce using rule 260 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 260 (argument)
    RPAREN        reduce using rule 260 (argument)
    SFUNC         reduce using rule 260 (argument)
    SPACKAGE      reduce using rule 260 (argument)
    SSTRUCT       reduce using rule 260 (argument)
    STEP          reduce using rule 260 (argument)
    STRING        reduce using rule 260 (argument)
    TAG           reduce using rule 260 (argument)
    TSTEP         reduce using rule 260 (argument)
    TYPSTRUCT     reduce using rule 260 (argument)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 260 (argument)
    VAR           reduce using rule 260 (argument)

state 119 // SFUNC IDENT LBRACE BOOLEAN BITXOR BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  254 argument: argument BITXOR argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 254 (argument)
    ';'           reduce using rule 254 (argument)
    ADDR          reduce using rule 254 (argument)
    AFF           reduce using rule 254 (argument)
    AND           reduce using rule 254 (argument)
    ASSIGN        reduce using rule 254 (argument)
    BASICTYPE     reduce using rule 254 (argument)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 254 (argument)
    BITCLEAR      reduce using rule 254 (argument)
    BITOR         reduce using rule 254 (argument)
    BITOREQ       reduce using rule 254 (argument)
    BITXOR        reduce using rule 254 (argument)
    BITXOREQ      reduce using rule 254 (argument)
    BOOLEAN       reduce using rule 254 (argument)
    BYTENUM       reduce using rule 254 (argument)
    CASSIGN       reduce using rule 254 (argument)
    COMMA         reduce using rule 254 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 254 (argument)
    DOUBLE        reduce using rule 254 (argument)
    DPROGRAM      reduce using rule 254 (argument)
    DSTACK        reduce using rule 254 (argument)
    DSTATE        reduce using rule 254 (argument)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 254 (argument)
    FLOAT         reduce using rule 254 (argument)
    FOR           reduce using rule 254 (argument)
    FUNC          reduce using rule 254 (argument)
    GOTO          reduce using rule 254 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 254 (argument)
    IF            reduce using rule 254 (argument)
    IMPORT        reduce using rule 254 (argument)
    INFER         reduce using rule 254 (argument)
    INT           reduce using rule 254 (argument)
    LBRACE        reduce using rule 254 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 254 (argument)
    LONG          reduce using rule 254 (argument)
    LPAREN        reduce using rule 254 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 254 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 254 (argument)
    NEW           reduce using rule 254 (argument)
    NOT           reduce using rule 254 (argument)
    OR            reduce using rule 254 (argument)
    PACKAGE       reduce using rule 254 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 254 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 254 (argument)
    REM           reduce using rule 254 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 254 (argument)
    RETURN        reduce using rule 254 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 254 (argument)
    RPAREN        reduce using rule 254 (argument)
    SFUNC         reduce using rule 254 (argument)
    SPACKAGE      reduce using rule 254 (argument)
    SSTRUCT       reduce using rule 254 (argument)
    STEP          reduce using rule 254 (argument)
    STRING        reduce using rule 254 (argument)
    TAG           reduce using rule 254 (argument)
    TSTEP         reduce using rule 254 (argument)
    TYPSTRUCT     reduce using rule 254 (argument)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 254 (argument)
    VAR           reduce using rule 254 (argument)

state 120 // SFUNC IDENT LBRACE BOOLEAN BITXOR BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  256 argument: argument BITXOR nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 256 (argument)
    ';'           reduce using rule 256 (argument)
    ADDR          reduce using rule 256 (argument)
    AFF           reduce using rule 256 (argument)
    AND           reduce using rule 256 (argument)
    ASSIGN        reduce using rule 256 (argument)
    BASICTYPE     reduce using rule 256 (argument)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 256 (argument)
    BITCLEAR      reduce using rule 256 (argument)
    BITOR         reduce using rule 256 (argument)
    BITOREQ       reduce using rule 256 (argument)
    BITXOR        reduce using rule 256 (argument)
    BITXOREQ      reduce using rule 256 (argument)
    BOOLEAN       reduce using rule 256 (argument)
    BYTENUM       reduce using rule 256 (argument)
    CASSIGN       reduce using rule 256 (argument)
    COMMA         reduce using rule 256 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 256 (argument)
    DOUBLE        reduce using rule 256 (argument)
    DPROGRAM      reduce using rule 256 (argument)
    DSTACK        reduce using rule 256 (argument)
    DSTATE        reduce using rule 256 (argument)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 256 (argument)
    FLOAT         reduce using rule 256 (argument)
    FOR           reduce using rule 256 (argument)
    FUNC          reduce using rule 256 (argument)
    GOTO          reduce using rule 256 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 256 (argument)
    IF            reduce using rule 256 (argument)
    IMPORT        reduce using rule 256 (argument)
    INFER         reduce using rule 256 (argument)
    INT           reduce using rule 256 (argument)
    LBRACE        reduce using rule 256 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 256 (argument)
    LONG          reduce using rule 256 (argument)
    LPAREN        reduce using rule 256 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 256 (argument)
    MINUSMINUS    reduce using rule 256 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 256 (argument)
    NEW           reduce using rule 256 (argument)
    NOT           reduce using rule 256 (argument)
    OR            reduce using rule 256 (argument)
    PACKAGE       reduce using rule 256 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 256 (argument)
    PLUSPLUS      reduce using rule 256 (argument)
    RBRACE        reduce using rule 256 (argument)
    REM           reduce using rule 256 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 256 (argument)
    RETURN        reduce using rule 256 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 256 (argument)
    RPAREN        reduce using rule 256 (argument)
    SFUNC         reduce using rule 256 (argument)
    SPACKAGE      reduce using rule 256 (argument)
    SSTRUCT       reduce using rule 256 (argument)
    STEP          reduce using rule 256 (argument)
    STRING        reduce using rule 256 (argument)
    TAG           reduce using rule 256 (argument)
    TSTEP         reduce using rule 256 (argument)
    TYPSTRUCT     reduce using rule 256 (argument)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 256 (argument)
    VAR           reduce using rule 256 (argument)

state 121 // SFUNC IDENT LBRACE BOOLEAN BITOR BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  250 argument: argument BITOR argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 250 (argument)
    ';'           reduce using rule 250 (argument)
    ADDR          reduce using rule 250 (argument)
    AFF           reduce using rule 250 (argument)
    AND           reduce using rule 250 (argument)
    ASSIGN        reduce using rule 250 (argument)
    BASICTYPE     reduce using rule 250 (argument)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 250 (argument)
    BITCLEAR      reduce using rule 250 (argument)
    BITOR         reduce using rule 250 (argument)
    BITOREQ       reduce using rule 250 (argument)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 250 (argument)
    BOOLEAN       reduce using rule 250 (argument)
    BYTENUM       reduce using rule 250 (argument)
    CASSIGN       reduce using rule 250 (argument)
    COMMA         reduce using rule 250 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 250 (argument)
    DOUBLE        reduce using rule 250 (argument)
    DPROGRAM      reduce using rule 250 (argument)
    DSTACK        reduce using rule 250 (argument)
    DSTATE        reduce using rule 250 (argument)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 250 (argument)
    FLOAT         reduce using rule 250 (argument)
    FOR           reduce using rule 250 (argument)
    FUNC          reduce using rule 250 (argument)
    GOTO          reduce using rule 250 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 250 (argument)
    IF            reduce using rule 250 (argument)
    IMPORT        reduce using rule 250 (argument)
    INFER         reduce using rule 250 (argument)
    INT           reduce using rule 250 (argument)
    LBRACE        reduce using rule 250 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 250 (argument)
    LONG          reduce using rule 250 (argument)
    LPAREN        reduce using rule 250 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 250 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 250 (argument)
    NEW           reduce using rule 250 (argument)
    NOT           reduce using rule 250 (argument)
    OR            reduce using rule 250 (argument)
    PACKAGE       reduce using rule 250 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 250 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 250 (argument)
    REM           reduce using rule 250 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 250 (argument)
    RETURN        reduce using rule 250 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 250 (argument)
    RPAREN        reduce using rule 250 (argument)
    SFUNC         reduce using rule 250 (argument)
    SPACKAGE      reduce using rule 250 (argument)
    SSTRUCT       reduce using rule 250 (argument)
    STEP          reduce using rule 250 (argument)
    STRING        reduce using rule 250 (argument)
    TAG           reduce using rule 250 (argument)
    TSTEP         reduce using rule 250 (argument)
    TYPSTRUCT     reduce using rule 250 (argument)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 250 (argument)
    VAR           reduce using rule 250 (argument)

state 122 // SFUNC IDENT LBRACE BOOLEAN BITOR BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  252 argument: argument BITOR nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 252 (argument)
    ';'           reduce using rule 252 (argument)
    ADDR          reduce using rule 252 (argument)
    AFF           reduce using rule 252 (argument)
    AND           reduce using rule 252 (argument)
    ASSIGN        reduce using rule 252 (argument)
    BASICTYPE     reduce using rule 252 (argument)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 252 (argument)
    BITCLEAR      reduce using rule 252 (argument)
    BITOR         reduce using rule 252 (argument)
    BITOREQ       reduce using rule 252 (argument)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 252 (argument)
    BOOLEAN       reduce using rule 252 (argument)
    BYTENUM       reduce using rule 252 (argument)
    CASSIGN       reduce using rule 252 (argument)
    COMMA         reduce using rule 252 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 252 (argument)
    DOUBLE        reduce using rule 252 (argument)
    DPROGRAM      reduce using rule 252 (argument)
    DSTACK        reduce using rule 252 (argument)
    DSTATE        reduce using rule 252 (argument)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 252 (argument)
    FLOAT         reduce using rule 252 (argument)
    FOR           reduce using rule 252 (argument)
    FUNC          reduce using rule 252 (argument)
    GOTO          reduce using rule 252 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 252 (argument)
    IF            reduce using rule 252 (argument)
    IMPORT        reduce using rule 252 (argument)
    INFER         reduce using rule 252 (argument)
    INT           reduce using rule 252 (argument)
    LBRACE        reduce using rule 252 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 252 (argument)
    LONG          reduce using rule 252 (argument)
    LPAREN        reduce using rule 252 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 252 (argument)
    MINUSMINUS    reduce using rule 252 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 252 (argument)
    NEW           reduce using rule 252 (argument)
    NOT           reduce using rule 252 (argument)
    OR            reduce using rule 252 (argument)
    PACKAGE       reduce using rule 252 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 252 (argument)
    PLUSPLUS      reduce using rule 252 (argument)
    RBRACE        reduce using rule 252 (argument)
    REM           reduce using rule 252 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 252 (argument)
    RETURN        reduce using rule 252 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 252 (argument)
    RPAREN        reduce using rule 252 (argument)
    SFUNC         reduce using rule 252 (argument)
    SPACKAGE      reduce using rule 252 (argument)
    SSTRUCT       reduce using rule 252 (argument)
    STEP          reduce using rule 252 (argument)
    STRING        reduce using rule 252 (argument)
    TAG           reduce using rule 252 (argument)
    TSTEP         reduce using rule 252 (argument)
    TYPSTRUCT     reduce using rule 252 (argument)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 252 (argument)
    VAR           reduce using rule 252 (argument)

state 123 // SFUNC IDENT LBRACE BOOLEAN BITAND BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  246 argument: argument BITAND argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 246 (argument)
    ';'           reduce using rule 246 (argument)
    ADDR          reduce using rule 246 (argument)
    AFF           reduce using rule 246 (argument)
    AND           reduce using rule 246 (argument)
    ASSIGN        reduce using rule 246 (argument)
    BASICTYPE     reduce using rule 246 (argument)
    BITAND        reduce using rule 246 (argument)
    BITANDEQ      reduce using rule 246 (argument)
    BITCLEAR      reduce using rule 246 (argument)
    BITOR         reduce using rule 246 (argument)
    BITOREQ       reduce using rule 246 (argument)
    BITXOR        reduce using rule 246 (argument)
    BITXOREQ      reduce using rule 246 (argument)
    BOOLEAN       reduce using rule 246 (argument)
    BYTENUM       reduce using rule 246 (argument)
    CASSIGN       reduce using rule 246 (argument)
    COMMA         reduce using rule 246 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 246 (argument)
    DOUBLE        reduce using rule 246 (argument)
    DPROGRAM      reduce using rule 246 (argument)
    DSTACK        reduce using rule 246 (argument)
    DSTATE        reduce using rule 246 (argument)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 246 (argument)
    FLOAT         reduce using rule 246 (argument)
    FOR           reduce using rule 246 (argument)
    FUNC          reduce using rule 246 (argument)
    GOTO          reduce using rule 246 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 246 (argument)
    IF            reduce using rule 246 (argument)
    IMPORT        reduce using rule 246 (argument)
    INFER         reduce using rule 246 (argument)
    INT           reduce using rule 246 (argument)
    LBRACE        reduce using rule 246 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 246 (argument)
    LONG          reduce using rule 246 (argument)
    LPAREN        reduce using rule 246 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 246 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 246 (argument)
    NEW           reduce using rule 246 (argument)
    NOT           reduce using rule 246 (argument)
    OR            reduce using rule 246 (argument)
    PACKAGE       reduce using rule 246 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 246 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 246 (argument)
    REM           reduce using rule 246 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 246 (argument)
    RETURN        reduce using rule 246 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 246 (argument)
    RPAREN        reduce using rule 246 (argument)
    SFUNC         reduce using rule 246 (argument)
    SPACKAGE      reduce using rule 246 (argument)
    SSTRUCT       reduce using rule 246 (argument)
    STEP          reduce using rule 246 (argument)
    STRING        reduce using rule 246 (argument)
    TAG           reduce using rule 246 (argument)
    TSTEP         reduce using rule 246 (argument)
    TYPSTRUCT     reduce using rule 246 (argument)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 246 (argument)
    VAR           reduce using rule 246 (argument)

state 124 // SFUNC IDENT LBRACE BOOLEAN BITAND BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  248 argument: argument BITAND nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 248 (argument)
    ';'           reduce using rule 248 (argument)
    ADDR          reduce using rule 248 (argument)
    AFF           reduce using rule 248 (argument)
    AND           reduce using rule 248 (argument)
    ASSIGN        reduce using rule 248 (argument)
    BASICTYPE     reduce using rule 248 (argument)
    BITAND        reduce using rule 248 (argument)
    BITANDEQ      reduce using rule 248 (argument)
    BITCLEAR      reduce using rule 248 (argument)
    BITOR         reduce using rule 248 (argument)
    BITOREQ       reduce using rule 248 (argument)
    BITXOR        reduce using rule 248 (argument)
    BITXOREQ      reduce using rule 248 (argument)
    BOOLEAN       reduce using rule 248 (argument)
    BYTENUM       reduce using rule 248 (argument)
    CASSIGN       reduce using rule 248 (argument)
    COMMA         reduce using rule 248 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 248 (argument)
    DOUBLE        reduce using rule 248 (argument)
    DPROGRAM      reduce using rule 248 (argument)
    DSTACK        reduce using rule 248 (argument)
    DSTATE        reduce using rule 248 (argument)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 248 (argument)
    FLOAT         reduce using rule 248 (argument)
    FOR           reduce using rule 248 (argument)
    FUNC          reduce using rule 248 (argument)
    GOTO          reduce using rule 248 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 248 (argument)
    IF            reduce using rule 248 (argument)
    IMPORT        reduce using rule 248 (argument)
    INFER         reduce using rule 248 (argument)
    INT           reduce using rule 248 (argument)
    LBRACE        reduce using rule 248 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 248 (argument)
    LONG          reduce using rule 248 (argument)
    LPAREN        reduce using rule 248 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 248 (argument)
    MINUSMINUS    reduce using rule 248 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 248 (argument)
    NEW           reduce using rule 248 (argument)
    NOT           reduce using rule 248 (argument)
    OR            reduce using rule 248 (argument)
    PACKAGE       reduce using rule 248 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 248 (argument)
    PLUSPLUS      reduce using rule 248 (argument)
    RBRACE        reduce using rule 248 (argument)
    REM           reduce using rule 248 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 248 (argument)
    RETURN        reduce using rule 248 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 248 (argument)
    RPAREN        reduce using rule 248 (argument)
    SFUNC         reduce using rule 248 (argument)
    SPACKAGE      reduce using rule 248 (argument)
    SSTRUCT       reduce using rule 248 (argument)
    STEP          reduce using rule 248 (argument)
    STRING        reduce using rule 248 (argument)
    TAG           reduce using rule 248 (argument)
    TSTEP         reduce using rule 248 (argument)
    TYPSTRUCT     reduce using rule 248 (argument)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 248 (argument)
    VAR           reduce using rule 248 (argument)

state 125 // SFUNC IDENT LBRACE BOOLEAN AND BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  242 argument: argument AND argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 242 (argument)
    ';'           reduce using rule 242 (argument)
    ADDR          reduce using rule 242 (argument)
    AFF           reduce using rule 242 (argument)
    AND           reduce using rule 242 (argument)
    ASSIGN        reduce using rule 242 (argument)
    BASICTYPE     reduce using rule 242 (argument)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 242 (argument)
    BITCLEAR      shift, and goto state 116
    BITOR         shift, and goto state 114
    BITOREQ       reduce using rule 242 (argument)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 242 (argument)
    BOOLEAN       reduce using rule 242 (argument)
    BYTENUM       reduce using rule 242 (argument)
    CASSIGN       reduce using rule 242 (argument)
    COMMA         reduce using rule 242 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 242 (argument)
    DOUBLE        reduce using rule 242 (argument)
    DPROGRAM      reduce using rule 242 (argument)
    DSTACK        reduce using rule 242 (argument)
    DSTATE        reduce using rule 242 (argument)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 242 (argument)
    FLOAT         reduce using rule 242 (argument)
    FOR           reduce using rule 242 (argument)
    FUNC          reduce using rule 242 (argument)
    GOTO          reduce using rule 242 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 242 (argument)
    IF            reduce using rule 242 (argument)
    IMPORT        reduce using rule 242 (argument)
    INFER         reduce using rule 242 (argument)
    INT           reduce using rule 242 (argument)
    LBRACE        reduce using rule 242 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 242 (argument)
    LONG          reduce using rule 242 (argument)
    LPAREN        reduce using rule 242 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 242 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 242 (argument)
    NEW           reduce using rule 242 (argument)
    NOT           reduce using rule 242 (argument)
    OR            reduce using rule 242 (argument)
    PACKAGE       reduce using rule 242 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 242 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 242 (argument)
    REM           reduce using rule 242 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 242 (argument)
    RETURN        reduce using rule 242 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 242 (argument)
    RPAREN        reduce using rule 242 (argument)
    SFUNC         reduce using rule 242 (argument)
    SPACKAGE      reduce using rule 242 (argument)
    SSTRUCT       reduce using rule 242 (argument)
    STEP          reduce using rule 242 (argument)
    STRING        reduce using rule 242 (argument)
    TAG           reduce using rule 242 (argument)
    TSTEP         reduce using rule 242 (argument)
    TYPSTRUCT     reduce using rule 242 (argument)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 242 (argument)
    VAR           reduce using rule 242 (argument)

state 126 // SFUNC IDENT LBRACE BOOLEAN AND BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  244 argument: argument AND nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 244 (argument)
    ';'           reduce using rule 244 (argument)
    ADDR          reduce using rule 244 (argument)
    AFF           reduce using rule 244 (argument)
    AND           reduce using rule 244 (argument)
    ASSIGN        reduce using rule 244 (argument)
    BASICTYPE     reduce using rule 244 (argument)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 244 (argument)
    BITCLEAR      shift, and goto state 92
    BITOR         shift, and goto state 90
    BITOREQ       reduce using rule 244 (argument)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 244 (argument)
    BOOLEAN       reduce using rule 244 (argument)
    BYTENUM       reduce using rule 244 (argument)
    CASSIGN       reduce using rule 244 (argument)
    COMMA         reduce using rule 244 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 244 (argument)
    DOUBLE        reduce using rule 244 (argument)
    DPROGRAM      reduce using rule 244 (argument)
    DSTACK        reduce using rule 244 (argument)
    DSTATE        reduce using rule 244 (argument)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 244 (argument)
    FLOAT         reduce using rule 244 (argument)
    FOR           reduce using rule 244 (argument)
    FUNC          reduce using rule 244 (argument)
    GOTO          reduce using rule 244 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 244 (argument)
    IF            reduce using rule 244 (argument)
    IMPORT        reduce using rule 244 (argument)
    INFER         reduce using rule 244 (argument)
    INT           reduce using rule 244 (argument)
    LBRACE        reduce using rule 244 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 244 (argument)
    LONG          reduce using rule 244 (argument)
    LPAREN        reduce using rule 244 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 244 (argument)
    MINUSMINUS    reduce using rule 244 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 244 (argument)
    NEW           reduce using rule 244 (argument)
    NOT           reduce using rule 244 (argument)
    OR            reduce using rule 244 (argument)
    PACKAGE       reduce using rule 244 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 244 (argument)
    PLUSPLUS      reduce using rule 244 (argument)
    RBRACE        reduce using rule 244 (argument)
    REM           reduce using rule 244 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 244 (argument)
    RETURN        reduce using rule 244 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 244 (argument)
    RPAREN        reduce using rule 244 (argument)
    SFUNC         reduce using rule 244 (argument)
    SPACKAGE      reduce using rule 244 (argument)
    SSTRUCT       reduce using rule 244 (argument)
    STEP          reduce using rule 244 (argument)
    STRING        reduce using rule 244 (argument)
    TAG           reduce using rule 244 (argument)
    TSTEP         reduce using rule 244 (argument)
    TYPSTRUCT     reduce using rule 244 (argument)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 244 (argument)
    VAR           reduce using rule 244 (argument)

state 127 // SFUNC IDENT LBRACE BOOLEAN OR BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  238 argument: argument OR argument .  [$end, ';', ADDR, AFF, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 238 (argument)
    ';'           reduce using rule 238 (argument)
    ADDR          reduce using rule 238 (argument)
    AFF           reduce using rule 238 (argument)
    AND           shift, and goto state 112
    ASSIGN        reduce using rule 238 (argument)
    BASICTYPE     reduce using rule 238 (argument)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 238 (argument)
    BITCLEAR      shift, and goto state 116
    BITOR         shift, and goto state 114
    BITOREQ       reduce using rule 238 (argument)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 238 (argument)
    BOOLEAN       reduce using rule 238 (argument)
    BYTENUM       reduce using rule 238 (argument)
    CASSIGN       reduce using rule 238 (argument)
    COMMA         reduce using rule 238 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 238 (argument)
    DOUBLE        reduce using rule 238 (argument)
    DPROGRAM      reduce using rule 238 (argument)
    DSTACK        reduce using rule 238 (argument)
    DSTATE        reduce using rule 238 (argument)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 238 (argument)
    FLOAT         reduce using rule 238 (argument)
    FOR           reduce using rule 238 (argument)
    FUNC          reduce using rule 238 (argument)
    GOTO          reduce using rule 238 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 238 (argument)
    IF            reduce using rule 238 (argument)
    IMPORT        reduce using rule 238 (argument)
    INFER         reduce using rule 238 (argument)
    INT           reduce using rule 238 (argument)
    LBRACE        reduce using rule 238 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 238 (argument)
    LONG          reduce using rule 238 (argument)
    LPAREN        reduce using rule 238 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 238 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 238 (argument)
    NEW           reduce using rule 238 (argument)
    NOT           reduce using rule 238 (argument)
    OR            reduce using rule 238 (argument)
    PACKAGE       reduce using rule 238 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 238 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 238 (argument)
    REM           reduce using rule 238 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 238 (argument)
    RETURN        reduce using rule 238 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 238 (argument)
    RPAREN        reduce using rule 238 (argument)
    SFUNC         reduce using rule 238 (argument)
    SPACKAGE      reduce using rule 238 (argument)
    SSTRUCT       reduce using rule 238 (argument)
    STEP          reduce using rule 238 (argument)
    STRING        reduce using rule 238 (argument)
    TAG           reduce using rule 238 (argument)
    TSTEP         reduce using rule 238 (argument)
    TYPSTRUCT     reduce using rule 238 (argument)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 238 (argument)
    VAR           reduce using rule 238 (argument)

state 128 // SFUNC IDENT LBRACE BOOLEAN OR BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  240 argument: argument OR nonAssignExpression .  [$end, ';', ADDR, AFF, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 240 (argument)
    ';'           reduce using rule 240 (argument)
    ADDR          reduce using rule 240 (argument)
    AFF           reduce using rule 240 (argument)
    AND           shift, and goto state 88
    ASSIGN        reduce using rule 240 (argument)
    BASICTYPE     reduce using rule 240 (argument)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 240 (argument)
    BITCLEAR      shift, and goto state 92
    BITOR         shift, and goto state 90
    BITOREQ       reduce using rule 240 (argument)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 240 (argument)
    BOOLEAN       reduce using rule 240 (argument)
    BYTENUM       reduce using rule 240 (argument)
    CASSIGN       reduce using rule 240 (argument)
    COMMA         reduce using rule 240 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 240 (argument)
    DOUBLE        reduce using rule 240 (argument)
    DPROGRAM      reduce using rule 240 (argument)
    DSTACK        reduce using rule 240 (argument)
    DSTATE        reduce using rule 240 (argument)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 240 (argument)
    FLOAT         reduce using rule 240 (argument)
    FOR           reduce using rule 240 (argument)
    FUNC          reduce using rule 240 (argument)
    GOTO          reduce using rule 240 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 240 (argument)
    IF            reduce using rule 240 (argument)
    IMPORT        reduce using rule 240 (argument)
    INFER         reduce using rule 240 (argument)
    INT           reduce using rule 240 (argument)
    LBRACE        reduce using rule 240 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 240 (argument)
    LONG          reduce using rule 240 (argument)
    LPAREN        reduce using rule 240 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 240 (argument)
    MINUSMINUS    reduce using rule 240 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 240 (argument)
    NEW           reduce using rule 240 (argument)
    NOT           reduce using rule 240 (argument)
    OR            reduce using rule 240 (argument)
    PACKAGE       reduce using rule 240 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 240 (argument)
    PLUSPLUS      reduce using rule 240 (argument)
    RBRACE        reduce using rule 240 (argument)
    REM           reduce using rule 240 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 240 (argument)
    RETURN        reduce using rule 240 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 240 (argument)
    RPAREN        reduce using rule 240 (argument)
    SFUNC         reduce using rule 240 (argument)
    SPACKAGE      reduce using rule 240 (argument)
    SSTRUCT       reduce using rule 240 (argument)
    STEP          reduce using rule 240 (argument)
    STRING        reduce using rule 240 (argument)
    TAG           reduce using rule 240 (argument)
    TSTEP         reduce using rule 240 (argument)
    TYPSTRUCT     reduce using rule 240 (argument)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 240 (argument)
    VAR           reduce using rule 240 (argument)

state 129 // SFUNC IDENT LBRACE BOOLEAN LTHANEQ BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  234 argument: argument LTHANEQ argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 234 (argument)
    ';'           reduce using rule 234 (argument)
    ADDR          reduce using rule 234 (argument)
    AFF           reduce using rule 234 (argument)
    AND           reduce using rule 234 (argument)
    ASSIGN        reduce using rule 234 (argument)
    BASICTYPE     reduce using rule 234 (argument)
    BITAND        reduce using rule 234 (argument)
    BITANDEQ      reduce using rule 234 (argument)
    BITCLEAR      reduce using rule 234 (argument)
    BITOR         reduce using rule 234 (argument)
    BITOREQ       reduce using rule 234 (argument)
    BITXOR        reduce using rule 234 (argument)
    BITXOREQ      reduce using rule 234 (argument)
    BOOLEAN       reduce using rule 234 (argument)
    BYTENUM       reduce using rule 234 (argument)
    CASSIGN       reduce using rule 234 (argument)
    COMMA         reduce using rule 234 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 234 (argument)
    DOUBLE        reduce using rule 234 (argument)
    DPROGRAM      reduce using rule 234 (argument)
    DSTACK        reduce using rule 234 (argument)
    DSTATE        reduce using rule 234 (argument)
    EQUAL         reduce using rule 234 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 234 (argument)
    FLOAT         reduce using rule 234 (argument)
    FOR           reduce using rule 234 (argument)
    FUNC          reduce using rule 234 (argument)
    GOTO          reduce using rule 234 (argument)
    GTHAN         reduce using rule 234 (argument)
    GTHANEQ       reduce using rule 234 (argument)
    IDENT         reduce using rule 234 (argument)
    IF            reduce using rule 234 (argument)
    IMPORT        reduce using rule 234 (argument)
    INFER         reduce using rule 234 (argument)
    INT           reduce using rule 234 (argument)
    LBRACE        reduce using rule 234 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 234 (argument)
    LONG          reduce using rule 234 (argument)
    LPAREN        reduce using rule 234 (argument)
    LTHAN         reduce using rule 234 (argument)
    LTHANEQ       reduce using rule 234 (argument)
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 234 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 234 (argument)
    NEW           reduce using rule 234 (argument)
    NOT           reduce using rule 234 (argument)
    OR            reduce using rule 234 (argument)
    PACKAGE       reduce using rule 234 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 234 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 234 (argument)
    REM           reduce using rule 234 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 234 (argument)
    RETURN        reduce using rule 234 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 234 (argument)
    RPAREN        reduce using rule 234 (argument)
    SFUNC         reduce using rule 234 (argument)
    SPACKAGE      reduce using rule 234 (argument)
    SSTRUCT       reduce using rule 234 (argument)
    STEP          reduce using rule 234 (argument)
    STRING        reduce using rule 234 (argument)
    TAG           reduce using rule 234 (argument)
    TSTEP         reduce using rule 234 (argument)
    TYPSTRUCT     reduce using rule 234 (argument)
    UNEQUAL       reduce using rule 234 (argument)
    VALUE         reduce using rule 234 (argument)
    VAR           reduce using rule 234 (argument)

state 130 // SFUNC IDENT LBRACE BOOLEAN LTHANEQ BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  236 argument: argument LTHANEQ nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 236 (argument)
    ';'           reduce using rule 236 (argument)
    ADDR          reduce using rule 236 (argument)
    AFF           reduce using rule 236 (argument)
    AND           reduce using rule 236 (argument)
    ASSIGN        reduce using rule 236 (argument)
    BASICTYPE     reduce using rule 236 (argument)
    BITAND        reduce using rule 236 (argument)
    BITANDEQ      reduce using rule 236 (argument)
    BITCLEAR      reduce using rule 236 (argument)
    BITOR         reduce using rule 236 (argument)
    BITOREQ       reduce using rule 236 (argument)
    BITXOR        reduce using rule 236 (argument)
    BITXOREQ      reduce using rule 236 (argument)
    BOOLEAN       reduce using rule 236 (argument)
    BYTENUM       reduce using rule 236 (argument)
    CASSIGN       reduce using rule 236 (argument)
    COMMA         reduce using rule 236 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 236 (argument)
    DOUBLE        reduce using rule 236 (argument)
    DPROGRAM      reduce using rule 236 (argument)
    DSTACK        reduce using rule 236 (argument)
    DSTATE        reduce using rule 236 (argument)
    EQUAL         reduce using rule 236 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 236 (argument)
    FLOAT         reduce using rule 236 (argument)
    FOR           reduce using rule 236 (argument)
    FUNC          reduce using rule 236 (argument)
    GOTO          reduce using rule 236 (argument)
    GTHAN         reduce using rule 236 (argument)
    GTHANEQ       reduce using rule 236 (argument)
    IDENT         reduce using rule 236 (argument)
    IF            reduce using rule 236 (argument)
    IMPORT        reduce using rule 236 (argument)
    INFER         reduce using rule 236 (argument)
    INT           reduce using rule 236 (argument)
    LBRACE        reduce using rule 236 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 236 (argument)
    LONG          reduce using rule 236 (argument)
    LPAREN        reduce using rule 236 (argument)
    LTHAN         reduce using rule 236 (argument)
    LTHANEQ       reduce using rule 236 (argument)
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 236 (argument)
    MINUSMINUS    reduce using rule 236 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 236 (argument)
    NEW           reduce using rule 236 (argument)
    NOT           reduce using rule 236 (argument)
    OR            reduce using rule 236 (argument)
    PACKAGE       reduce using rule 236 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 236 (argument)
    PLUSPLUS      reduce using rule 236 (argument)
    RBRACE        reduce using rule 236 (argument)
    REM           reduce using rule 236 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 236 (argument)
    RETURN        reduce using rule 236 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 236 (argument)
    RPAREN        reduce using rule 236 (argument)
    SFUNC         reduce using rule 236 (argument)
    SPACKAGE      reduce using rule 236 (argument)
    SSTRUCT       reduce using rule 236 (argument)
    STEP          reduce using rule 236 (argument)
    STRING        reduce using rule 236 (argument)
    TAG           reduce using rule 236 (argument)
    TSTEP         reduce using rule 236 (argument)
    TYPSTRUCT     reduce using rule 236 (argument)
    UNEQUAL       reduce using rule 236 (argument)
    VALUE         reduce using rule 236 (argument)
    VAR           reduce using rule 236 (argument)

state 131 // SFUNC IDENT LBRACE BOOLEAN LTHAN BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  230 argument: argument LTHAN argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 230 (argument)
    ';'           reduce using rule 230 (argument)
    ADDR          reduce using rule 230 (argument)
    AFF           reduce using rule 230 (argument)
    AND           reduce using rule 230 (argument)
    ASSIGN        reduce using rule 230 (argument)
    BASICTYPE     reduce using rule 230 (argument)
    BITAND        reduce using rule 230 (argument)
    BITANDEQ      reduce using rule 230 (argument)
    BITCLEAR      reduce using rule 230 (argument)
    BITOR         reduce using rule 230 (argument)
    BITOREQ       reduce using rule 230 (argument)
    BITXOR        reduce using rule 230 (argument)
    BITXOREQ      reduce using rule 230 (argument)
    BOOLEAN       reduce using rule 230 (argument)
    BYTENUM       reduce using rule 230 (argument)
    CASSIGN       reduce using rule 230 (argument)
    COMMA         reduce using rule 230 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 230 (argument)
    DOUBLE        reduce using rule 230 (argument)
    DPROGRAM      reduce using rule 230 (argument)
    DSTACK        reduce using rule 230 (argument)
    DSTATE        reduce using rule 230 (argument)
    EQUAL         reduce using rule 230 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 230 (argument)
    FLOAT         reduce using rule 230 (argument)
    FOR           reduce using rule 230 (argument)
    FUNC          reduce using rule 230 (argument)
    GOTO          reduce using rule 230 (argument)
    GTHAN         reduce using rule 230 (argument)
    GTHANEQ       reduce using rule 230 (argument)
    IDENT         reduce using rule 230 (argument)
    IF            reduce using rule 230 (argument)
    IMPORT        reduce using rule 230 (argument)
    INFER         reduce using rule 230 (argument)
    INT           reduce using rule 230 (argument)
    LBRACE        reduce using rule 230 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 230 (argument)
    LONG          reduce using rule 230 (argument)
    LPAREN        reduce using rule 230 (argument)
    LTHAN         reduce using rule 230 (argument)
    LTHANEQ       reduce using rule 230 (argument)
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 230 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 230 (argument)
    NEW           reduce using rule 230 (argument)
    NOT           reduce using rule 230 (argument)
    OR            reduce using rule 230 (argument)
    PACKAGE       reduce using rule 230 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 230 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 230 (argument)
    REM           reduce using rule 230 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 230 (argument)
    RETURN        reduce using rule 230 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 230 (argument)
    RPAREN        reduce using rule 230 (argument)
    SFUNC         reduce using rule 230 (argument)
    SPACKAGE      reduce using rule 230 (argument)
    SSTRUCT       reduce using rule 230 (argument)
    STEP          reduce using rule 230 (argument)
    STRING        reduce using rule 230 (argument)
    TAG           reduce using rule 230 (argument)
    TSTEP         reduce using rule 230 (argument)
    TYPSTRUCT     reduce using rule 230 (argument)
    UNEQUAL       reduce using rule 230 (argument)
    VALUE         reduce using rule 230 (argument)
    VAR           reduce using rule 230 (argument)

state 132 // SFUNC IDENT LBRACE BOOLEAN LTHAN BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  232 argument: argument LTHAN nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 232 (argument)
    ';'           reduce using rule 232 (argument)
    ADDR          reduce using rule 232 (argument)
    AFF           reduce using rule 232 (argument)
    AND           reduce using rule 232 (argument)
    ASSIGN        reduce using rule 232 (argument)
    BASICTYPE     reduce using rule 232 (argument)
    BITAND        reduce using rule 232 (argument)
    BITANDEQ      reduce using rule 232 (argument)
    BITCLEAR      reduce using rule 232 (argument)
    BITOR         reduce using rule 232 (argument)
    BITOREQ       reduce using rule 232 (argument)
    BITXOR        reduce using rule 232 (argument)
    BITXOREQ      reduce using rule 232 (argument)
    BOOLEAN       reduce using rule 232 (argument)
    BYTENUM       reduce using rule 232 (argument)
    CASSIGN       reduce using rule 232 (argument)
    COMMA         reduce using rule 232 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 232 (argument)
    DOUBLE        reduce using rule 232 (argument)
    DPROGRAM      reduce using rule 232 (argument)
    DSTACK        reduce using rule 232 (argument)
    DSTATE        reduce using rule 232 (argument)
    EQUAL         reduce using rule 232 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 232 (argument)
    FLOAT         reduce using rule 232 (argument)
    FOR           reduce using rule 232 (argument)
    FUNC          reduce using rule 232 (argument)
    GOTO          reduce using rule 232 (argument)
    GTHAN         reduce using rule 232 (argument)
    GTHANEQ       reduce using rule 232 (argument)
    IDENT         reduce using rule 232 (argument)
    IF            reduce using rule 232 (argument)
    IMPORT        reduce using rule 232 (argument)
    INFER         reduce using rule 232 (argument)
    INT           reduce using rule 232 (argument)
    LBRACE        reduce using rule 232 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 232 (argument)
    LONG          reduce using rule 232 (argument)
    LPAREN        reduce using rule 232 (argument)
    LTHAN         reduce using rule 232 (argument)
    LTHANEQ       reduce using rule 232 (argument)
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 232 (argument)
    MINUSMINUS    reduce using rule 232 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 232 (argument)
    NEW           reduce using rule 232 (argument)
    NOT           reduce using rule 232 (argument)
    OR            reduce using rule 232 (argument)
    PACKAGE       reduce using rule 232 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 232 (argument)
    PLUSPLUS      reduce using rule 232 (argument)
    RBRACE        reduce using rule 232 (argument)
    REM           reduce using rule 232 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 232 (argument)
    RETURN        reduce using rule 232 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 232 (argument)
    RPAREN        reduce using rule 232 (argument)
    SFUNC         reduce using rule 232 (argument)
    SPACKAGE      reduce using rule 232 (argument)
    SSTRUCT       reduce using rule 232 (argument)
    STEP          reduce using rule 232 (argument)
    STRING        reduce using rule 232 (argument)
    TAG           reduce using rule 232 (argument)
    TSTEP         reduce using rule 232 (argument)
    TYPSTRUCT     reduce using rule 232 (argument)
    UNEQUAL       reduce using rule 232 (argument)
    VALUE         reduce using rule 232 (argument)
    VAR           reduce using rule 232 (argument)

state 133 // SFUNC IDENT LBRACE BOOLEAN GTHANEQ BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  226 argument: argument GTHANEQ argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 226 (argument)
    ';'           reduce using rule 226 (argument)
    ADDR          reduce using rule 226 (argument)
    AFF           reduce using rule 226 (argument)
    AND           reduce using rule 226 (argument)
    ASSIGN        reduce using rule 226 (argument)
    BASICTYPE     reduce using rule 226 (argument)
    BITAND        reduce using rule 226 (argument)
    BITANDEQ      reduce using rule 226 (argument)
    BITCLEAR      reduce using rule 226 (argument)
    BITOR         reduce using rule 226 (argument)
    BITOREQ       reduce using rule 226 (argument)
    BITXOR        reduce using rule 226 (argument)
    BITXOREQ      reduce using rule 226 (argument)
    BOOLEAN       reduce using rule 226 (argument)
    BYTENUM       reduce using rule 226 (argument)
    CASSIGN       reduce using rule 226 (argument)
    COMMA         reduce using rule 226 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 226 (argument)
    DOUBLE        reduce using rule 226 (argument)
    DPROGRAM      reduce using rule 226 (argument)
    DSTACK        reduce using rule 226 (argument)
    DSTATE        reduce using rule 226 (argument)
    EQUAL         reduce using rule 226 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 226 (argument)
    FLOAT         reduce using rule 226 (argument)
    FOR           reduce using rule 226 (argument)
    FUNC          reduce using rule 226 (argument)
    GOTO          reduce using rule 226 (argument)
    GTHAN         reduce using rule 226 (argument)
    GTHANEQ       reduce using rule 226 (argument)
    IDENT         reduce using rule 226 (argument)
    IF            reduce using rule 226 (argument)
    IMPORT        reduce using rule 226 (argument)
    INFER         reduce using rule 226 (argument)
    INT           reduce using rule 226 (argument)
    LBRACE        reduce using rule 226 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 226 (argument)
    LONG          reduce using rule 226 (argument)
    LPAREN        reduce using rule 226 (argument)
    LTHAN         reduce using rule 226 (argument)
    LTHANEQ       reduce using rule 226 (argument)
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 226 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 226 (argument)
    NEW           reduce using rule 226 (argument)
    NOT           reduce using rule 226 (argument)
    OR            reduce using rule 226 (argument)
    PACKAGE       reduce using rule 226 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 226 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 226 (argument)
    REM           reduce using rule 226 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 226 (argument)
    RETURN        reduce using rule 226 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 226 (argument)
    RPAREN        reduce using rule 226 (argument)
    SFUNC         reduce using rule 226 (argument)
    SPACKAGE      reduce using rule 226 (argument)
    SSTRUCT       reduce using rule 226 (argument)
    STEP          reduce using rule 226 (argument)
    STRING        reduce using rule 226 (argument)
    TAG           reduce using rule 226 (argument)
    TSTEP         reduce using rule 226 (argument)
    TYPSTRUCT     reduce using rule 226 (argument)
    UNEQUAL       reduce using rule 226 (argument)
    VALUE         reduce using rule 226 (argument)
    VAR           reduce using rule 226 (argument)

state 134 // SFUNC IDENT LBRACE BOOLEAN GTHANEQ BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  228 argument: argument GTHANEQ nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 228 (argument)
    ';'           reduce using rule 228 (argument)
    ADDR          reduce using rule 228 (argument)
    AFF           reduce using rule 228 (argument)
    AND           reduce using rule 228 (argument)
    ASSIGN        reduce using rule 228 (argument)
    BASICTYPE     reduce using rule 228 (argument)
    BITAND        reduce using rule 228 (argument)
    BITANDEQ      reduce using rule 228 (argument)
    BITCLEAR      reduce using rule 228 (argument)
    BITOR         reduce using rule 228 (argument)
    BITOREQ       reduce using rule 228 (argument)
    BITXOR        reduce using rule 228 (argument)
    BITXOREQ      reduce using rule 228 (argument)
    BOOLEAN       reduce using rule 228 (argument)
    BYTENUM       reduce using rule 228 (argument)
    CASSIGN       reduce using rule 228 (argument)
    COMMA         reduce using rule 228 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 228 (argument)
    DOUBLE        reduce using rule 228 (argument)
    DPROGRAM      reduce using rule 228 (argument)
    DSTACK        reduce using rule 228 (argument)
    DSTATE        reduce using rule 228 (argument)
    EQUAL         reduce using rule 228 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 228 (argument)
    FLOAT         reduce using rule 228 (argument)
    FOR           reduce using rule 228 (argument)
    FUNC          reduce using rule 228 (argument)
    GOTO          reduce using rule 228 (argument)
    GTHAN         reduce using rule 228 (argument)
    GTHANEQ       reduce using rule 228 (argument)
    IDENT         reduce using rule 228 (argument)
    IF            reduce using rule 228 (argument)
    IMPORT        reduce using rule 228 (argument)
    INFER         reduce using rule 228 (argument)
    INT           reduce using rule 228 (argument)
    LBRACE        reduce using rule 228 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 228 (argument)
    LONG          reduce using rule 228 (argument)
    LPAREN        reduce using rule 228 (argument)
    LTHAN         reduce using rule 228 (argument)
    LTHANEQ       reduce using rule 228 (argument)
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 228 (argument)
    MINUSMINUS    reduce using rule 228 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 228 (argument)
    NEW           reduce using rule 228 (argument)
    NOT           reduce using rule 228 (argument)
    OR            reduce using rule 228 (argument)
    PACKAGE       reduce using rule 228 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 228 (argument)
    PLUSPLUS      reduce using rule 228 (argument)
    RBRACE        reduce using rule 228 (argument)
    REM           reduce using rule 228 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 228 (argument)
    RETURN        reduce using rule 228 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 228 (argument)
    RPAREN        reduce using rule 228 (argument)
    SFUNC         reduce using rule 228 (argument)
    SPACKAGE      reduce using rule 228 (argument)
    SSTRUCT       reduce using rule 228 (argument)
    STEP          reduce using rule 228 (argument)
    STRING        reduce using rule 228 (argument)
    TAG           reduce using rule 228 (argument)
    TSTEP         reduce using rule 228 (argument)
    TYPSTRUCT     reduce using rule 228 (argument)
    UNEQUAL       reduce using rule 228 (argument)
    VALUE         reduce using rule 228 (argument)
    VAR           reduce using rule 228 (argument)

state 135 // SFUNC IDENT LBRACE BOOLEAN GTHAN BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  222 argument: argument GTHAN argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 222 (argument)
    ';'           reduce using rule 222 (argument)
    ADDR          reduce using rule 222 (argument)
    AFF           reduce using rule 222 (argument)
    AND           reduce using rule 222 (argument)
    ASSIGN        reduce using rule 222 (argument)
    BASICTYPE     reduce using rule 222 (argument)
    BITAND        reduce using rule 222 (argument)
    BITANDEQ      reduce using rule 222 (argument)
    BITCLEAR      reduce using rule 222 (argument)
    BITOR         reduce using rule 222 (argument)
    BITOREQ       reduce using rule 222 (argument)
    BITXOR        reduce using rule 222 (argument)
    BITXOREQ      reduce using rule 222 (argument)
    BOOLEAN       reduce using rule 222 (argument)
    BYTENUM       reduce using rule 222 (argument)
    CASSIGN       reduce using rule 222 (argument)
    COMMA         reduce using rule 222 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 222 (argument)
    DOUBLE        reduce using rule 222 (argument)
    DPROGRAM      reduce using rule 222 (argument)
    DSTACK        reduce using rule 222 (argument)
    DSTATE        reduce using rule 222 (argument)
    EQUAL         reduce using rule 222 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 222 (argument)
    FLOAT         reduce using rule 222 (argument)
    FOR           reduce using rule 222 (argument)
    FUNC          reduce using rule 222 (argument)
    GOTO          reduce using rule 222 (argument)
    GTHAN         reduce using rule 222 (argument)
    GTHANEQ       reduce using rule 222 (argument)
    IDENT         reduce using rule 222 (argument)
    IF            reduce using rule 222 (argument)
    IMPORT        reduce using rule 222 (argument)
    INFER         reduce using rule 222 (argument)
    INT           reduce using rule 222 (argument)
    LBRACE        reduce using rule 222 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 222 (argument)
    LONG          reduce using rule 222 (argument)
    LPAREN        reduce using rule 222 (argument)
    LTHAN         reduce using rule 222 (argument)
    LTHANEQ       reduce using rule 222 (argument)
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 222 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 222 (argument)
    NEW           reduce using rule 222 (argument)
    NOT           reduce using rule 222 (argument)
    OR            reduce using rule 222 (argument)
    PACKAGE       reduce using rule 222 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 222 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 222 (argument)
    REM           reduce using rule 222 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 222 (argument)
    RETURN        reduce using rule 222 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 222 (argument)
    RPAREN        reduce using rule 222 (argument)
    SFUNC         reduce using rule 222 (argument)
    SPACKAGE      reduce using rule 222 (argument)
    SSTRUCT       reduce using rule 222 (argument)
    STEP          reduce using rule 222 (argument)
    STRING        reduce using rule 222 (argument)
    TAG           reduce using rule 222 (argument)
    TSTEP         reduce using rule 222 (argument)
    TYPSTRUCT     reduce using rule 222 (argument)
    UNEQUAL       reduce using rule 222 (argument)
    VALUE         reduce using rule 222 (argument)
    VAR           reduce using rule 222 (argument)

state 136 // SFUNC IDENT LBRACE BOOLEAN GTHAN BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  224 argument: argument GTHAN nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 224 (argument)
    ';'           reduce using rule 224 (argument)
    ADDR          reduce using rule 224 (argument)
    AFF           reduce using rule 224 (argument)
    AND           reduce using rule 224 (argument)
    ASSIGN        reduce using rule 224 (argument)
    BASICTYPE     reduce using rule 224 (argument)
    BITAND        reduce using rule 224 (argument)
    BITANDEQ      reduce using rule 224 (argument)
    BITCLEAR      reduce using rule 224 (argument)
    BITOR         reduce using rule 224 (argument)
    BITOREQ       reduce using rule 224 (argument)
    BITXOR        reduce using rule 224 (argument)
    BITXOREQ      reduce using rule 224 (argument)
    BOOLEAN       reduce using rule 224 (argument)
    BYTENUM       reduce using rule 224 (argument)
    CASSIGN       reduce using rule 224 (argument)
    COMMA         reduce using rule 224 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 224 (argument)
    DOUBLE        reduce using rule 224 (argument)
    DPROGRAM      reduce using rule 224 (argument)
    DSTACK        reduce using rule 224 (argument)
    DSTATE        reduce using rule 224 (argument)
    EQUAL         reduce using rule 224 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 224 (argument)
    FLOAT         reduce using rule 224 (argument)
    FOR           reduce using rule 224 (argument)
    FUNC          reduce using rule 224 (argument)
    GOTO          reduce using rule 224 (argument)
    GTHAN         reduce using rule 224 (argument)
    GTHANEQ       reduce using rule 224 (argument)
    IDENT         reduce using rule 224 (argument)
    IF            reduce using rule 224 (argument)
    IMPORT        reduce using rule 224 (argument)
    INFER         reduce using rule 224 (argument)
    INT           reduce using rule 224 (argument)
    LBRACE        reduce using rule 224 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 224 (argument)
    LONG          reduce using rule 224 (argument)
    LPAREN        reduce using rule 224 (argument)
    LTHAN         reduce using rule 224 (argument)
    LTHANEQ       reduce using rule 224 (argument)
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 224 (argument)
    MINUSMINUS    reduce using rule 224 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 224 (argument)
    NEW           reduce using rule 224 (argument)
    NOT           reduce using rule 224 (argument)
    OR            reduce using rule 224 (argument)
    PACKAGE       reduce using rule 224 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 224 (argument)
    PLUSPLUS      reduce using rule 224 (argument)
    RBRACE        reduce using rule 224 (argument)
    REM           reduce using rule 224 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 224 (argument)
    RETURN        reduce using rule 224 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 224 (argument)
    RPAREN        reduce using rule 224 (argument)
    SFUNC         reduce using rule 224 (argument)
    SPACKAGE      reduce using rule 224 (argument)
    SSTRUCT       reduce using rule 224 (argument)
    STEP          reduce using rule 224 (argument)
    STRING        reduce using rule 224 (argument)
    TAG           reduce using rule 224 (argument)
    TSTEP         reduce using rule 224 (argument)
    TYPSTRUCT     reduce using rule 224 (argument)
    UNEQUAL       reduce using rule 224 (argument)
    VALUE         reduce using rule 224 (argument)
    VAR           reduce using rule 224 (argument)

state 137 // SFUNC IDENT LBRACE BOOLEAN UNEQUAL BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  218 argument: argument UNEQUAL argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 218 (argument)
    ';'           reduce using rule 218 (argument)
    ADDR          reduce using rule 218 (argument)
    AFF           reduce using rule 218 (argument)
    AND           reduce using rule 218 (argument)
    ASSIGN        reduce using rule 218 (argument)
    BASICTYPE     reduce using rule 218 (argument)
    BITAND        reduce using rule 218 (argument)
    BITANDEQ      reduce using rule 218 (argument)
    BITCLEAR      reduce using rule 218 (argument)
    BITOR         reduce using rule 218 (argument)
    BITOREQ       reduce using rule 218 (argument)
    BITXOR        reduce using rule 218 (argument)
    BITXOREQ      reduce using rule 218 (argument)
    BOOLEAN       reduce using rule 218 (argument)
    BYTENUM       reduce using rule 218 (argument)
    CASSIGN       reduce using rule 218 (argument)
    COMMA         reduce using rule 218 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 218 (argument)
    DOUBLE        reduce using rule 218 (argument)
    DPROGRAM      reduce using rule 218 (argument)
    DSTACK        reduce using rule 218 (argument)
    DSTATE        reduce using rule 218 (argument)
    EQUAL         reduce using rule 218 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 218 (argument)
    FLOAT         reduce using rule 218 (argument)
    FOR           reduce using rule 218 (argument)
    FUNC          reduce using rule 218 (argument)
    GOTO          reduce using rule 218 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 218 (argument)
    IF            reduce using rule 218 (argument)
    IMPORT        reduce using rule 218 (argument)
    INFER         reduce using rule 218 (argument)
    INT           reduce using rule 218 (argument)
    LBRACE        reduce using rule 218 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 218 (argument)
    LONG          reduce using rule 218 (argument)
    LPAREN        reduce using rule 218 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 218 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 218 (argument)
    NEW           reduce using rule 218 (argument)
    NOT           reduce using rule 218 (argument)
    OR            reduce using rule 218 (argument)
    PACKAGE       reduce using rule 218 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 218 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 218 (argument)
    REM           reduce using rule 218 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 218 (argument)
    RETURN        reduce using rule 218 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 218 (argument)
    RPAREN        reduce using rule 218 (argument)
    SFUNC         reduce using rule 218 (argument)
    SPACKAGE      reduce using rule 218 (argument)
    SSTRUCT       reduce using rule 218 (argument)
    STEP          reduce using rule 218 (argument)
    STRING        reduce using rule 218 (argument)
    TAG           reduce using rule 218 (argument)
    TSTEP         reduce using rule 218 (argument)
    TYPSTRUCT     reduce using rule 218 (argument)
    UNEQUAL       reduce using rule 218 (argument)
    VALUE         reduce using rule 218 (argument)
    VAR           reduce using rule 218 (argument)

state 138 // SFUNC IDENT LBRACE BOOLEAN UNEQUAL BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  220 argument: argument UNEQUAL nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 220 (argument)
    ';'           reduce using rule 220 (argument)
    ADDR          reduce using rule 220 (argument)
    AFF           reduce using rule 220 (argument)
    AND           reduce using rule 220 (argument)
    ASSIGN        reduce using rule 220 (argument)
    BASICTYPE     reduce using rule 220 (argument)
    BITAND        reduce using rule 220 (argument)
    BITANDEQ      reduce using rule 220 (argument)
    BITCLEAR      reduce using rule 220 (argument)
    BITOR         reduce using rule 220 (argument)
    BITOREQ       reduce using rule 220 (argument)
    BITXOR        reduce using rule 220 (argument)
    BITXOREQ      reduce using rule 220 (argument)
    BOOLEAN       reduce using rule 220 (argument)
    BYTENUM       reduce using rule 220 (argument)
    CASSIGN       reduce using rule 220 (argument)
    COMMA         reduce using rule 220 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 220 (argument)
    DOUBLE        reduce using rule 220 (argument)
    DPROGRAM      reduce using rule 220 (argument)
    DSTACK        reduce using rule 220 (argument)
    DSTATE        reduce using rule 220 (argument)
    EQUAL         reduce using rule 220 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 220 (argument)
    FLOAT         reduce using rule 220 (argument)
    FOR           reduce using rule 220 (argument)
    FUNC          reduce using rule 220 (argument)
    GOTO          reduce using rule 220 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 220 (argument)
    IF            reduce using rule 220 (argument)
    IMPORT        reduce using rule 220 (argument)
    INFER         reduce using rule 220 (argument)
    INT           reduce using rule 220 (argument)
    LBRACE        reduce using rule 220 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 220 (argument)
    LONG          reduce using rule 220 (argument)
    LPAREN        reduce using rule 220 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 220 (argument)
    MINUSMINUS    reduce using rule 220 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 220 (argument)
    NEW           reduce using rule 220 (argument)
    NOT           reduce using rule 220 (argument)
    OR            reduce using rule 220 (argument)
    PACKAGE       reduce using rule 220 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 220 (argument)
    PLUSPLUS      reduce using rule 220 (argument)
    RBRACE        reduce using rule 220 (argument)
    REM           reduce using rule 220 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 220 (argument)
    RETURN        reduce using rule 220 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 220 (argument)
    RPAREN        reduce using rule 220 (argument)
    SFUNC         reduce using rule 220 (argument)
    SPACKAGE      reduce using rule 220 (argument)
    SSTRUCT       reduce using rule 220 (argument)
    STEP          reduce using rule 220 (argument)
    STRING        reduce using rule 220 (argument)
    TAG           reduce using rule 220 (argument)
    TSTEP         reduce using rule 220 (argument)
    TYPSTRUCT     reduce using rule 220 (argument)
    UNEQUAL       reduce using rule 220 (argument)
    VALUE         reduce using rule 220 (argument)
    VAR           reduce using rule 220 (argument)

state 139 // SFUNC IDENT LBRACE BOOLEAN EQUAL BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  214 argument: argument EQUAL argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 214 (argument)
    ';'           reduce using rule 214 (argument)
    ADDR          reduce using rule 214 (argument)
    AFF           reduce using rule 214 (argument)
    AND           reduce using rule 214 (argument)
    ASSIGN        reduce using rule 214 (argument)
    BASICTYPE     reduce using rule 214 (argument)
    BITAND        reduce using rule 214 (argument)
    BITANDEQ      reduce using rule 214 (argument)
    BITCLEAR      reduce using rule 214 (argument)
    BITOR         reduce using rule 214 (argument)
    BITOREQ       reduce using rule 214 (argument)
    BITXOR        reduce using rule 214 (argument)
    BITXOREQ      reduce using rule 214 (argument)
    BOOLEAN       reduce using rule 214 (argument)
    BYTENUM       reduce using rule 214 (argument)
    CASSIGN       reduce using rule 214 (argument)
    COMMA         reduce using rule 214 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 214 (argument)
    DOUBLE        reduce using rule 214 (argument)
    DPROGRAM      reduce using rule 214 (argument)
    DSTACK        reduce using rule 214 (argument)
    DSTATE        reduce using rule 214 (argument)
    EQUAL         reduce using rule 214 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 214 (argument)
    FLOAT         reduce using rule 214 (argument)
    FOR           reduce using rule 214 (argument)
    FUNC          reduce using rule 214 (argument)
    GOTO          reduce using rule 214 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 214 (argument)
    IF            reduce using rule 214 (argument)
    IMPORT        reduce using rule 214 (argument)
    INFER         reduce using rule 214 (argument)
    INT           reduce using rule 214 (argument)
    LBRACE        reduce using rule 214 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 214 (argument)
    LONG          reduce using rule 214 (argument)
    LPAREN        reduce using rule 214 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 214 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 214 (argument)
    NEW           reduce using rule 214 (argument)
    NOT           reduce using rule 214 (argument)
    OR            reduce using rule 214 (argument)
    PACKAGE       reduce using rule 214 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 214 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 214 (argument)
    REM           reduce using rule 214 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 214 (argument)
    RETURN        reduce using rule 214 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 214 (argument)
    RPAREN        reduce using rule 214 (argument)
    SFUNC         reduce using rule 214 (argument)
    SPACKAGE      reduce using rule 214 (argument)
    SSTRUCT       reduce using rule 214 (argument)
    STEP          reduce using rule 214 (argument)
    STRING        reduce using rule 214 (argument)
    TAG           reduce using rule 214 (argument)
    TSTEP         reduce using rule 214 (argument)
    TYPSTRUCT     reduce using rule 214 (argument)
    UNEQUAL       reduce using rule 214 (argument)
    VALUE         reduce using rule 214 (argument)
    VAR           reduce using rule 214 (argument)

state 140 // SFUNC IDENT LBRACE BOOLEAN EQUAL BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  216 argument: argument EQUAL nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 216 (argument)
    ';'           reduce using rule 216 (argument)
    ADDR          reduce using rule 216 (argument)
    AFF           reduce using rule 216 (argument)
    AND           reduce using rule 216 (argument)
    ASSIGN        reduce using rule 216 (argument)
    BASICTYPE     reduce using rule 216 (argument)
    BITAND        reduce using rule 216 (argument)
    BITANDEQ      reduce using rule 216 (argument)
    BITCLEAR      reduce using rule 216 (argument)
    BITOR         reduce using rule 216 (argument)
    BITOREQ       reduce using rule 216 (argument)
    BITXOR        reduce using rule 216 (argument)
    BITXOREQ      reduce using rule 216 (argument)
    BOOLEAN       reduce using rule 216 (argument)
    BYTENUM       reduce using rule 216 (argument)
    CASSIGN       reduce using rule 216 (argument)
    COMMA         reduce using rule 216 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 216 (argument)
    DOUBLE        reduce using rule 216 (argument)
    DPROGRAM      reduce using rule 216 (argument)
    DSTACK        reduce using rule 216 (argument)
    DSTATE        reduce using rule 216 (argument)
    EQUAL         reduce using rule 216 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 216 (argument)
    FLOAT         reduce using rule 216 (argument)
    FOR           reduce using rule 216 (argument)
    FUNC          reduce using rule 216 (argument)
    GOTO          reduce using rule 216 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 216 (argument)
    IF            reduce using rule 216 (argument)
    IMPORT        reduce using rule 216 (argument)
    INFER         reduce using rule 216 (argument)
    INT           reduce using rule 216 (argument)
    LBRACE        reduce using rule 216 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 216 (argument)
    LONG          reduce using rule 216 (argument)
    LPAREN        reduce using rule 216 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 216 (argument)
    MINUSMINUS    reduce using rule 216 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 216 (argument)
    NEW           reduce using rule 216 (argument)
    NOT           reduce using rule 216 (argument)
    OR            reduce using rule 216 (argument)
    PACKAGE       reduce using rule 216 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 216 (argument)
    PLUSPLUS      reduce using rule 216 (argument)
    RBRACE        reduce using rule 216 (argument)
    REM           reduce using rule 216 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 216 (argument)
    RETURN        reduce using rule 216 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 216 (argument)
    RPAREN        reduce using rule 216 (argument)
    SFUNC         reduce using rule 216 (argument)
    SPACKAGE      reduce using rule 216 (argument)
    SSTRUCT       reduce using rule 216 (argument)
    STEP          reduce using rule 216 (argument)
    STRING        reduce using rule 216 (argument)
    TAG           reduce using rule 216 (argument)
    TSTEP         reduce using rule 216 (argument)
    TYPSTRUCT     reduce using rule 216 (argument)
    UNEQUAL       reduce using rule 216 (argument)
    VALUE         reduce using rule 216 (argument)
    VAR           reduce using rule 216 (argument)

state 141 // SFUNC IDENT LBRACE BOOLEAN EXP BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  210 argument: argument EXP argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 210 (argument)
    ';'           reduce using rule 210 (argument)
    ADDR          reduce using rule 210 (argument)
    AFF           reduce using rule 210 (argument)
    AND           reduce using rule 210 (argument)
    ASSIGN        reduce using rule 210 (argument)
    BASICTYPE     reduce using rule 210 (argument)
    BITAND        reduce using rule 210 (argument)
    BITANDEQ      reduce using rule 210 (argument)
    BITCLEAR      reduce using rule 210 (argument)
    BITOR         reduce using rule 210 (argument)
    BITOREQ       reduce using rule 210 (argument)
    BITXOR        reduce using rule 210 (argument)
    BITXOREQ      reduce using rule 210 (argument)
    BOOLEAN       reduce using rule 210 (argument)
    BYTENUM       reduce using rule 210 (argument)
    CASSIGN       reduce using rule 210 (argument)
    COMMA         reduce using rule 210 (argument)
    DIV           reduce using rule 210 (argument)
    DIVEQ         reduce using rule 210 (argument)
    DOUBLE        reduce using rule 210 (argument)
    DPROGRAM      reduce using rule 210 (argument)
    DSTACK        reduce using rule 210 (argument)
    DSTATE        reduce using rule 210 (argument)
    EQUAL         reduce using rule 210 (argument)
    EXP           reduce using rule 210 (argument)
    EXPEQ         reduce using rule 210 (argument)
    FLOAT         reduce using rule 210 (argument)
    FOR           reduce using rule 210 (argument)
    FUNC          reduce using rule 210 (argument)
    GOTO          reduce using rule 210 (argument)
    GTHAN         reduce using rule 210 (argument)
    GTHANEQ       reduce using rule 210 (argument)
    IDENT         reduce using rule 210 (argument)
    IF            reduce using rule 210 (argument)
    IMPORT        reduce using rule 210 (argument)
    INFER         reduce using rule 210 (argument)
    INT           reduce using rule 210 (argument)
    LBRACE        reduce using rule 210 (argument)
    LEFTSHIFT     reduce using rule 210 (argument)
    LEFTSHIFTEQ   reduce using rule 210 (argument)
    LONG          reduce using rule 210 (argument)
    LPAREN        reduce using rule 210 (argument)
    LTHAN         reduce using rule 210 (argument)
    LTHANEQ       reduce using rule 210 (argument)
    MINUS         reduce using rule 210 (argument)
    MINUSEQ       reduce using rule 210 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          reduce using rule 210 (argument)
    MULTEQ        reduce using rule 210 (argument)
    NEW           reduce using rule 210 (argument)
    NOT           reduce using rule 210 (argument)
    OR            reduce using rule 210 (argument)
    PACKAGE       reduce using rule 210 (argument)
    PLUS          reduce using rule 210 (argument)
    PLUSEQ        reduce using rule 210 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 210 (argument)
    REM           reduce using rule 210 (argument)
    REMAINDER     reduce using rule 210 (argument)
    REMAINDEREQ   reduce using rule 210 (argument)
    RETURN        reduce using rule 210 (argument)
    RIGHTSHIFT    reduce using rule 210 (argument)
    RIGHTSHIFTEQ  reduce using rule 210 (argument)
    RPAREN        reduce using rule 210 (argument)
    SFUNC         reduce using rule 210 (argument)
    SPACKAGE      reduce using rule 210 (argument)
    SSTRUCT       reduce using rule 210 (argument)
    STEP          reduce using rule 210 (argument)
    STRING        reduce using rule 210 (argument)
    TAG           reduce using rule 210 (argument)
    TSTEP         reduce using rule 210 (argument)
    TYPSTRUCT     reduce using rule 210 (argument)
    UNEQUAL       reduce using rule 210 (argument)
    VALUE         reduce using rule 210 (argument)
    VAR           reduce using rule 210 (argument)

state 142 // SFUNC IDENT LBRACE BOOLEAN EXP BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  212 argument: argument EXP nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 212 (argument)
    ';'           reduce using rule 212 (argument)
    ADDR          reduce using rule 212 (argument)
    AFF           reduce using rule 212 (argument)
    AND           reduce using rule 212 (argument)
    ASSIGN        reduce using rule 212 (argument)
    BASICTYPE     reduce using rule 212 (argument)
    BITAND        reduce using rule 212 (argument)
    BITANDEQ      reduce using rule 212 (argument)
    BITCLEAR      reduce using rule 212 (argument)
    BITOR         reduce using rule 212 (argument)
    BITOREQ       reduce using rule 212 (argument)
    BITXOR        reduce using rule 212 (argument)
    BITXOREQ      reduce using rule 212 (argument)
    BOOLEAN       reduce using rule 212 (argument)
    BYTENUM       reduce using rule 212 (argument)
    CASSIGN       reduce using rule 212 (argument)
    COMMA         reduce using rule 212 (argument)
    DIV           reduce using rule 212 (argument)
    DIVEQ         reduce using rule 212 (argument)
    DOUBLE        reduce using rule 212 (argument)
    DPROGRAM      reduce using rule 212 (argument)
    DSTACK        reduce using rule 212 (argument)
    DSTATE        reduce using rule 212 (argument)
    EQUAL         reduce using rule 212 (argument)
    EXP           reduce using rule 212 (argument)
    EXPEQ         reduce using rule 212 (argument)
    FLOAT         reduce using rule 212 (argument)
    FOR           reduce using rule 212 (argument)
    FUNC          reduce using rule 212 (argument)
    GOTO          reduce using rule 212 (argument)
    GTHAN         reduce using rule 212 (argument)
    GTHANEQ       reduce using rule 212 (argument)
    IDENT         reduce using rule 212 (argument)
    IF            reduce using rule 212 (argument)
    IMPORT        reduce using rule 212 (argument)
    INFER         reduce using rule 212 (argument)
    INT           reduce using rule 212 (argument)
    LBRACE        reduce using rule 212 (argument)
    LEFTSHIFT     reduce using rule 212 (argument)
    LEFTSHIFTEQ   reduce using rule 212 (argument)
    LONG          reduce using rule 212 (argument)
    LPAREN        reduce using rule 212 (argument)
    LTHAN         reduce using rule 212 (argument)
    LTHANEQ       reduce using rule 212 (argument)
    MINUS         reduce using rule 212 (argument)
    MINUSEQ       reduce using rule 212 (argument)
    MINUSMINUS    reduce using rule 212 (argument)
    MULT          reduce using rule 212 (argument)
    MULTEQ        reduce using rule 212 (argument)
    NEW           reduce using rule 212 (argument)
    NOT           reduce using rule 212 (argument)
    OR            reduce using rule 212 (argument)
    PACKAGE       reduce using rule 212 (argument)
    PLUS          reduce using rule 212 (argument)
    PLUSEQ        reduce using rule 212 (argument)
    PLUSPLUS      reduce using rule 212 (argument)
    RBRACE        reduce using rule 212 (argument)
    REM           reduce using rule 212 (argument)
    REMAINDER     reduce using rule 212 (argument)
    REMAINDEREQ   reduce using rule 212 (argument)
    RETURN        reduce using rule 212 (argument)
    RIGHTSHIFT    reduce using rule 212 (argument)
    RIGHTSHIFTEQ  reduce using rule 212 (argument)
    RPAREN        reduce using rule 212 (argument)
    SFUNC         reduce using rule 212 (argument)
    SPACKAGE      reduce using rule 212 (argument)
    SSTRUCT       reduce using rule 212 (argument)
    STEP          reduce using rule 212 (argument)
    STRING        reduce using rule 212 (argument)
    TAG           reduce using rule 212 (argument)
    TSTEP         reduce using rule 212 (argument)
    TYPSTRUCT     reduce using rule 212 (argument)
    UNEQUAL       reduce using rule 212 (argument)
    VALUE         reduce using rule 212 (argument)
    VAR           reduce using rule 212 (argument)

state 143 // SFUNC IDENT LBRACE BOOLEAN RIGHTSHIFT BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  206 argument: argument RIGHTSHIFT argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 206 (argument)
    ';'           reduce using rule 206 (argument)
    ADDR          reduce using rule 206 (argument)
    AFF           reduce using rule 206 (argument)
    AND           reduce using rule 206 (argument)
    ASSIGN        reduce using rule 206 (argument)
    BASICTYPE     reduce using rule 206 (argument)
    BITAND        reduce using rule 206 (argument)
    BITANDEQ      reduce using rule 206 (argument)
    BITCLEAR      reduce using rule 206 (argument)
    BITOR         reduce using rule 206 (argument)
    BITOREQ       reduce using rule 206 (argument)
    BITXOR        reduce using rule 206 (argument)
    BITXOREQ      reduce using rule 206 (argument)
    BOOLEAN       reduce using rule 206 (argument)
    BYTENUM       reduce using rule 206 (argument)
    CASSIGN       reduce using rule 206 (argument)
    COMMA         reduce using rule 206 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 206 (argument)
    DOUBLE        reduce using rule 206 (argument)
    DPROGRAM      reduce using rule 206 (argument)
    DSTACK        reduce using rule 206 (argument)
    DSTATE        reduce using rule 206 (argument)
    EQUAL         reduce using rule 206 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 206 (argument)
    FLOAT         reduce using rule 206 (argument)
    FOR           reduce using rule 206 (argument)
    FUNC          reduce using rule 206 (argument)
    GOTO          reduce using rule 206 (argument)
    GTHAN         reduce using rule 206 (argument)
    GTHANEQ       reduce using rule 206 (argument)
    IDENT         reduce using rule 206 (argument)
    IF            reduce using rule 206 (argument)
    IMPORT        reduce using rule 206 (argument)
    INFER         reduce using rule 206 (argument)
    INT           reduce using rule 206 (argument)
    LBRACE        reduce using rule 206 (argument)
    LEFTSHIFT     reduce using rule 206 (argument)
    LEFTSHIFTEQ   reduce using rule 206 (argument)
    LONG          reduce using rule 206 (argument)
    LPAREN        reduce using rule 206 (argument)
    LTHAN         reduce using rule 206 (argument)
    LTHANEQ       reduce using rule 206 (argument)
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 206 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 206 (argument)
    NEW           reduce using rule 206 (argument)
    NOT           reduce using rule 206 (argument)
    OR            reduce using rule 206 (argument)
    PACKAGE       reduce using rule 206 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 206 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 206 (argument)
    REM           reduce using rule 206 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 206 (argument)
    RETURN        reduce using rule 206 (argument)
    RIGHTSHIFT    reduce using rule 206 (argument)
    RIGHTSHIFTEQ  reduce using rule 206 (argument)
    RPAREN        reduce using rule 206 (argument)
    SFUNC         reduce using rule 206 (argument)
    SPACKAGE      reduce using rule 206 (argument)
    SSTRUCT       reduce using rule 206 (argument)
    STEP          reduce using rule 206 (argument)
    STRING        reduce using rule 206 (argument)
    TAG           reduce using rule 206 (argument)
    TSTEP         reduce using rule 206 (argument)
    TYPSTRUCT     reduce using rule 206 (argument)
    UNEQUAL       reduce using rule 206 (argument)
    VALUE         reduce using rule 206 (argument)
    VAR           reduce using rule 206 (argument)

state 144 // SFUNC IDENT LBRACE BOOLEAN RIGHTSHIFT BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  208 argument: argument RIGHTSHIFT nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 208 (argument)
    ';'           reduce using rule 208 (argument)
    ADDR          reduce using rule 208 (argument)
    AFF           reduce using rule 208 (argument)
    AND           reduce using rule 208 (argument)
    ASSIGN        reduce using rule 208 (argument)
    BASICTYPE     reduce using rule 208 (argument)
    BITAND        reduce using rule 208 (argument)
    BITANDEQ      reduce using rule 208 (argument)
    BITCLEAR      reduce using rule 208 (argument)
    BITOR         reduce using rule 208 (argument)
    BITOREQ       reduce using rule 208 (argument)
    BITXOR        reduce using rule 208 (argument)
    BITXOREQ      reduce using rule 208 (argument)
    BOOLEAN       reduce using rule 208 (argument)
    BYTENUM       reduce using rule 208 (argument)
    CASSIGN       reduce using rule 208 (argument)
    COMMA         reduce using rule 208 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 208 (argument)
    DOUBLE        reduce using rule 208 (argument)
    DPROGRAM      reduce using rule 208 (argument)
    DSTACK        reduce using rule 208 (argument)
    DSTATE        reduce using rule 208 (argument)
    EQUAL         reduce using rule 208 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 208 (argument)
    FLOAT         reduce using rule 208 (argument)
    FOR           reduce using rule 208 (argument)
    FUNC          reduce using rule 208 (argument)
    GOTO          reduce using rule 208 (argument)
    GTHAN         reduce using rule 208 (argument)
    GTHANEQ       reduce using rule 208 (argument)
    IDENT         reduce using rule 208 (argument)
    IF            reduce using rule 208 (argument)
    IMPORT        reduce using rule 208 (argument)
    INFER         reduce using rule 208 (argument)
    INT           reduce using rule 208 (argument)
    LBRACE        reduce using rule 208 (argument)
    LEFTSHIFT     reduce using rule 208 (argument)
    LEFTSHIFTEQ   reduce using rule 208 (argument)
    LONG          reduce using rule 208 (argument)
    LPAREN        reduce using rule 208 (argument)
    LTHAN         reduce using rule 208 (argument)
    LTHANEQ       reduce using rule 208 (argument)
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 208 (argument)
    MINUSMINUS    reduce using rule 208 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 208 (argument)
    NEW           reduce using rule 208 (argument)
    NOT           reduce using rule 208 (argument)
    OR            reduce using rule 208 (argument)
    PACKAGE       reduce using rule 208 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 208 (argument)
    PLUSPLUS      reduce using rule 208 (argument)
    RBRACE        reduce using rule 208 (argument)
    REM           reduce using rule 208 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 208 (argument)
    RETURN        reduce using rule 208 (argument)
    RIGHTSHIFT    reduce using rule 208 (argument)
    RIGHTSHIFTEQ  reduce using rule 208 (argument)
    RPAREN        reduce using rule 208 (argument)
    SFUNC         reduce using rule 208 (argument)
    SPACKAGE      reduce using rule 208 (argument)
    SSTRUCT       reduce using rule 208 (argument)
    STEP          reduce using rule 208 (argument)
    STRING        reduce using rule 208 (argument)
    TAG           reduce using rule 208 (argument)
    TSTEP         reduce using rule 208 (argument)
    TYPSTRUCT     reduce using rule 208 (argument)
    UNEQUAL       reduce using rule 208 (argument)
    VALUE         reduce using rule 208 (argument)
    VAR           reduce using rule 208 (argument)

state 145 // SFUNC IDENT LBRACE BOOLEAN LEFTSHIFT BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  202 argument: argument LEFTSHIFT argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 202 (argument)
    ';'           reduce using rule 202 (argument)
    ADDR          reduce using rule 202 (argument)
    AFF           reduce using rule 202 (argument)
    AND           reduce using rule 202 (argument)
    ASSIGN        reduce using rule 202 (argument)
    BASICTYPE     reduce using rule 202 (argument)
    BITAND        reduce using rule 202 (argument)
    BITANDEQ      reduce using rule 202 (argument)
    BITCLEAR      reduce using rule 202 (argument)
    BITOR         reduce using rule 202 (argument)
    BITOREQ       reduce using rule 202 (argument)
    BITXOR        reduce using rule 202 (argument)
    BITXOREQ      reduce using rule 202 (argument)
    BOOLEAN       reduce using rule 202 (argument)
    BYTENUM       reduce using rule 202 (argument)
    CASSIGN       reduce using rule 202 (argument)
    COMMA         reduce using rule 202 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 202 (argument)
    DOUBLE        reduce using rule 202 (argument)
    DPROGRAM      reduce using rule 202 (argument)
    DSTACK        reduce using rule 202 (argument)
    DSTATE        reduce using rule 202 (argument)
    EQUAL         reduce using rule 202 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 202 (argument)
    FLOAT         reduce using rule 202 (argument)
    FOR           reduce using rule 202 (argument)
    FUNC          reduce using rule 202 (argument)
    GOTO          reduce using rule 202 (argument)
    GTHAN         reduce using rule 202 (argument)
    GTHANEQ       reduce using rule 202 (argument)
    IDENT         reduce using rule 202 (argument)
    IF            reduce using rule 202 (argument)
    IMPORT        reduce using rule 202 (argument)
    INFER         reduce using rule 202 (argument)
    INT           reduce using rule 202 (argument)
    LBRACE        reduce using rule 202 (argument)
    LEFTSHIFT     reduce using rule 202 (argument)
    LEFTSHIFTEQ   reduce using rule 202 (argument)
    LONG          reduce using rule 202 (argument)
    LPAREN        reduce using rule 202 (argument)
    LTHAN         reduce using rule 202 (argument)
    LTHANEQ       reduce using rule 202 (argument)
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 202 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 202 (argument)
    NEW           reduce using rule 202 (argument)
    NOT           reduce using rule 202 (argument)
    OR            reduce using rule 202 (argument)
    PACKAGE       reduce using rule 202 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 202 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 202 (argument)
    REM           reduce using rule 202 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 202 (argument)
    RETURN        reduce using rule 202 (argument)
    RIGHTSHIFT    reduce using rule 202 (argument)
    RIGHTSHIFTEQ  reduce using rule 202 (argument)
    RPAREN        reduce using rule 202 (argument)
    SFUNC         reduce using rule 202 (argument)
    SPACKAGE      reduce using rule 202 (argument)
    SSTRUCT       reduce using rule 202 (argument)
    STEP          reduce using rule 202 (argument)
    STRING        reduce using rule 202 (argument)
    TAG           reduce using rule 202 (argument)
    TSTEP         reduce using rule 202 (argument)
    TYPSTRUCT     reduce using rule 202 (argument)
    UNEQUAL       reduce using rule 202 (argument)
    VALUE         reduce using rule 202 (argument)
    VAR           reduce using rule 202 (argument)

state 146 // SFUNC IDENT LBRACE BOOLEAN LEFTSHIFT BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  204 argument: argument LEFTSHIFT nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 204 (argument)
    ';'           reduce using rule 204 (argument)
    ADDR          reduce using rule 204 (argument)
    AFF           reduce using rule 204 (argument)
    AND           reduce using rule 204 (argument)
    ASSIGN        reduce using rule 204 (argument)
    BASICTYPE     reduce using rule 204 (argument)
    BITAND        reduce using rule 204 (argument)
    BITANDEQ      reduce using rule 204 (argument)
    BITCLEAR      reduce using rule 204 (argument)
    BITOR         reduce using rule 204 (argument)
    BITOREQ       reduce using rule 204 (argument)
    BITXOR        reduce using rule 204 (argument)
    BITXOREQ      reduce using rule 204 (argument)
    BOOLEAN       reduce using rule 204 (argument)
    BYTENUM       reduce using rule 204 (argument)
    CASSIGN       reduce using rule 204 (argument)
    COMMA         reduce using rule 204 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 204 (argument)
    DOUBLE        reduce using rule 204 (argument)
    DPROGRAM      reduce using rule 204 (argument)
    DSTACK        reduce using rule 204 (argument)
    DSTATE        reduce using rule 204 (argument)
    EQUAL         reduce using rule 204 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 204 (argument)
    FLOAT         reduce using rule 204 (argument)
    FOR           reduce using rule 204 (argument)
    FUNC          reduce using rule 204 (argument)
    GOTO          reduce using rule 204 (argument)
    GTHAN         reduce using rule 204 (argument)
    GTHANEQ       reduce using rule 204 (argument)
    IDENT         reduce using rule 204 (argument)
    IF            reduce using rule 204 (argument)
    IMPORT        reduce using rule 204 (argument)
    INFER         reduce using rule 204 (argument)
    INT           reduce using rule 204 (argument)
    LBRACE        reduce using rule 204 (argument)
    LEFTSHIFT     reduce using rule 204 (argument)
    LEFTSHIFTEQ   reduce using rule 204 (argument)
    LONG          reduce using rule 204 (argument)
    LPAREN        reduce using rule 204 (argument)
    LTHAN         reduce using rule 204 (argument)
    LTHANEQ       reduce using rule 204 (argument)
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 204 (argument)
    MINUSMINUS    reduce using rule 204 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 204 (argument)
    NEW           reduce using rule 204 (argument)
    NOT           reduce using rule 204 (argument)
    OR            reduce using rule 204 (argument)
    PACKAGE       reduce using rule 204 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 204 (argument)
    PLUSPLUS      reduce using rule 204 (argument)
    RBRACE        reduce using rule 204 (argument)
    REM           reduce using rule 204 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 204 (argument)
    RETURN        reduce using rule 204 (argument)
    RIGHTSHIFT    reduce using rule 204 (argument)
    RIGHTSHIFTEQ  reduce using rule 204 (argument)
    RPAREN        reduce using rule 204 (argument)
    SFUNC         reduce using rule 204 (argument)
    SPACKAGE      reduce using rule 204 (argument)
    SSTRUCT       reduce using rule 204 (argument)
    STEP          reduce using rule 204 (argument)
    STRING        reduce using rule 204 (argument)
    TAG           reduce using rule 204 (argument)
    TSTEP         reduce using rule 204 (argument)
    TYPSTRUCT     reduce using rule 204 (argument)
    UNEQUAL       reduce using rule 204 (argument)
    VALUE         reduce using rule 204 (argument)
    VAR           reduce using rule 204 (argument)

state 147 // SFUNC IDENT LBRACE BOOLEAN REMAINDER BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  198 argument: argument REMAINDER argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 198 (argument)
    ';'           reduce using rule 198 (argument)
    ADDR          reduce using rule 198 (argument)
    AFF           reduce using rule 198 (argument)
    AND           reduce using rule 198 (argument)
    ASSIGN        reduce using rule 198 (argument)
    BASICTYPE     reduce using rule 198 (argument)
    BITAND        reduce using rule 198 (argument)
    BITANDEQ      reduce using rule 198 (argument)
    BITCLEAR      reduce using rule 198 (argument)
    BITOR         reduce using rule 198 (argument)
    BITOREQ       reduce using rule 198 (argument)
    BITXOR        reduce using rule 198 (argument)
    BITXOREQ      reduce using rule 198 (argument)
    BOOLEAN       reduce using rule 198 (argument)
    BYTENUM       reduce using rule 198 (argument)
    CASSIGN       reduce using rule 198 (argument)
    COMMA         reduce using rule 198 (argument)
    DIV           reduce using rule 198 (argument)
    DIVEQ         reduce using rule 198 (argument)
    DOUBLE        reduce using rule 198 (argument)
    DPROGRAM      reduce using rule 198 (argument)
    DSTACK        reduce using rule 198 (argument)
    DSTATE        reduce using rule 198 (argument)
    EQUAL         reduce using rule 198 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 198 (argument)
    FLOAT         reduce using rule 198 (argument)
    FOR           reduce using rule 198 (argument)
    FUNC          reduce using rule 198 (argument)
    GOTO          reduce using rule 198 (argument)
    GTHAN         reduce using rule 198 (argument)
    GTHANEQ       reduce using rule 198 (argument)
    IDENT         reduce using rule 198 (argument)
    IF            reduce using rule 198 (argument)
    IMPORT        reduce using rule 198 (argument)
    INFER         reduce using rule 198 (argument)
    INT           reduce using rule 198 (argument)
    LBRACE        reduce using rule 198 (argument)
    LEFTSHIFT     reduce using rule 198 (argument)
    LEFTSHIFTEQ   reduce using rule 198 (argument)
    LONG          reduce using rule 198 (argument)
    LPAREN        reduce using rule 198 (argument)
    LTHAN         reduce using rule 198 (argument)
    LTHANEQ       reduce using rule 198 (argument)
    MINUS         reduce using rule 198 (argument)
    MINUSEQ       reduce using rule 198 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          reduce using rule 198 (argument)
    MULTEQ        reduce using rule 198 (argument)
    NEW           reduce using rule 198 (argument)
    NOT           reduce using rule 198 (argument)
    OR            reduce using rule 198 (argument)
    PACKAGE       reduce using rule 198 (argument)
    PLUS          reduce using rule 198 (argument)
    PLUSEQ        reduce using rule 198 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 198 (argument)
    REM           reduce using rule 198 (argument)
    REMAINDER     reduce using rule 198 (argument)
    REMAINDEREQ   reduce using rule 198 (argument)
    RETURN        reduce using rule 198 (argument)
    RIGHTSHIFT    reduce using rule 198 (argument)
    RIGHTSHIFTEQ  reduce using rule 198 (argument)
    RPAREN        reduce using rule 198 (argument)
    SFUNC         reduce using rule 198 (argument)
    SPACKAGE      reduce using rule 198 (argument)
    SSTRUCT       reduce using rule 198 (argument)
    STEP          reduce using rule 198 (argument)
    STRING        reduce using rule 198 (argument)
    TAG           reduce using rule 198 (argument)
    TSTEP         reduce using rule 198 (argument)
    TYPSTRUCT     reduce using rule 198 (argument)
    UNEQUAL       reduce using rule 198 (argument)
    VALUE         reduce using rule 198 (argument)
    VAR           reduce using rule 198 (argument)

state 148 // SFUNC IDENT LBRACE BOOLEAN REMAINDER BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  200 argument: argument REMAINDER nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 200 (argument)
    ';'           reduce using rule 200 (argument)
    ADDR          reduce using rule 200 (argument)
    AFF           reduce using rule 200 (argument)
    AND           reduce using rule 200 (argument)
    ASSIGN        reduce using rule 200 (argument)
    BASICTYPE     reduce using rule 200 (argument)
    BITAND        reduce using rule 200 (argument)
    BITANDEQ      reduce using rule 200 (argument)
    BITCLEAR      reduce using rule 200 (argument)
    BITOR         reduce using rule 200 (argument)
    BITOREQ       reduce using rule 200 (argument)
    BITXOR        reduce using rule 200 (argument)
    BITXOREQ      reduce using rule 200 (argument)
    BOOLEAN       reduce using rule 200 (argument)
    BYTENUM       reduce using rule 200 (argument)
    CASSIGN       reduce using rule 200 (argument)
    COMMA         reduce using rule 200 (argument)
    DIV           reduce using rule 200 (argument)
    DIVEQ         reduce using rule 200 (argument)
    DOUBLE        reduce using rule 200 (argument)
    DPROGRAM      reduce using rule 200 (argument)
    DSTACK        reduce using rule 200 (argument)
    DSTATE        reduce using rule 200 (argument)
    EQUAL         reduce using rule 200 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 200 (argument)
    FLOAT         reduce using rule 200 (argument)
    FOR           reduce using rule 200 (argument)
    FUNC          reduce using rule 200 (argument)
    GOTO          reduce using rule 200 (argument)
    GTHAN         reduce using rule 200 (argument)
    GTHANEQ       reduce using rule 200 (argument)
    IDENT         reduce using rule 200 (argument)
    IF            reduce using rule 200 (argument)
    IMPORT        reduce using rule 200 (argument)
    INFER         reduce using rule 200 (argument)
    INT           reduce using rule 200 (argument)
    LBRACE        reduce using rule 200 (argument)
    LEFTSHIFT     reduce using rule 200 (argument)
    LEFTSHIFTEQ   reduce using rule 200 (argument)
    LONG          reduce using rule 200 (argument)
    LPAREN        reduce using rule 200 (argument)
    LTHAN         reduce using rule 200 (argument)
    LTHANEQ       reduce using rule 200 (argument)
    MINUS         reduce using rule 200 (argument)
    MINUSEQ       reduce using rule 200 (argument)
    MINUSMINUS    reduce using rule 200 (argument)
    MULT          reduce using rule 200 (argument)
    MULTEQ        reduce using rule 200 (argument)
    NEW           reduce using rule 200 (argument)
    NOT           reduce using rule 200 (argument)
    OR            reduce using rule 200 (argument)
    PACKAGE       reduce using rule 200 (argument)
    PLUS          reduce using rule 200 (argument)
    PLUSEQ        reduce using rule 200 (argument)
    PLUSPLUS      reduce using rule 200 (argument)
    RBRACE        reduce using rule 200 (argument)
    REM           reduce using rule 200 (argument)
    REMAINDER     reduce using rule 200 (argument)
    REMAINDEREQ   reduce using rule 200 (argument)
    RETURN        reduce using rule 200 (argument)
    RIGHTSHIFT    reduce using rule 200 (argument)
    RIGHTSHIFTEQ  reduce using rule 200 (argument)
    RPAREN        reduce using rule 200 (argument)
    SFUNC         reduce using rule 200 (argument)
    SPACKAGE      reduce using rule 200 (argument)
    SSTRUCT       reduce using rule 200 (argument)
    STEP          reduce using rule 200 (argument)
    STRING        reduce using rule 200 (argument)
    TAG           reduce using rule 200 (argument)
    TSTEP         reduce using rule 200 (argument)
    TYPSTRUCT     reduce using rule 200 (argument)
    UNEQUAL       reduce using rule 200 (argument)
    VALUE         reduce using rule 200 (argument)
    VAR           reduce using rule 200 (argument)

state 149 // SFUNC IDENT LBRACE BOOLEAN DIV BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  194 argument: argument DIV argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 194 (argument)
    ';'           reduce using rule 194 (argument)
    ADDR          reduce using rule 194 (argument)
    AFF           reduce using rule 194 (argument)
    AND           reduce using rule 194 (argument)
    ASSIGN        reduce using rule 194 (argument)
    BASICTYPE     reduce using rule 194 (argument)
    BITAND        reduce using rule 194 (argument)
    BITANDEQ      reduce using rule 194 (argument)
    BITCLEAR      reduce using rule 194 (argument)
    BITOR         reduce using rule 194 (argument)
    BITOREQ       reduce using rule 194 (argument)
    BITXOR        reduce using rule 194 (argument)
    BITXOREQ      reduce using rule 194 (argument)
    BOOLEAN       reduce using rule 194 (argument)
    BYTENUM       reduce using rule 194 (argument)
    CASSIGN       reduce using rule 194 (argument)
    COMMA         reduce using rule 194 (argument)
    DIV           reduce using rule 194 (argument)
    DIVEQ         reduce using rule 194 (argument)
    DOUBLE        reduce using rule 194 (argument)
    DPROGRAM      reduce using rule 194 (argument)
    DSTACK        reduce using rule 194 (argument)
    DSTATE        reduce using rule 194 (argument)
    EQUAL         reduce using rule 194 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 194 (argument)
    FLOAT         reduce using rule 194 (argument)
    FOR           reduce using rule 194 (argument)
    FUNC          reduce using rule 194 (argument)
    GOTO          reduce using rule 194 (argument)
    GTHAN         reduce using rule 194 (argument)
    GTHANEQ       reduce using rule 194 (argument)
    IDENT         reduce using rule 194 (argument)
    IF            reduce using rule 194 (argument)
    IMPORT        reduce using rule 194 (argument)
    INFER         reduce using rule 194 (argument)
    INT           reduce using rule 194 (argument)
    LBRACE        reduce using rule 194 (argument)
    LEFTSHIFT     reduce using rule 194 (argument)
    LEFTSHIFTEQ   reduce using rule 194 (argument)
    LONG          reduce using rule 194 (argument)
    LPAREN        reduce using rule 194 (argument)
    LTHAN         reduce using rule 194 (argument)
    LTHANEQ       reduce using rule 194 (argument)
    MINUS         reduce using rule 194 (argument)
    MINUSEQ       reduce using rule 194 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          reduce using rule 194 (argument)
    MULTEQ        reduce using rule 194 (argument)
    NEW           reduce using rule 194 (argument)
    NOT           reduce using rule 194 (argument)
    OR            reduce using rule 194 (argument)
    PACKAGE       reduce using rule 194 (argument)
    PLUS          reduce using rule 194 (argument)
    PLUSEQ        reduce using rule 194 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 194 (argument)
    REM           reduce using rule 194 (argument)
    REMAINDER     reduce using rule 194 (argument)
    REMAINDEREQ   reduce using rule 194 (argument)
    RETURN        reduce using rule 194 (argument)
    RIGHTSHIFT    reduce using rule 194 (argument)
    RIGHTSHIFTEQ  reduce using rule 194 (argument)
    RPAREN        reduce using rule 194 (argument)
    SFUNC         reduce using rule 194 (argument)
    SPACKAGE      reduce using rule 194 (argument)
    SSTRUCT       reduce using rule 194 (argument)
    STEP          reduce using rule 194 (argument)
    STRING        reduce using rule 194 (argument)
    TAG           reduce using rule 194 (argument)
    TSTEP         reduce using rule 194 (argument)
    TYPSTRUCT     reduce using rule 194 (argument)
    UNEQUAL       reduce using rule 194 (argument)
    VALUE         reduce using rule 194 (argument)
    VAR           reduce using rule 194 (argument)

state 150 // SFUNC IDENT LBRACE BOOLEAN DIV BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  196 argument: argument DIV nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 196 (argument)
    ';'           reduce using rule 196 (argument)
    ADDR          reduce using rule 196 (argument)
    AFF           reduce using rule 196 (argument)
    AND           reduce using rule 196 (argument)
    ASSIGN        reduce using rule 196 (argument)
    BASICTYPE     reduce using rule 196 (argument)
    BITAND        reduce using rule 196 (argument)
    BITANDEQ      reduce using rule 196 (argument)
    BITCLEAR      reduce using rule 196 (argument)
    BITOR         reduce using rule 196 (argument)
    BITOREQ       reduce using rule 196 (argument)
    BITXOR        reduce using rule 196 (argument)
    BITXOREQ      reduce using rule 196 (argument)
    BOOLEAN       reduce using rule 196 (argument)
    BYTENUM       reduce using rule 196 (argument)
    CASSIGN       reduce using rule 196 (argument)
    COMMA         reduce using rule 196 (argument)
    DIV           reduce using rule 196 (argument)
    DIVEQ         reduce using rule 196 (argument)
    DOUBLE        reduce using rule 196 (argument)
    DPROGRAM      reduce using rule 196 (argument)
    DSTACK        reduce using rule 196 (argument)
    DSTATE        reduce using rule 196 (argument)
    EQUAL         reduce using rule 196 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 196 (argument)
    FLOAT         reduce using rule 196 (argument)
    FOR           reduce using rule 196 (argument)
    FUNC          reduce using rule 196 (argument)
    GOTO          reduce using rule 196 (argument)
    GTHAN         reduce using rule 196 (argument)
    GTHANEQ       reduce using rule 196 (argument)
    IDENT         reduce using rule 196 (argument)
    IF            reduce using rule 196 (argument)
    IMPORT        reduce using rule 196 (argument)
    INFER         reduce using rule 196 (argument)
    INT           reduce using rule 196 (argument)
    LBRACE        reduce using rule 196 (argument)
    LEFTSHIFT     reduce using rule 196 (argument)
    LEFTSHIFTEQ   reduce using rule 196 (argument)
    LONG          reduce using rule 196 (argument)
    LPAREN        reduce using rule 196 (argument)
    LTHAN         reduce using rule 196 (argument)
    LTHANEQ       reduce using rule 196 (argument)
    MINUS         reduce using rule 196 (argument)
    MINUSEQ       reduce using rule 196 (argument)
    MINUSMINUS    reduce using rule 196 (argument)
    MULT          reduce using rule 196 (argument)
    MULTEQ        reduce using rule 196 (argument)
    NEW           reduce using rule 196 (argument)
    NOT           reduce using rule 196 (argument)
    OR            reduce using rule 196 (argument)
    PACKAGE       reduce using rule 196 (argument)
    PLUS          reduce using rule 196 (argument)
    PLUSEQ        reduce using rule 196 (argument)
    PLUSPLUS      reduce using rule 196 (argument)
    RBRACE        reduce using rule 196 (argument)
    REM           reduce using rule 196 (argument)
    REMAINDER     reduce using rule 196 (argument)
    REMAINDEREQ   reduce using rule 196 (argument)
    RETURN        reduce using rule 196 (argument)
    RIGHTSHIFT    reduce using rule 196 (argument)
    RIGHTSHIFTEQ  reduce using rule 196 (argument)
    RPAREN        reduce using rule 196 (argument)
    SFUNC         reduce using rule 196 (argument)
    SPACKAGE      reduce using rule 196 (argument)
    SSTRUCT       reduce using rule 196 (argument)
    STEP          reduce using rule 196 (argument)
    STRING        reduce using rule 196 (argument)
    TAG           reduce using rule 196 (argument)
    TSTEP         reduce using rule 196 (argument)
    TYPSTRUCT     reduce using rule 196 (argument)
    UNEQUAL       reduce using rule 196 (argument)
    VALUE         reduce using rule 196 (argument)
    VAR           reduce using rule 196 (argument)

state 151 // SFUNC IDENT LBRACE BOOLEAN MULT BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  190 argument: argument MULT argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 190 (argument)
    ';'           reduce using rule 190 (argument)
    ADDR          reduce using rule 190 (argument)
    AFF           reduce using rule 190 (argument)
    AND           reduce using rule 190 (argument)
    ASSIGN        reduce using rule 190 (argument)
    BASICTYPE     reduce using rule 190 (argument)
    BITAND        reduce using rule 190 (argument)
    BITANDEQ      reduce using rule 190 (argument)
    BITCLEAR      reduce using rule 190 (argument)
    BITOR         reduce using rule 190 (argument)
    BITOREQ       reduce using rule 190 (argument)
    BITXOR        reduce using rule 190 (argument)
    BITXOREQ      reduce using rule 190 (argument)
    BOOLEAN       reduce using rule 190 (argument)
    BYTENUM       reduce using rule 190 (argument)
    CASSIGN       reduce using rule 190 (argument)
    COMMA         reduce using rule 190 (argument)
    DIV           reduce using rule 190 (argument)
    DIVEQ         reduce using rule 190 (argument)
    DOUBLE        reduce using rule 190 (argument)
    DPROGRAM      reduce using rule 190 (argument)
    DSTACK        reduce using rule 190 (argument)
    DSTATE        reduce using rule 190 (argument)
    EQUAL         reduce using rule 190 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 190 (argument)
    FLOAT         reduce using rule 190 (argument)
    FOR           reduce using rule 190 (argument)
    FUNC          reduce using rule 190 (argument)
    GOTO          reduce using rule 190 (argument)
    GTHAN         reduce using rule 190 (argument)
    GTHANEQ       reduce using rule 190 (argument)
    IDENT         reduce using rule 190 (argument)
    IF            reduce using rule 190 (argument)
    IMPORT        reduce using rule 190 (argument)
    INFER         reduce using rule 190 (argument)
    INT           reduce using rule 190 (argument)
    LBRACE        reduce using rule 190 (argument)
    LEFTSHIFT     reduce using rule 190 (argument)
    LEFTSHIFTEQ   reduce using rule 190 (argument)
    LONG          reduce using rule 190 (argument)
    LPAREN        reduce using rule 190 (argument)
    LTHAN         reduce using rule 190 (argument)
    LTHANEQ       reduce using rule 190 (argument)
    MINUS         reduce using rule 190 (argument)
    MINUSEQ       reduce using rule 190 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          reduce using rule 190 (argument)
    MULTEQ        reduce using rule 190 (argument)
    NEW           reduce using rule 190 (argument)
    NOT           reduce using rule 190 (argument)
    OR            reduce using rule 190 (argument)
    PACKAGE       reduce using rule 190 (argument)
    PLUS          reduce using rule 190 (argument)
    PLUSEQ        reduce using rule 190 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 190 (argument)
    REM           reduce using rule 190 (argument)
    REMAINDER     reduce using rule 190 (argument)
    REMAINDEREQ   reduce using rule 190 (argument)
    RETURN        reduce using rule 190 (argument)
    RIGHTSHIFT    reduce using rule 190 (argument)
    RIGHTSHIFTEQ  reduce using rule 190 (argument)
    RPAREN        reduce using rule 190 (argument)
    SFUNC         reduce using rule 190 (argument)
    SPACKAGE      reduce using rule 190 (argument)
    SSTRUCT       reduce using rule 190 (argument)
    STEP          reduce using rule 190 (argument)
    STRING        reduce using rule 190 (argument)
    TAG           reduce using rule 190 (argument)
    TSTEP         reduce using rule 190 (argument)
    TYPSTRUCT     reduce using rule 190 (argument)
    UNEQUAL       reduce using rule 190 (argument)
    VALUE         reduce using rule 190 (argument)
    VAR           reduce using rule 190 (argument)

state 152 // SFUNC IDENT LBRACE BOOLEAN MULT BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  192 argument: argument MULT nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 192 (argument)
    ';'           reduce using rule 192 (argument)
    ADDR          reduce using rule 192 (argument)
    AFF           reduce using rule 192 (argument)
    AND           reduce using rule 192 (argument)
    ASSIGN        reduce using rule 192 (argument)
    BASICTYPE     reduce using rule 192 (argument)
    BITAND        reduce using rule 192 (argument)
    BITANDEQ      reduce using rule 192 (argument)
    BITCLEAR      reduce using rule 192 (argument)
    BITOR         reduce using rule 192 (argument)
    BITOREQ       reduce using rule 192 (argument)
    BITXOR        reduce using rule 192 (argument)
    BITXOREQ      reduce using rule 192 (argument)
    BOOLEAN       reduce using rule 192 (argument)
    BYTENUM       reduce using rule 192 (argument)
    CASSIGN       reduce using rule 192 (argument)
    COMMA         reduce using rule 192 (argument)
    DIV           reduce using rule 192 (argument)
    DIVEQ         reduce using rule 192 (argument)
    DOUBLE        reduce using rule 192 (argument)
    DPROGRAM      reduce using rule 192 (argument)
    DSTACK        reduce using rule 192 (argument)
    DSTATE        reduce using rule 192 (argument)
    EQUAL         reduce using rule 192 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 192 (argument)
    FLOAT         reduce using rule 192 (argument)
    FOR           reduce using rule 192 (argument)
    FUNC          reduce using rule 192 (argument)
    GOTO          reduce using rule 192 (argument)
    GTHAN         reduce using rule 192 (argument)
    GTHANEQ       reduce using rule 192 (argument)
    IDENT         reduce using rule 192 (argument)
    IF            reduce using rule 192 (argument)
    IMPORT        reduce using rule 192 (argument)
    INFER         reduce using rule 192 (argument)
    INT           reduce using rule 192 (argument)
    LBRACE        reduce using rule 192 (argument)
    LEFTSHIFT     reduce using rule 192 (argument)
    LEFTSHIFTEQ   reduce using rule 192 (argument)
    LONG          reduce using rule 192 (argument)
    LPAREN        reduce using rule 192 (argument)
    LTHAN         reduce using rule 192 (argument)
    LTHANEQ       reduce using rule 192 (argument)
    MINUS         reduce using rule 192 (argument)
    MINUSEQ       reduce using rule 192 (argument)
    MINUSMINUS    reduce using rule 192 (argument)
    MULT          reduce using rule 192 (argument)
    MULTEQ        reduce using rule 192 (argument)
    NEW           reduce using rule 192 (argument)
    NOT           reduce using rule 192 (argument)
    OR            reduce using rule 192 (argument)
    PACKAGE       reduce using rule 192 (argument)
    PLUS          reduce using rule 192 (argument)
    PLUSEQ        reduce using rule 192 (argument)
    PLUSPLUS      reduce using rule 192 (argument)
    RBRACE        reduce using rule 192 (argument)
    REM           reduce using rule 192 (argument)
    REMAINDER     reduce using rule 192 (argument)
    REMAINDEREQ   reduce using rule 192 (argument)
    RETURN        reduce using rule 192 (argument)
    RIGHTSHIFT    reduce using rule 192 (argument)
    RIGHTSHIFTEQ  reduce using rule 192 (argument)
    RPAREN        reduce using rule 192 (argument)
    SFUNC         reduce using rule 192 (argument)
    SPACKAGE      reduce using rule 192 (argument)
    SSTRUCT       reduce using rule 192 (argument)
    STEP          reduce using rule 192 (argument)
    STRING        reduce using rule 192 (argument)
    TAG           reduce using rule 192 (argument)
    TSTEP         reduce using rule 192 (argument)
    TYPSTRUCT     reduce using rule 192 (argument)
    UNEQUAL       reduce using rule 192 (argument)
    VALUE         reduce using rule 192 (argument)
    VAR           reduce using rule 192 (argument)

state 153 // SFUNC IDENT LBRACE BOOLEAN MINUS BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  186 argument: argument MINUS argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 186 (argument)
    ';'           reduce using rule 186 (argument)
    ADDR          reduce using rule 186 (argument)
    AFF           reduce using rule 186 (argument)
    AND           reduce using rule 186 (argument)
    ASSIGN        reduce using rule 186 (argument)
    BASICTYPE     reduce using rule 186 (argument)
    BITAND        reduce using rule 186 (argument)
    BITANDEQ      reduce using rule 186 (argument)
    BITCLEAR      reduce using rule 186 (argument)
    BITOR         reduce using rule 186 (argument)
    BITOREQ       reduce using rule 186 (argument)
    BITXOR        reduce using rule 186 (argument)
    BITXOREQ      reduce using rule 186 (argument)
    BOOLEAN       reduce using rule 186 (argument)
    BYTENUM       reduce using rule 186 (argument)
    CASSIGN       reduce using rule 186 (argument)
    COMMA         reduce using rule 186 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 186 (argument)
    DOUBLE        reduce using rule 186 (argument)
    DPROGRAM      reduce using rule 186 (argument)
    DSTACK        reduce using rule 186 (argument)
    DSTATE        reduce using rule 186 (argument)
    EQUAL         reduce using rule 186 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 186 (argument)
    FLOAT         reduce using rule 186 (argument)
    FOR           reduce using rule 186 (argument)
    FUNC          reduce using rule 186 (argument)
    GOTO          reduce using rule 186 (argument)
    GTHAN         reduce using rule 186 (argument)
    GTHANEQ       reduce using rule 186 (argument)
    IDENT         reduce using rule 186 (argument)
    IF            reduce using rule 186 (argument)
    IMPORT        reduce using rule 186 (argument)
    INFER         reduce using rule 186 (argument)
    INT           reduce using rule 186 (argument)
    LBRACE        reduce using rule 186 (argument)
    LEFTSHIFT     reduce using rule 186 (argument)
    LEFTSHIFTEQ   reduce using rule 186 (argument)
    LONG          reduce using rule 186 (argument)
    LPAREN        reduce using rule 186 (argument)
    LTHAN         reduce using rule 186 (argument)
    LTHANEQ       reduce using rule 186 (argument)
    MINUS         reduce using rule 186 (argument)
    MINUSEQ       reduce using rule 186 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 186 (argument)
    NEW           reduce using rule 186 (argument)
    NOT           reduce using rule 186 (argument)
    OR            reduce using rule 186 (argument)
    PACKAGE       reduce using rule 186 (argument)
    PLUS          reduce using rule 186 (argument)
    PLUSEQ        reduce using rule 186 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 186 (argument)
    REM           reduce using rule 186 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 186 (argument)
    RETURN        reduce using rule 186 (argument)
    RIGHTSHIFT    reduce using rule 186 (argument)
    RIGHTSHIFTEQ  reduce using rule 186 (argument)
    RPAREN        reduce using rule 186 (argument)
    SFUNC         reduce using rule 186 (argument)
    SPACKAGE      reduce using rule 186 (argument)
    SSTRUCT       reduce using rule 186 (argument)
    STEP          reduce using rule 186 (argument)
    STRING        reduce using rule 186 (argument)
    TAG           reduce using rule 186 (argument)
    TSTEP         reduce using rule 186 (argument)
    TYPSTRUCT     reduce using rule 186 (argument)
    UNEQUAL       reduce using rule 186 (argument)
    VALUE         reduce using rule 186 (argument)
    VAR           reduce using rule 186 (argument)

state 154 // SFUNC IDENT LBRACE BOOLEAN MINUS BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  188 argument: argument MINUS nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 188 (argument)
    ';'           reduce using rule 188 (argument)
    ADDR          reduce using rule 188 (argument)
    AFF           reduce using rule 188 (argument)
    AND           reduce using rule 188 (argument)
    ASSIGN        reduce using rule 188 (argument)
    BASICTYPE     reduce using rule 188 (argument)
    BITAND        reduce using rule 188 (argument)
    BITANDEQ      reduce using rule 188 (argument)
    BITCLEAR      reduce using rule 188 (argument)
    BITOR         reduce using rule 188 (argument)
    BITOREQ       reduce using rule 188 (argument)
    BITXOR        reduce using rule 188 (argument)
    BITXOREQ      reduce using rule 188 (argument)
    BOOLEAN       reduce using rule 188 (argument)
    BYTENUM       reduce using rule 188 (argument)
    CASSIGN       reduce using rule 188 (argument)
    COMMA         reduce using rule 188 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 188 (argument)
    DOUBLE        reduce using rule 188 (argument)
    DPROGRAM      reduce using rule 188 (argument)
    DSTACK        reduce using rule 188 (argument)
    DSTATE        reduce using rule 188 (argument)
    EQUAL         reduce using rule 188 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 188 (argument)
    FLOAT         reduce using rule 188 (argument)
    FOR           reduce using rule 188 (argument)
    FUNC          reduce using rule 188 (argument)
    GOTO          reduce using rule 188 (argument)
    GTHAN         reduce using rule 188 (argument)
    GTHANEQ       reduce using rule 188 (argument)
    IDENT         reduce using rule 188 (argument)
    IF            reduce using rule 188 (argument)
    IMPORT        reduce using rule 188 (argument)
    INFER         reduce using rule 188 (argument)
    INT           reduce using rule 188 (argument)
    LBRACE        reduce using rule 188 (argument)
    LEFTSHIFT     reduce using rule 188 (argument)
    LEFTSHIFTEQ   reduce using rule 188 (argument)
    LONG          reduce using rule 188 (argument)
    LPAREN        reduce using rule 188 (argument)
    LTHAN         reduce using rule 188 (argument)
    LTHANEQ       reduce using rule 188 (argument)
    MINUS         reduce using rule 188 (argument)
    MINUSEQ       reduce using rule 188 (argument)
    MINUSMINUS    reduce using rule 188 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 188 (argument)
    NEW           reduce using rule 188 (argument)
    NOT           reduce using rule 188 (argument)
    OR            reduce using rule 188 (argument)
    PACKAGE       reduce using rule 188 (argument)
    PLUS          reduce using rule 188 (argument)
    PLUSEQ        reduce using rule 188 (argument)
    PLUSPLUS      reduce using rule 188 (argument)
    RBRACE        reduce using rule 188 (argument)
    REM           reduce using rule 188 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 188 (argument)
    RETURN        reduce using rule 188 (argument)
    RIGHTSHIFT    reduce using rule 188 (argument)
    RIGHTSHIFTEQ  reduce using rule 188 (argument)
    RPAREN        reduce using rule 188 (argument)
    SFUNC         reduce using rule 188 (argument)
    SPACKAGE      reduce using rule 188 (argument)
    SSTRUCT       reduce using rule 188 (argument)
    STEP          reduce using rule 188 (argument)
    STRING        reduce using rule 188 (argument)
    TAG           reduce using rule 188 (argument)
    TSTEP         reduce using rule 188 (argument)
    TYPSTRUCT     reduce using rule 188 (argument)
    UNEQUAL       reduce using rule 188 (argument)
    VALUE         reduce using rule 188 (argument)
    VAR           reduce using rule 188 (argument)

state 155 // SFUNC IDENT LBRACE BOOLEAN PLUS BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  182 argument: argument PLUS argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 182 (argument)
    ';'           reduce using rule 182 (argument)
    ADDR          reduce using rule 182 (argument)
    AFF           reduce using rule 182 (argument)
    AND           reduce using rule 182 (argument)
    ASSIGN        reduce using rule 182 (argument)
    BASICTYPE     reduce using rule 182 (argument)
    BITAND        reduce using rule 182 (argument)
    BITANDEQ      reduce using rule 182 (argument)
    BITCLEAR      reduce using rule 182 (argument)
    BITOR         reduce using rule 182 (argument)
    BITOREQ       reduce using rule 182 (argument)
    BITXOR        reduce using rule 182 (argument)
    BITXOREQ      reduce using rule 182 (argument)
    BOOLEAN       reduce using rule 182 (argument)
    BYTENUM       reduce using rule 182 (argument)
    CASSIGN       reduce using rule 182 (argument)
    COMMA         reduce using rule 182 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 182 (argument)
    DOUBLE        reduce using rule 182 (argument)
    DPROGRAM      reduce using rule 182 (argument)
    DSTACK        reduce using rule 182 (argument)
    DSTATE        reduce using rule 182 (argument)
    EQUAL         reduce using rule 182 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 182 (argument)
    FLOAT         reduce using rule 182 (argument)
    FOR           reduce using rule 182 (argument)
    FUNC          reduce using rule 182 (argument)
    GOTO          reduce using rule 182 (argument)
    GTHAN         reduce using rule 182 (argument)
    GTHANEQ       reduce using rule 182 (argument)
    IDENT         reduce using rule 182 (argument)
    IF            reduce using rule 182 (argument)
    IMPORT        reduce using rule 182 (argument)
    INFER         reduce using rule 182 (argument)
    INT           reduce using rule 182 (argument)
    LBRACE        reduce using rule 182 (argument)
    LEFTSHIFT     reduce using rule 182 (argument)
    LEFTSHIFTEQ   reduce using rule 182 (argument)
    LONG          reduce using rule 182 (argument)
    LPAREN        reduce using rule 182 (argument)
    LTHAN         reduce using rule 182 (argument)
    LTHANEQ       reduce using rule 182 (argument)
    MINUS         reduce using rule 182 (argument)
    MINUSEQ       reduce using rule 182 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 182 (argument)
    NEW           reduce using rule 182 (argument)
    NOT           reduce using rule 182 (argument)
    OR            reduce using rule 182 (argument)
    PACKAGE       reduce using rule 182 (argument)
    PLUS          reduce using rule 182 (argument)
    PLUSEQ        reduce using rule 182 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 182 (argument)
    REM           reduce using rule 182 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 182 (argument)
    RETURN        reduce using rule 182 (argument)
    RIGHTSHIFT    reduce using rule 182 (argument)
    RIGHTSHIFTEQ  reduce using rule 182 (argument)
    RPAREN        reduce using rule 182 (argument)
    SFUNC         reduce using rule 182 (argument)
    SPACKAGE      reduce using rule 182 (argument)
    SSTRUCT       reduce using rule 182 (argument)
    STEP          reduce using rule 182 (argument)
    STRING        reduce using rule 182 (argument)
    TAG           reduce using rule 182 (argument)
    TSTEP         reduce using rule 182 (argument)
    TYPSTRUCT     reduce using rule 182 (argument)
    UNEQUAL       reduce using rule 182 (argument)
    VALUE         reduce using rule 182 (argument)
    VAR           reduce using rule 182 (argument)

state 156 // SFUNC IDENT LBRACE BOOLEAN PLUS BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  184 argument: argument PLUS nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 184 (argument)
    ';'           reduce using rule 184 (argument)
    ADDR          reduce using rule 184 (argument)
    AFF           reduce using rule 184 (argument)
    AND           reduce using rule 184 (argument)
    ASSIGN        reduce using rule 184 (argument)
    BASICTYPE     reduce using rule 184 (argument)
    BITAND        reduce using rule 184 (argument)
    BITANDEQ      reduce using rule 184 (argument)
    BITCLEAR      reduce using rule 184 (argument)
    BITOR         reduce using rule 184 (argument)
    BITOREQ       reduce using rule 184 (argument)
    BITXOR        reduce using rule 184 (argument)
    BITXOREQ      reduce using rule 184 (argument)
    BOOLEAN       reduce using rule 184 (argument)
    BYTENUM       reduce using rule 184 (argument)
    CASSIGN       reduce using rule 184 (argument)
    COMMA         reduce using rule 184 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 184 (argument)
    DOUBLE        reduce using rule 184 (argument)
    DPROGRAM      reduce using rule 184 (argument)
    DSTACK        reduce using rule 184 (argument)
    DSTATE        reduce using rule 184 (argument)
    EQUAL         reduce using rule 184 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 184 (argument)
    FLOAT         reduce using rule 184 (argument)
    FOR           reduce using rule 184 (argument)
    FUNC          reduce using rule 184 (argument)
    GOTO          reduce using rule 184 (argument)
    GTHAN         reduce using rule 184 (argument)
    GTHANEQ       reduce using rule 184 (argument)
    IDENT         reduce using rule 184 (argument)
    IF            reduce using rule 184 (argument)
    IMPORT        reduce using rule 184 (argument)
    INFER         reduce using rule 184 (argument)
    INT           reduce using rule 184 (argument)
    LBRACE        reduce using rule 184 (argument)
    LEFTSHIFT     reduce using rule 184 (argument)
    LEFTSHIFTEQ   reduce using rule 184 (argument)
    LONG          reduce using rule 184 (argument)
    LPAREN        reduce using rule 184 (argument)
    LTHAN         reduce using rule 184 (argument)
    LTHANEQ       reduce using rule 184 (argument)
    MINUS         reduce using rule 184 (argument)
    MINUSEQ       reduce using rule 184 (argument)
    MINUSMINUS    reduce using rule 184 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 184 (argument)
    NEW           reduce using rule 184 (argument)
    NOT           reduce using rule 184 (argument)
    OR            reduce using rule 184 (argument)
    PACKAGE       reduce using rule 184 (argument)
    PLUS          reduce using rule 184 (argument)
    PLUSEQ        reduce using rule 184 (argument)
    PLUSPLUS      reduce using rule 184 (argument)
    RBRACE        reduce using rule 184 (argument)
    REM           reduce using rule 184 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 184 (argument)
    RETURN        reduce using rule 184 (argument)
    RIGHTSHIFT    reduce using rule 184 (argument)
    RIGHTSHIFTEQ  reduce using rule 184 (argument)
    RPAREN        reduce using rule 184 (argument)
    SFUNC         reduce using rule 184 (argument)
    SPACKAGE      reduce using rule 184 (argument)
    SSTRUCT       reduce using rule 184 (argument)
    STEP          reduce using rule 184 (argument)
    STRING        reduce using rule 184 (argument)
    TAG           reduce using rule 184 (argument)
    TSTEP         reduce using rule 184 (argument)
    TYPSTRUCT     reduce using rule 184 (argument)
    UNEQUAL       reduce using rule 184 (argument)
    VALUE         reduce using rule 184 (argument)
    VAR           reduce using rule 184 (argument)

state 157 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS BITXOR BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression BITXOR argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 257 (argument)
    ';'           reduce using rule 257 (argument)
    ADDR          reduce using rule 257 (argument)
    AFF           reduce using rule 257 (argument)
    AND           reduce using rule 257 (argument)
    ASSIGN        reduce using rule 257 (argument)
    BASICTYPE     reduce using rule 257 (argument)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 257 (argument)
    BITCLEAR      reduce using rule 257 (argument)
    BITOR         reduce using rule 257 (argument)
    BITOREQ       reduce using rule 257 (argument)
    BITXOR        reduce using rule 257 (argument)
    BITXOREQ      reduce using rule 257 (argument)
    BOOLEAN       reduce using rule 257 (argument)
    BYTENUM       reduce using rule 257 (argument)
    CASSIGN       reduce using rule 257 (argument)
    COMMA         reduce using rule 257 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 257 (argument)
    DOUBLE        reduce using rule 257 (argument)
    DPROGRAM      reduce using rule 257 (argument)
    DSTACK        reduce using rule 257 (argument)
    DSTATE        reduce using rule 257 (argument)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 257 (argument)
    FLOAT         reduce using rule 257 (argument)
    FOR           reduce using rule 257 (argument)
    FUNC          reduce using rule 257 (argument)
    GOTO          reduce using rule 257 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 257 (argument)
    IF            reduce using rule 257 (argument)
    IMPORT        reduce using rule 257 (argument)
    INFER         reduce using rule 257 (argument)
    INT           reduce using rule 257 (argument)
    LBRACE        reduce using rule 257 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 257 (argument)
    LONG          reduce using rule 257 (argument)
    LPAREN        reduce using rule 257 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 257 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 257 (argument)
    NEW           reduce using rule 257 (argument)
    NOT           reduce using rule 257 (argument)
    OR            reduce using rule 257 (argument)
    PACKAGE       reduce using rule 257 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 257 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 257 (argument)
    REM           reduce using rule 257 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 257 (argument)
    RETURN        reduce using rule 257 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 257 (argument)
    RPAREN        reduce using rule 257 (argument)
    SFUNC         reduce using rule 257 (argument)
    SPACKAGE      reduce using rule 257 (argument)
    SSTRUCT       reduce using rule 257 (argument)
    STEP          reduce using rule 257 (argument)
    STRING        reduce using rule 257 (argument)
    TAG           reduce using rule 257 (argument)
    TSTEP         reduce using rule 257 (argument)
    TYPSTRUCT     reduce using rule 257 (argument)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 257 (argument)
    VAR           reduce using rule 257 (argument)

state 158 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS BITXOR BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  255 argument: nonAssignExpression BITXOR nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 255 (argument)
    ';'           reduce using rule 255 (argument)
    ADDR          reduce using rule 255 (argument)
    AFF           reduce using rule 255 (argument)
    AND           reduce using rule 255 (argument)
    ASSIGN        reduce using rule 255 (argument)
    BASICTYPE     reduce using rule 255 (argument)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 255 (argument)
    BITCLEAR      reduce using rule 255 (argument)
    BITOR         reduce using rule 255 (argument)
    BITOREQ       reduce using rule 255 (argument)
    BITXOR        reduce using rule 255 (argument)
    BITXOREQ      reduce using rule 255 (argument)
    BOOLEAN       reduce using rule 255 (argument)
    BYTENUM       reduce using rule 255 (argument)
    CASSIGN       reduce using rule 255 (argument)
    COMMA         reduce using rule 255 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 255 (argument)
    DOUBLE        reduce using rule 255 (argument)
    DPROGRAM      reduce using rule 255 (argument)
    DSTACK        reduce using rule 255 (argument)
    DSTATE        reduce using rule 255 (argument)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 255 (argument)
    FLOAT         reduce using rule 255 (argument)
    FOR           reduce using rule 255 (argument)
    FUNC          reduce using rule 255 (argument)
    GOTO          reduce using rule 255 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 255 (argument)
    IF            reduce using rule 255 (argument)
    IMPORT        reduce using rule 255 (argument)
    INFER         reduce using rule 255 (argument)
    INT           reduce using rule 255 (argument)
    LBRACE        reduce using rule 255 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 255 (argument)
    LONG          reduce using rule 255 (argument)
    LPAREN        reduce using rule 255 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 255 (argument)
    MINUSMINUS    reduce using rule 255 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 255 (argument)
    NEW           reduce using rule 255 (argument)
    NOT           reduce using rule 255 (argument)
    OR            reduce using rule 255 (argument)
    PACKAGE       reduce using rule 255 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 255 (argument)
    PLUSPLUS      reduce using rule 255 (argument)
    RBRACE        reduce using rule 255 (argument)
    REM           reduce using rule 255 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 255 (argument)
    RETURN        reduce using rule 255 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 255 (argument)
    RPAREN        reduce using rule 255 (argument)
    SFUNC         reduce using rule 255 (argument)
    SPACKAGE      reduce using rule 255 (argument)
    SSTRUCT       reduce using rule 255 (argument)
    STEP          reduce using rule 255 (argument)
    STRING        reduce using rule 255 (argument)
    TAG           reduce using rule 255 (argument)
    TSTEP         reduce using rule 255 (argument)
    TYPSTRUCT     reduce using rule 255 (argument)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 255 (argument)
    VAR           reduce using rule 255 (argument)

state 159 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS BITOR BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression BITOR argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 253 (argument)
    ';'           reduce using rule 253 (argument)
    ADDR          reduce using rule 253 (argument)
    AFF           reduce using rule 253 (argument)
    AND           reduce using rule 253 (argument)
    ASSIGN        reduce using rule 253 (argument)
    BASICTYPE     reduce using rule 253 (argument)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 253 (argument)
    BITCLEAR      reduce using rule 253 (argument)
    BITOR         reduce using rule 253 (argument)
    BITOREQ       reduce using rule 253 (argument)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 253 (argument)
    BOOLEAN       reduce using rule 253 (argument)
    BYTENUM       reduce using rule 253 (argument)
    CASSIGN       reduce using rule 253 (argument)
    COMMA         reduce using rule 253 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 253 (argument)
    DOUBLE        reduce using rule 253 (argument)
    DPROGRAM      reduce using rule 253 (argument)
    DSTACK        reduce using rule 253 (argument)
    DSTATE        reduce using rule 253 (argument)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 253 (argument)
    FLOAT         reduce using rule 253 (argument)
    FOR           reduce using rule 253 (argument)
    FUNC          reduce using rule 253 (argument)
    GOTO          reduce using rule 253 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 253 (argument)
    IF            reduce using rule 253 (argument)
    IMPORT        reduce using rule 253 (argument)
    INFER         reduce using rule 253 (argument)
    INT           reduce using rule 253 (argument)
    LBRACE        reduce using rule 253 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 253 (argument)
    LONG          reduce using rule 253 (argument)
    LPAREN        reduce using rule 253 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 253 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 253 (argument)
    NEW           reduce using rule 253 (argument)
    NOT           reduce using rule 253 (argument)
    OR            reduce using rule 253 (argument)
    PACKAGE       reduce using rule 253 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 253 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 253 (argument)
    REM           reduce using rule 253 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 253 (argument)
    RETURN        reduce using rule 253 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 253 (argument)
    RPAREN        reduce using rule 253 (argument)
    SFUNC         reduce using rule 253 (argument)
    SPACKAGE      reduce using rule 253 (argument)
    SSTRUCT       reduce using rule 253 (argument)
    STEP          reduce using rule 253 (argument)
    STRING        reduce using rule 253 (argument)
    TAG           reduce using rule 253 (argument)
    TSTEP         reduce using rule 253 (argument)
    TYPSTRUCT     reduce using rule 253 (argument)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 253 (argument)
    VAR           reduce using rule 253 (argument)

state 160 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS BITOR BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  251 argument: nonAssignExpression BITOR nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 251 (argument)
    ';'           reduce using rule 251 (argument)
    ADDR          reduce using rule 251 (argument)
    AFF           reduce using rule 251 (argument)
    AND           reduce using rule 251 (argument)
    ASSIGN        reduce using rule 251 (argument)
    BASICTYPE     reduce using rule 251 (argument)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 251 (argument)
    BITCLEAR      reduce using rule 251 (argument)
    BITOR         reduce using rule 251 (argument)
    BITOREQ       reduce using rule 251 (argument)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 251 (argument)
    BOOLEAN       reduce using rule 251 (argument)
    BYTENUM       reduce using rule 251 (argument)
    CASSIGN       reduce using rule 251 (argument)
    COMMA         reduce using rule 251 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 251 (argument)
    DOUBLE        reduce using rule 251 (argument)
    DPROGRAM      reduce using rule 251 (argument)
    DSTACK        reduce using rule 251 (argument)
    DSTATE        reduce using rule 251 (argument)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 251 (argument)
    FLOAT         reduce using rule 251 (argument)
    FOR           reduce using rule 251 (argument)
    FUNC          reduce using rule 251 (argument)
    GOTO          reduce using rule 251 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 251 (argument)
    IF            reduce using rule 251 (argument)
    IMPORT        reduce using rule 251 (argument)
    INFER         reduce using rule 251 (argument)
    INT           reduce using rule 251 (argument)
    LBRACE        reduce using rule 251 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 251 (argument)
    LONG          reduce using rule 251 (argument)
    LPAREN        reduce using rule 251 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 251 (argument)
    MINUSMINUS    reduce using rule 251 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 251 (argument)
    NEW           reduce using rule 251 (argument)
    NOT           reduce using rule 251 (argument)
    OR            reduce using rule 251 (argument)
    PACKAGE       reduce using rule 251 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 251 (argument)
    PLUSPLUS      reduce using rule 251 (argument)
    RBRACE        reduce using rule 251 (argument)
    REM           reduce using rule 251 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 251 (argument)
    RETURN        reduce using rule 251 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 251 (argument)
    RPAREN        reduce using rule 251 (argument)
    SFUNC         reduce using rule 251 (argument)
    SPACKAGE      reduce using rule 251 (argument)
    SSTRUCT       reduce using rule 251 (argument)
    STEP          reduce using rule 251 (argument)
    STRING        reduce using rule 251 (argument)
    TAG           reduce using rule 251 (argument)
    TSTEP         reduce using rule 251 (argument)
    TYPSTRUCT     reduce using rule 251 (argument)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 251 (argument)
    VAR           reduce using rule 251 (argument)

state 161 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS BITAND BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression BITAND argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 249 (argument)
    ';'           reduce using rule 249 (argument)
    ADDR          reduce using rule 249 (argument)
    AFF           reduce using rule 249 (argument)
    AND           reduce using rule 249 (argument)
    ASSIGN        reduce using rule 249 (argument)
    BASICTYPE     reduce using rule 249 (argument)
    BITAND        reduce using rule 249 (argument)
    BITANDEQ      reduce using rule 249 (argument)
    BITCLEAR      reduce using rule 249 (argument)
    BITOR         reduce using rule 249 (argument)
    BITOREQ       reduce using rule 249 (argument)
    BITXOR        reduce using rule 249 (argument)
    BITXOREQ      reduce using rule 249 (argument)
    BOOLEAN       reduce using rule 249 (argument)
    BYTENUM       reduce using rule 249 (argument)
    CASSIGN       reduce using rule 249 (argument)
    COMMA         reduce using rule 249 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 249 (argument)
    DOUBLE        reduce using rule 249 (argument)
    DPROGRAM      reduce using rule 249 (argument)
    DSTACK        reduce using rule 249 (argument)
    DSTATE        reduce using rule 249 (argument)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 249 (argument)
    FLOAT         reduce using rule 249 (argument)
    FOR           reduce using rule 249 (argument)
    FUNC          reduce using rule 249 (argument)
    GOTO          reduce using rule 249 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 249 (argument)
    IF            reduce using rule 249 (argument)
    IMPORT        reduce using rule 249 (argument)
    INFER         reduce using rule 249 (argument)
    INT           reduce using rule 249 (argument)
    LBRACE        reduce using rule 249 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 249 (argument)
    LONG          reduce using rule 249 (argument)
    LPAREN        reduce using rule 249 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 249 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 249 (argument)
    NEW           reduce using rule 249 (argument)
    NOT           reduce using rule 249 (argument)
    OR            reduce using rule 249 (argument)
    PACKAGE       reduce using rule 249 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 249 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 249 (argument)
    REM           reduce using rule 249 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 249 (argument)
    RETURN        reduce using rule 249 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 249 (argument)
    RPAREN        reduce using rule 249 (argument)
    SFUNC         reduce using rule 249 (argument)
    SPACKAGE      reduce using rule 249 (argument)
    SSTRUCT       reduce using rule 249 (argument)
    STEP          reduce using rule 249 (argument)
    STRING        reduce using rule 249 (argument)
    TAG           reduce using rule 249 (argument)
    TSTEP         reduce using rule 249 (argument)
    TYPSTRUCT     reduce using rule 249 (argument)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 249 (argument)
    VAR           reduce using rule 249 (argument)

state 162 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS BITAND BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  247 argument: nonAssignExpression BITAND nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 247 (argument)
    ';'           reduce using rule 247 (argument)
    ADDR          reduce using rule 247 (argument)
    AFF           reduce using rule 247 (argument)
    AND           reduce using rule 247 (argument)
    ASSIGN        reduce using rule 247 (argument)
    BASICTYPE     reduce using rule 247 (argument)
    BITAND        reduce using rule 247 (argument)
    BITANDEQ      reduce using rule 247 (argument)
    BITCLEAR      reduce using rule 247 (argument)
    BITOR         reduce using rule 247 (argument)
    BITOREQ       reduce using rule 247 (argument)
    BITXOR        reduce using rule 247 (argument)
    BITXOREQ      reduce using rule 247 (argument)
    BOOLEAN       reduce using rule 247 (argument)
    BYTENUM       reduce using rule 247 (argument)
    CASSIGN       reduce using rule 247 (argument)
    COMMA         reduce using rule 247 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 247 (argument)
    DOUBLE        reduce using rule 247 (argument)
    DPROGRAM      reduce using rule 247 (argument)
    DSTACK        reduce using rule 247 (argument)
    DSTATE        reduce using rule 247 (argument)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 247 (argument)
    FLOAT         reduce using rule 247 (argument)
    FOR           reduce using rule 247 (argument)
    FUNC          reduce using rule 247 (argument)
    GOTO          reduce using rule 247 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 247 (argument)
    IF            reduce using rule 247 (argument)
    IMPORT        reduce using rule 247 (argument)
    INFER         reduce using rule 247 (argument)
    INT           reduce using rule 247 (argument)
    LBRACE        reduce using rule 247 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 247 (argument)
    LONG          reduce using rule 247 (argument)
    LPAREN        reduce using rule 247 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 247 (argument)
    MINUSMINUS    reduce using rule 247 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 247 (argument)
    NEW           reduce using rule 247 (argument)
    NOT           reduce using rule 247 (argument)
    OR            reduce using rule 247 (argument)
    PACKAGE       reduce using rule 247 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 247 (argument)
    PLUSPLUS      reduce using rule 247 (argument)
    RBRACE        reduce using rule 247 (argument)
    REM           reduce using rule 247 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 247 (argument)
    RETURN        reduce using rule 247 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 247 (argument)
    RPAREN        reduce using rule 247 (argument)
    SFUNC         reduce using rule 247 (argument)
    SPACKAGE      reduce using rule 247 (argument)
    SSTRUCT       reduce using rule 247 (argument)
    STEP          reduce using rule 247 (argument)
    STRING        reduce using rule 247 (argument)
    TAG           reduce using rule 247 (argument)
    TSTEP         reduce using rule 247 (argument)
    TYPSTRUCT     reduce using rule 247 (argument)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 247 (argument)
    VAR           reduce using rule 247 (argument)

state 163 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS AND BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression AND argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 245 (argument)
    ';'           reduce using rule 245 (argument)
    ADDR          reduce using rule 245 (argument)
    AFF           reduce using rule 245 (argument)
    AND           reduce using rule 245 (argument)
    ASSIGN        reduce using rule 245 (argument)
    BASICTYPE     reduce using rule 245 (argument)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 245 (argument)
    BITCLEAR      shift, and goto state 116
    BITOR         shift, and goto state 114
    BITOREQ       reduce using rule 245 (argument)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 245 (argument)
    BOOLEAN       reduce using rule 245 (argument)
    BYTENUM       reduce using rule 245 (argument)
    CASSIGN       reduce using rule 245 (argument)
    COMMA         reduce using rule 245 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 245 (argument)
    DOUBLE        reduce using rule 245 (argument)
    DPROGRAM      reduce using rule 245 (argument)
    DSTACK        reduce using rule 245 (argument)
    DSTATE        reduce using rule 245 (argument)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 245 (argument)
    FLOAT         reduce using rule 245 (argument)
    FOR           reduce using rule 245 (argument)
    FUNC          reduce using rule 245 (argument)
    GOTO          reduce using rule 245 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 245 (argument)
    IF            reduce using rule 245 (argument)
    IMPORT        reduce using rule 245 (argument)
    INFER         reduce using rule 245 (argument)
    INT           reduce using rule 245 (argument)
    LBRACE        reduce using rule 245 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 245 (argument)
    LONG          reduce using rule 245 (argument)
    LPAREN        reduce using rule 245 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 245 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 245 (argument)
    NEW           reduce using rule 245 (argument)
    NOT           reduce using rule 245 (argument)
    OR            reduce using rule 245 (argument)
    PACKAGE       reduce using rule 245 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 245 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 245 (argument)
    REM           reduce using rule 245 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 245 (argument)
    RETURN        reduce using rule 245 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 245 (argument)
    RPAREN        reduce using rule 245 (argument)
    SFUNC         reduce using rule 245 (argument)
    SPACKAGE      reduce using rule 245 (argument)
    SSTRUCT       reduce using rule 245 (argument)
    STEP          reduce using rule 245 (argument)
    STRING        reduce using rule 245 (argument)
    TAG           reduce using rule 245 (argument)
    TSTEP         reduce using rule 245 (argument)
    TYPSTRUCT     reduce using rule 245 (argument)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 245 (argument)
    VAR           reduce using rule 245 (argument)

state 164 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS AND BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  243 argument: nonAssignExpression AND nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 243 (argument)
    ';'           reduce using rule 243 (argument)
    ADDR          reduce using rule 243 (argument)
    AFF           reduce using rule 243 (argument)
    AND           reduce using rule 243 (argument)
    ASSIGN        reduce using rule 243 (argument)
    BASICTYPE     reduce using rule 243 (argument)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 243 (argument)
    BITCLEAR      shift, and goto state 92
    BITOR         shift, and goto state 90
    BITOREQ       reduce using rule 243 (argument)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 243 (argument)
    BOOLEAN       reduce using rule 243 (argument)
    BYTENUM       reduce using rule 243 (argument)
    CASSIGN       reduce using rule 243 (argument)
    COMMA         reduce using rule 243 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 243 (argument)
    DOUBLE        reduce using rule 243 (argument)
    DPROGRAM      reduce using rule 243 (argument)
    DSTACK        reduce using rule 243 (argument)
    DSTATE        reduce using rule 243 (argument)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 243 (argument)
    FLOAT         reduce using rule 243 (argument)
    FOR           reduce using rule 243 (argument)
    FUNC          reduce using rule 243 (argument)
    GOTO          reduce using rule 243 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 243 (argument)
    IF            reduce using rule 243 (argument)
    IMPORT        reduce using rule 243 (argument)
    INFER         reduce using rule 243 (argument)
    INT           reduce using rule 243 (argument)
    LBRACE        reduce using rule 243 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 243 (argument)
    LONG          reduce using rule 243 (argument)
    LPAREN        reduce using rule 243 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 243 (argument)
    MINUSMINUS    reduce using rule 243 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 243 (argument)
    NEW           reduce using rule 243 (argument)
    NOT           reduce using rule 243 (argument)
    OR            reduce using rule 243 (argument)
    PACKAGE       reduce using rule 243 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 243 (argument)
    PLUSPLUS      reduce using rule 243 (argument)
    RBRACE        reduce using rule 243 (argument)
    REM           reduce using rule 243 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 243 (argument)
    RETURN        reduce using rule 243 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 243 (argument)
    RPAREN        reduce using rule 243 (argument)
    SFUNC         reduce using rule 243 (argument)
    SPACKAGE      reduce using rule 243 (argument)
    SSTRUCT       reduce using rule 243 (argument)
    STEP          reduce using rule 243 (argument)
    STRING        reduce using rule 243 (argument)
    TAG           reduce using rule 243 (argument)
    TSTEP         reduce using rule 243 (argument)
    TYPSTRUCT     reduce using rule 243 (argument)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 243 (argument)
    VAR           reduce using rule 243 (argument)

state 165 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS OR BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression OR argument .  [$end, ';', ADDR, AFF, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 241 (argument)
    ';'           reduce using rule 241 (argument)
    ADDR          reduce using rule 241 (argument)
    AFF           reduce using rule 241 (argument)
    AND           shift, and goto state 112
    ASSIGN        reduce using rule 241 (argument)
    BASICTYPE     reduce using rule 241 (argument)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 241 (argument)
    BITCLEAR      shift, and goto state 116
    BITOR         shift, and goto state 114
    BITOREQ       reduce using rule 241 (argument)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 241 (argument)
    BOOLEAN       reduce using rule 241 (argument)
    BYTENUM       reduce using rule 241 (argument)
    CASSIGN       reduce using rule 241 (argument)
    COMMA         reduce using rule 241 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 241 (argument)
    DOUBLE        reduce using rule 241 (argument)
    DPROGRAM      reduce using rule 241 (argument)
    DSTACK        reduce using rule 241 (argument)
    DSTATE        reduce using rule 241 (argument)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 241 (argument)
    FLOAT         reduce using rule 241 (argument)
    FOR           reduce using rule 241 (argument)
    FUNC          reduce using rule 241 (argument)
    GOTO          reduce using rule 241 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 241 (argument)
    IF            reduce using rule 241 (argument)
    IMPORT        reduce using rule 241 (argument)
    INFER         reduce using rule 241 (argument)
    INT           reduce using rule 241 (argument)
    LBRACE        reduce using rule 241 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 241 (argument)
    LONG          reduce using rule 241 (argument)
    LPAREN        reduce using rule 241 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 241 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 241 (argument)
    NEW           reduce using rule 241 (argument)
    NOT           reduce using rule 241 (argument)
    OR            reduce using rule 241 (argument)
    PACKAGE       reduce using rule 241 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 241 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 241 (argument)
    REM           reduce using rule 241 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 241 (argument)
    RETURN        reduce using rule 241 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 241 (argument)
    RPAREN        reduce using rule 241 (argument)
    SFUNC         reduce using rule 241 (argument)
    SPACKAGE      reduce using rule 241 (argument)
    SSTRUCT       reduce using rule 241 (argument)
    STEP          reduce using rule 241 (argument)
    STRING        reduce using rule 241 (argument)
    TAG           reduce using rule 241 (argument)
    TSTEP         reduce using rule 241 (argument)
    TYPSTRUCT     reduce using rule 241 (argument)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 241 (argument)
    VAR           reduce using rule 241 (argument)

state 166 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS OR BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  239 argument: nonAssignExpression OR nonAssignExpression .  [$end, ';', ADDR, AFF, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 239 (argument)
    ';'           reduce using rule 239 (argument)
    ADDR          reduce using rule 239 (argument)
    AFF           reduce using rule 239 (argument)
    AND           shift, and goto state 88
    ASSIGN        reduce using rule 239 (argument)
    BASICTYPE     reduce using rule 239 (argument)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 239 (argument)
    BITCLEAR      shift, and goto state 92
    BITOR         shift, and goto state 90
    BITOREQ       reduce using rule 239 (argument)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 239 (argument)
    BOOLEAN       reduce using rule 239 (argument)
    BYTENUM       reduce using rule 239 (argument)
    CASSIGN       reduce using rule 239 (argument)
    COMMA         reduce using rule 239 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 239 (argument)
    DOUBLE        reduce using rule 239 (argument)
    DPROGRAM      reduce using rule 239 (argument)
    DSTACK        reduce using rule 239 (argument)
    DSTATE        reduce using rule 239 (argument)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 239 (argument)
    FLOAT         reduce using rule 239 (argument)
    FOR           reduce using rule 239 (argument)
    FUNC          reduce using rule 239 (argument)
    GOTO          reduce using rule 239 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 239 (argument)
    IF            reduce using rule 239 (argument)
    IMPORT        reduce using rule 239 (argument)
    INFER         reduce using rule 239 (argument)
    INT           reduce using rule 239 (argument)
    LBRACE        reduce using rule 239 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 239 (argument)
    LONG          reduce using rule 239 (argument)
    LPAREN        reduce using rule 239 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 239 (argument)
    MINUSMINUS    reduce using rule 239 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 239 (argument)
    NEW           reduce using rule 239 (argument)
    NOT           reduce using rule 239 (argument)
    OR            reduce using rule 239 (argument)
    PACKAGE       reduce using rule 239 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 239 (argument)
    PLUSPLUS      reduce using rule 239 (argument)
    RBRACE        reduce using rule 239 (argument)
    REM           reduce using rule 239 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 239 (argument)
    RETURN        reduce using rule 239 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 239 (argument)
    RPAREN        reduce using rule 239 (argument)
    SFUNC         reduce using rule 239 (argument)
    SPACKAGE      reduce using rule 239 (argument)
    SSTRUCT       reduce using rule 239 (argument)
    STEP          reduce using rule 239 (argument)
    STRING        reduce using rule 239 (argument)
    TAG           reduce using rule 239 (argument)
    TSTEP         reduce using rule 239 (argument)
    TYPSTRUCT     reduce using rule 239 (argument)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 239 (argument)
    VAR           reduce using rule 239 (argument)

state 167 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS LTHANEQ BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression LTHANEQ argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 237 (argument)
    ';'           reduce using rule 237 (argument)
    ADDR          reduce using rule 237 (argument)
    AFF           reduce using rule 237 (argument)
    AND           reduce using rule 237 (argument)
    ASSIGN        reduce using rule 237 (argument)
    BASICTYPE     reduce using rule 237 (argument)
    BITAND        reduce using rule 237 (argument)
    BITANDEQ      reduce using rule 237 (argument)
    BITCLEAR      reduce using rule 237 (argument)
    BITOR         reduce using rule 237 (argument)
    BITOREQ       reduce using rule 237 (argument)
    BITXOR        reduce using rule 237 (argument)
    BITXOREQ      reduce using rule 237 (argument)
    BOOLEAN       reduce using rule 237 (argument)
    BYTENUM       reduce using rule 237 (argument)
    CASSIGN       reduce using rule 237 (argument)
    COMMA         reduce using rule 237 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 237 (argument)
    DOUBLE        reduce using rule 237 (argument)
    DPROGRAM      reduce using rule 237 (argument)
    DSTACK        reduce using rule 237 (argument)
    DSTATE        reduce using rule 237 (argument)
    EQUAL         reduce using rule 237 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 237 (argument)
    FLOAT         reduce using rule 237 (argument)
    FOR           reduce using rule 237 (argument)
    FUNC          reduce using rule 237 (argument)
    GOTO          reduce using rule 237 (argument)
    GTHAN         reduce using rule 237 (argument)
    GTHANEQ       reduce using rule 237 (argument)
    IDENT         reduce using rule 237 (argument)
    IF            reduce using rule 237 (argument)
    IMPORT        reduce using rule 237 (argument)
    INFER         reduce using rule 237 (argument)
    INT           reduce using rule 237 (argument)
    LBRACE        reduce using rule 237 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 237 (argument)
    LONG          reduce using rule 237 (argument)
    LPAREN        reduce using rule 237 (argument)
    LTHAN         reduce using rule 237 (argument)
    LTHANEQ       reduce using rule 237 (argument)
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 237 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 237 (argument)
    NEW           reduce using rule 237 (argument)
    NOT           reduce using rule 237 (argument)
    OR            reduce using rule 237 (argument)
    PACKAGE       reduce using rule 237 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 237 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 237 (argument)
    REM           reduce using rule 237 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 237 (argument)
    RETURN        reduce using rule 237 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 237 (argument)
    RPAREN        reduce using rule 237 (argument)
    SFUNC         reduce using rule 237 (argument)
    SPACKAGE      reduce using rule 237 (argument)
    SSTRUCT       reduce using rule 237 (argument)
    STEP          reduce using rule 237 (argument)
    STRING        reduce using rule 237 (argument)
    TAG           reduce using rule 237 (argument)
    TSTEP         reduce using rule 237 (argument)
    TYPSTRUCT     reduce using rule 237 (argument)
    UNEQUAL       reduce using rule 237 (argument)
    VALUE         reduce using rule 237 (argument)
    VAR           reduce using rule 237 (argument)

state 168 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS LTHANEQ BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  235 argument: nonAssignExpression LTHANEQ nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 235 (argument)
    ';'           reduce using rule 235 (argument)
    ADDR          reduce using rule 235 (argument)
    AFF           reduce using rule 235 (argument)
    AND           reduce using rule 235 (argument)
    ASSIGN        reduce using rule 235 (argument)
    BASICTYPE     reduce using rule 235 (argument)
    BITAND        reduce using rule 235 (argument)
    BITANDEQ      reduce using rule 235 (argument)
    BITCLEAR      reduce using rule 235 (argument)
    BITOR         reduce using rule 235 (argument)
    BITOREQ       reduce using rule 235 (argument)
    BITXOR        reduce using rule 235 (argument)
    BITXOREQ      reduce using rule 235 (argument)
    BOOLEAN       reduce using rule 235 (argument)
    BYTENUM       reduce using rule 235 (argument)
    CASSIGN       reduce using rule 235 (argument)
    COMMA         reduce using rule 235 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 235 (argument)
    DOUBLE        reduce using rule 235 (argument)
    DPROGRAM      reduce using rule 235 (argument)
    DSTACK        reduce using rule 235 (argument)
    DSTATE        reduce using rule 235 (argument)
    EQUAL         reduce using rule 235 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 235 (argument)
    FLOAT         reduce using rule 235 (argument)
    FOR           reduce using rule 235 (argument)
    FUNC          reduce using rule 235 (argument)
    GOTO          reduce using rule 235 (argument)
    GTHAN         reduce using rule 235 (argument)
    GTHANEQ       reduce using rule 235 (argument)
    IDENT         reduce using rule 235 (argument)
    IF            reduce using rule 235 (argument)
    IMPORT        reduce using rule 235 (argument)
    INFER         reduce using rule 235 (argument)
    INT           reduce using rule 235 (argument)
    LBRACE        reduce using rule 235 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 235 (argument)
    LONG          reduce using rule 235 (argument)
    LPAREN        reduce using rule 235 (argument)
    LTHAN         reduce using rule 235 (argument)
    LTHANEQ       reduce using rule 235 (argument)
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 235 (argument)
    MINUSMINUS    reduce using rule 235 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 235 (argument)
    NEW           reduce using rule 235 (argument)
    NOT           reduce using rule 235 (argument)
    OR            reduce using rule 235 (argument)
    PACKAGE       reduce using rule 235 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 235 (argument)
    PLUSPLUS      reduce using rule 235 (argument)
    RBRACE        reduce using rule 235 (argument)
    REM           reduce using rule 235 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 235 (argument)
    RETURN        reduce using rule 235 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 235 (argument)
    RPAREN        reduce using rule 235 (argument)
    SFUNC         reduce using rule 235 (argument)
    SPACKAGE      reduce using rule 235 (argument)
    SSTRUCT       reduce using rule 235 (argument)
    STEP          reduce using rule 235 (argument)
    STRING        reduce using rule 235 (argument)
    TAG           reduce using rule 235 (argument)
    TSTEP         reduce using rule 235 (argument)
    TYPSTRUCT     reduce using rule 235 (argument)
    UNEQUAL       reduce using rule 235 (argument)
    VALUE         reduce using rule 235 (argument)
    VAR           reduce using rule 235 (argument)

state 169 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS LTHAN BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression LTHAN argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 233 (argument)
    ';'           reduce using rule 233 (argument)
    ADDR          reduce using rule 233 (argument)
    AFF           reduce using rule 233 (argument)
    AND           reduce using rule 233 (argument)
    ASSIGN        reduce using rule 233 (argument)
    BASICTYPE     reduce using rule 233 (argument)
    BITAND        reduce using rule 233 (argument)
    BITANDEQ      reduce using rule 233 (argument)
    BITCLEAR      reduce using rule 233 (argument)
    BITOR         reduce using rule 233 (argument)
    BITOREQ       reduce using rule 233 (argument)
    BITXOR        reduce using rule 233 (argument)
    BITXOREQ      reduce using rule 233 (argument)
    BOOLEAN       reduce using rule 233 (argument)
    BYTENUM       reduce using rule 233 (argument)
    CASSIGN       reduce using rule 233 (argument)
    COMMA         reduce using rule 233 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 233 (argument)
    DOUBLE        reduce using rule 233 (argument)
    DPROGRAM      reduce using rule 233 (argument)
    DSTACK        reduce using rule 233 (argument)
    DSTATE        reduce using rule 233 (argument)
    EQUAL         reduce using rule 233 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 233 (argument)
    FLOAT         reduce using rule 233 (argument)
    FOR           reduce using rule 233 (argument)
    FUNC          reduce using rule 233 (argument)
    GOTO          reduce using rule 233 (argument)
    GTHAN         reduce using rule 233 (argument)
    GTHANEQ       reduce using rule 233 (argument)
    IDENT         reduce using rule 233 (argument)
    IF            reduce using rule 233 (argument)
    IMPORT        reduce using rule 233 (argument)
    INFER         reduce using rule 233 (argument)
    INT           reduce using rule 233 (argument)
    LBRACE        reduce using rule 233 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 233 (argument)
    LONG          reduce using rule 233 (argument)
    LPAREN        reduce using rule 233 (argument)
    LTHAN         reduce using rule 233 (argument)
    LTHANEQ       reduce using rule 233 (argument)
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 233 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 233 (argument)
    NEW           reduce using rule 233 (argument)
    NOT           reduce using rule 233 (argument)
    OR            reduce using rule 233 (argument)
    PACKAGE       reduce using rule 233 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 233 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 233 (argument)
    REM           reduce using rule 233 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 233 (argument)
    RETURN        reduce using rule 233 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 233 (argument)
    RPAREN        reduce using rule 233 (argument)
    SFUNC         reduce using rule 233 (argument)
    SPACKAGE      reduce using rule 233 (argument)
    SSTRUCT       reduce using rule 233 (argument)
    STEP          reduce using rule 233 (argument)
    STRING        reduce using rule 233 (argument)
    TAG           reduce using rule 233 (argument)
    TSTEP         reduce using rule 233 (argument)
    TYPSTRUCT     reduce using rule 233 (argument)
    UNEQUAL       reduce using rule 233 (argument)
    VALUE         reduce using rule 233 (argument)
    VAR           reduce using rule 233 (argument)

state 170 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS LTHAN BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  231 argument: nonAssignExpression LTHAN nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 231 (argument)
    ';'           reduce using rule 231 (argument)
    ADDR          reduce using rule 231 (argument)
    AFF           reduce using rule 231 (argument)
    AND           reduce using rule 231 (argument)
    ASSIGN        reduce using rule 231 (argument)
    BASICTYPE     reduce using rule 231 (argument)
    BITAND        reduce using rule 231 (argument)
    BITANDEQ      reduce using rule 231 (argument)
    BITCLEAR      reduce using rule 231 (argument)
    BITOR         reduce using rule 231 (argument)
    BITOREQ       reduce using rule 231 (argument)
    BITXOR        reduce using rule 231 (argument)
    BITXOREQ      reduce using rule 231 (argument)
    BOOLEAN       reduce using rule 231 (argument)
    BYTENUM       reduce using rule 231 (argument)
    CASSIGN       reduce using rule 231 (argument)
    COMMA         reduce using rule 231 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 231 (argument)
    DOUBLE        reduce using rule 231 (argument)
    DPROGRAM      reduce using rule 231 (argument)
    DSTACK        reduce using rule 231 (argument)
    DSTATE        reduce using rule 231 (argument)
    EQUAL         reduce using rule 231 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 231 (argument)
    FLOAT         reduce using rule 231 (argument)
    FOR           reduce using rule 231 (argument)
    FUNC          reduce using rule 231 (argument)
    GOTO          reduce using rule 231 (argument)
    GTHAN         reduce using rule 231 (argument)
    GTHANEQ       reduce using rule 231 (argument)
    IDENT         reduce using rule 231 (argument)
    IF            reduce using rule 231 (argument)
    IMPORT        reduce using rule 231 (argument)
    INFER         reduce using rule 231 (argument)
    INT           reduce using rule 231 (argument)
    LBRACE        reduce using rule 231 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 231 (argument)
    LONG          reduce using rule 231 (argument)
    LPAREN        reduce using rule 231 (argument)
    LTHAN         reduce using rule 231 (argument)
    LTHANEQ       reduce using rule 231 (argument)
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 231 (argument)
    MINUSMINUS    reduce using rule 231 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 231 (argument)
    NEW           reduce using rule 231 (argument)
    NOT           reduce using rule 231 (argument)
    OR            reduce using rule 231 (argument)
    PACKAGE       reduce using rule 231 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 231 (argument)
    PLUSPLUS      reduce using rule 231 (argument)
    RBRACE        reduce using rule 231 (argument)
    REM           reduce using rule 231 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 231 (argument)
    RETURN        reduce using rule 231 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 231 (argument)
    RPAREN        reduce using rule 231 (argument)
    SFUNC         reduce using rule 231 (argument)
    SPACKAGE      reduce using rule 231 (argument)
    SSTRUCT       reduce using rule 231 (argument)
    STEP          reduce using rule 231 (argument)
    STRING        reduce using rule 231 (argument)
    TAG           reduce using rule 231 (argument)
    TSTEP         reduce using rule 231 (argument)
    TYPSTRUCT     reduce using rule 231 (argument)
    UNEQUAL       reduce using rule 231 (argument)
    VALUE         reduce using rule 231 (argument)
    VAR           reduce using rule 231 (argument)

state 171 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS GTHANEQ BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression GTHANEQ argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 229 (argument)
    ';'           reduce using rule 229 (argument)
    ADDR          reduce using rule 229 (argument)
    AFF           reduce using rule 229 (argument)
    AND           reduce using rule 229 (argument)
    ASSIGN        reduce using rule 229 (argument)
    BASICTYPE     reduce using rule 229 (argument)
    BITAND        reduce using rule 229 (argument)
    BITANDEQ      reduce using rule 229 (argument)
    BITCLEAR      reduce using rule 229 (argument)
    BITOR         reduce using rule 229 (argument)
    BITOREQ       reduce using rule 229 (argument)
    BITXOR        reduce using rule 229 (argument)
    BITXOREQ      reduce using rule 229 (argument)
    BOOLEAN       reduce using rule 229 (argument)
    BYTENUM       reduce using rule 229 (argument)
    CASSIGN       reduce using rule 229 (argument)
    COMMA         reduce using rule 229 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 229 (argument)
    DOUBLE        reduce using rule 229 (argument)
    DPROGRAM      reduce using rule 229 (argument)
    DSTACK        reduce using rule 229 (argument)
    DSTATE        reduce using rule 229 (argument)
    EQUAL         reduce using rule 229 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 229 (argument)
    FLOAT         reduce using rule 229 (argument)
    FOR           reduce using rule 229 (argument)
    FUNC          reduce using rule 229 (argument)
    GOTO          reduce using rule 229 (argument)
    GTHAN         reduce using rule 229 (argument)
    GTHANEQ       reduce using rule 229 (argument)
    IDENT         reduce using rule 229 (argument)
    IF            reduce using rule 229 (argument)
    IMPORT        reduce using rule 229 (argument)
    INFER         reduce using rule 229 (argument)
    INT           reduce using rule 229 (argument)
    LBRACE        reduce using rule 229 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 229 (argument)
    LONG          reduce using rule 229 (argument)
    LPAREN        reduce using rule 229 (argument)
    LTHAN         reduce using rule 229 (argument)
    LTHANEQ       reduce using rule 229 (argument)
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 229 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 229 (argument)
    NEW           reduce using rule 229 (argument)
    NOT           reduce using rule 229 (argument)
    OR            reduce using rule 229 (argument)
    PACKAGE       reduce using rule 229 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 229 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 229 (argument)
    REM           reduce using rule 229 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 229 (argument)
    RETURN        reduce using rule 229 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 229 (argument)
    RPAREN        reduce using rule 229 (argument)
    SFUNC         reduce using rule 229 (argument)
    SPACKAGE      reduce using rule 229 (argument)
    SSTRUCT       reduce using rule 229 (argument)
    STEP          reduce using rule 229 (argument)
    STRING        reduce using rule 229 (argument)
    TAG           reduce using rule 229 (argument)
    TSTEP         reduce using rule 229 (argument)
    TYPSTRUCT     reduce using rule 229 (argument)
    UNEQUAL       reduce using rule 229 (argument)
    VALUE         reduce using rule 229 (argument)
    VAR           reduce using rule 229 (argument)

state 172 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS GTHANEQ BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  227 argument: nonAssignExpression GTHANEQ nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 227 (argument)
    ';'           reduce using rule 227 (argument)
    ADDR          reduce using rule 227 (argument)
    AFF           reduce using rule 227 (argument)
    AND           reduce using rule 227 (argument)
    ASSIGN        reduce using rule 227 (argument)
    BASICTYPE     reduce using rule 227 (argument)
    BITAND        reduce using rule 227 (argument)
    BITANDEQ      reduce using rule 227 (argument)
    BITCLEAR      reduce using rule 227 (argument)
    BITOR         reduce using rule 227 (argument)
    BITOREQ       reduce using rule 227 (argument)
    BITXOR        reduce using rule 227 (argument)
    BITXOREQ      reduce using rule 227 (argument)
    BOOLEAN       reduce using rule 227 (argument)
    BYTENUM       reduce using rule 227 (argument)
    CASSIGN       reduce using rule 227 (argument)
    COMMA         reduce using rule 227 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 227 (argument)
    DOUBLE        reduce using rule 227 (argument)
    DPROGRAM      reduce using rule 227 (argument)
    DSTACK        reduce using rule 227 (argument)
    DSTATE        reduce using rule 227 (argument)
    EQUAL         reduce using rule 227 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 227 (argument)
    FLOAT         reduce using rule 227 (argument)
    FOR           reduce using rule 227 (argument)
    FUNC          reduce using rule 227 (argument)
    GOTO          reduce using rule 227 (argument)
    GTHAN         reduce using rule 227 (argument)
    GTHANEQ       reduce using rule 227 (argument)
    IDENT         reduce using rule 227 (argument)
    IF            reduce using rule 227 (argument)
    IMPORT        reduce using rule 227 (argument)
    INFER         reduce using rule 227 (argument)
    INT           reduce using rule 227 (argument)
    LBRACE        reduce using rule 227 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 227 (argument)
    LONG          reduce using rule 227 (argument)
    LPAREN        reduce using rule 227 (argument)
    LTHAN         reduce using rule 227 (argument)
    LTHANEQ       reduce using rule 227 (argument)
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 227 (argument)
    MINUSMINUS    reduce using rule 227 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 227 (argument)
    NEW           reduce using rule 227 (argument)
    NOT           reduce using rule 227 (argument)
    OR            reduce using rule 227 (argument)
    PACKAGE       reduce using rule 227 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 227 (argument)
    PLUSPLUS      reduce using rule 227 (argument)
    RBRACE        reduce using rule 227 (argument)
    REM           reduce using rule 227 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 227 (argument)
    RETURN        reduce using rule 227 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 227 (argument)
    RPAREN        reduce using rule 227 (argument)
    SFUNC         reduce using rule 227 (argument)
    SPACKAGE      reduce using rule 227 (argument)
    SSTRUCT       reduce using rule 227 (argument)
    STEP          reduce using rule 227 (argument)
    STRING        reduce using rule 227 (argument)
    TAG           reduce using rule 227 (argument)
    TSTEP         reduce using rule 227 (argument)
    TYPSTRUCT     reduce using rule 227 (argument)
    UNEQUAL       reduce using rule 227 (argument)
    VALUE         reduce using rule 227 (argument)
    VAR           reduce using rule 227 (argument)

state 173 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS GTHAN BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression GTHAN argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 225 (argument)
    ';'           reduce using rule 225 (argument)
    ADDR          reduce using rule 225 (argument)
    AFF           reduce using rule 225 (argument)
    AND           reduce using rule 225 (argument)
    ASSIGN        reduce using rule 225 (argument)
    BASICTYPE     reduce using rule 225 (argument)
    BITAND        reduce using rule 225 (argument)
    BITANDEQ      reduce using rule 225 (argument)
    BITCLEAR      reduce using rule 225 (argument)
    BITOR         reduce using rule 225 (argument)
    BITOREQ       reduce using rule 225 (argument)
    BITXOR        reduce using rule 225 (argument)
    BITXOREQ      reduce using rule 225 (argument)
    BOOLEAN       reduce using rule 225 (argument)
    BYTENUM       reduce using rule 225 (argument)
    CASSIGN       reduce using rule 225 (argument)
    COMMA         reduce using rule 225 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 225 (argument)
    DOUBLE        reduce using rule 225 (argument)
    DPROGRAM      reduce using rule 225 (argument)
    DSTACK        reduce using rule 225 (argument)
    DSTATE        reduce using rule 225 (argument)
    EQUAL         reduce using rule 225 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 225 (argument)
    FLOAT         reduce using rule 225 (argument)
    FOR           reduce using rule 225 (argument)
    FUNC          reduce using rule 225 (argument)
    GOTO          reduce using rule 225 (argument)
    GTHAN         reduce using rule 225 (argument)
    GTHANEQ       reduce using rule 225 (argument)
    IDENT         reduce using rule 225 (argument)
    IF            reduce using rule 225 (argument)
    IMPORT        reduce using rule 225 (argument)
    INFER         reduce using rule 225 (argument)
    INT           reduce using rule 225 (argument)
    LBRACE        reduce using rule 225 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 225 (argument)
    LONG          reduce using rule 225 (argument)
    LPAREN        reduce using rule 225 (argument)
    LTHAN         reduce using rule 225 (argument)
    LTHANEQ       reduce using rule 225 (argument)
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 225 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 225 (argument)
    NEW           reduce using rule 225 (argument)
    NOT           reduce using rule 225 (argument)
    OR            reduce using rule 225 (argument)
    PACKAGE       reduce using rule 225 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 225 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 225 (argument)
    REM           reduce using rule 225 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 225 (argument)
    RETURN        reduce using rule 225 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 225 (argument)
    RPAREN        reduce using rule 225 (argument)
    SFUNC         reduce using rule 225 (argument)
    SPACKAGE      reduce using rule 225 (argument)
    SSTRUCT       reduce using rule 225 (argument)
    STEP          reduce using rule 225 (argument)
    STRING        reduce using rule 225 (argument)
    TAG           reduce using rule 225 (argument)
    TSTEP         reduce using rule 225 (argument)
    TYPSTRUCT     reduce using rule 225 (argument)
    UNEQUAL       reduce using rule 225 (argument)
    VALUE         reduce using rule 225 (argument)
    VAR           reduce using rule 225 (argument)

state 174 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS GTHAN BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  223 argument: nonAssignExpression GTHAN nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 223 (argument)
    ';'           reduce using rule 223 (argument)
    ADDR          reduce using rule 223 (argument)
    AFF           reduce using rule 223 (argument)
    AND           reduce using rule 223 (argument)
    ASSIGN        reduce using rule 223 (argument)
    BASICTYPE     reduce using rule 223 (argument)
    BITAND        reduce using rule 223 (argument)
    BITANDEQ      reduce using rule 223 (argument)
    BITCLEAR      reduce using rule 223 (argument)
    BITOR         reduce using rule 223 (argument)
    BITOREQ       reduce using rule 223 (argument)
    BITXOR        reduce using rule 223 (argument)
    BITXOREQ      reduce using rule 223 (argument)
    BOOLEAN       reduce using rule 223 (argument)
    BYTENUM       reduce using rule 223 (argument)
    CASSIGN       reduce using rule 223 (argument)
    COMMA         reduce using rule 223 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 223 (argument)
    DOUBLE        reduce using rule 223 (argument)
    DPROGRAM      reduce using rule 223 (argument)
    DSTACK        reduce using rule 223 (argument)
    DSTATE        reduce using rule 223 (argument)
    EQUAL         reduce using rule 223 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 223 (argument)
    FLOAT         reduce using rule 223 (argument)
    FOR           reduce using rule 223 (argument)
    FUNC          reduce using rule 223 (argument)
    GOTO          reduce using rule 223 (argument)
    GTHAN         reduce using rule 223 (argument)
    GTHANEQ       reduce using rule 223 (argument)
    IDENT         reduce using rule 223 (argument)
    IF            reduce using rule 223 (argument)
    IMPORT        reduce using rule 223 (argument)
    INFER         reduce using rule 223 (argument)
    INT           reduce using rule 223 (argument)
    LBRACE        reduce using rule 223 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 223 (argument)
    LONG          reduce using rule 223 (argument)
    LPAREN        reduce using rule 223 (argument)
    LTHAN         reduce using rule 223 (argument)
    LTHANEQ       reduce using rule 223 (argument)
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 223 (argument)
    MINUSMINUS    reduce using rule 223 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 223 (argument)
    NEW           reduce using rule 223 (argument)
    NOT           reduce using rule 223 (argument)
    OR            reduce using rule 223 (argument)
    PACKAGE       reduce using rule 223 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 223 (argument)
    PLUSPLUS      reduce using rule 223 (argument)
    RBRACE        reduce using rule 223 (argument)
    REM           reduce using rule 223 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 223 (argument)
    RETURN        reduce using rule 223 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 223 (argument)
    RPAREN        reduce using rule 223 (argument)
    SFUNC         reduce using rule 223 (argument)
    SPACKAGE      reduce using rule 223 (argument)
    SSTRUCT       reduce using rule 223 (argument)
    STEP          reduce using rule 223 (argument)
    STRING        reduce using rule 223 (argument)
    TAG           reduce using rule 223 (argument)
    TSTEP         reduce using rule 223 (argument)
    TYPSTRUCT     reduce using rule 223 (argument)
    UNEQUAL       reduce using rule 223 (argument)
    VALUE         reduce using rule 223 (argument)
    VAR           reduce using rule 223 (argument)

state 175 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS UNEQUAL BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression UNEQUAL argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 221 (argument)
    ';'           reduce using rule 221 (argument)
    ADDR          reduce using rule 221 (argument)
    AFF           reduce using rule 221 (argument)
    AND           reduce using rule 221 (argument)
    ASSIGN        reduce using rule 221 (argument)
    BASICTYPE     reduce using rule 221 (argument)
    BITAND        reduce using rule 221 (argument)
    BITANDEQ      reduce using rule 221 (argument)
    BITCLEAR      reduce using rule 221 (argument)
    BITOR         reduce using rule 221 (argument)
    BITOREQ       reduce using rule 221 (argument)
    BITXOR        reduce using rule 221 (argument)
    BITXOREQ      reduce using rule 221 (argument)
    BOOLEAN       reduce using rule 221 (argument)
    BYTENUM       reduce using rule 221 (argument)
    CASSIGN       reduce using rule 221 (argument)
    COMMA         reduce using rule 221 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 221 (argument)
    DOUBLE        reduce using rule 221 (argument)
    DPROGRAM      reduce using rule 221 (argument)
    DSTACK        reduce using rule 221 (argument)
    DSTATE        reduce using rule 221 (argument)
    EQUAL         reduce using rule 221 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 221 (argument)
    FLOAT         reduce using rule 221 (argument)
    FOR           reduce using rule 221 (argument)
    FUNC          reduce using rule 221 (argument)
    GOTO          reduce using rule 221 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 221 (argument)
    IF            reduce using rule 221 (argument)
    IMPORT        reduce using rule 221 (argument)
    INFER         reduce using rule 221 (argument)
    INT           reduce using rule 221 (argument)
    LBRACE        reduce using rule 221 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 221 (argument)
    LONG          reduce using rule 221 (argument)
    LPAREN        reduce using rule 221 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 221 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 221 (argument)
    NEW           reduce using rule 221 (argument)
    NOT           reduce using rule 221 (argument)
    OR            reduce using rule 221 (argument)
    PACKAGE       reduce using rule 221 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 221 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 221 (argument)
    REM           reduce using rule 221 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 221 (argument)
    RETURN        reduce using rule 221 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 221 (argument)
    RPAREN        reduce using rule 221 (argument)
    SFUNC         reduce using rule 221 (argument)
    SPACKAGE      reduce using rule 221 (argument)
    SSTRUCT       reduce using rule 221 (argument)
    STEP          reduce using rule 221 (argument)
    STRING        reduce using rule 221 (argument)
    TAG           reduce using rule 221 (argument)
    TSTEP         reduce using rule 221 (argument)
    TYPSTRUCT     reduce using rule 221 (argument)
    UNEQUAL       reduce using rule 221 (argument)
    VALUE         reduce using rule 221 (argument)
    VAR           reduce using rule 221 (argument)

state 176 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS UNEQUAL BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  219 argument: nonAssignExpression UNEQUAL nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 219 (argument)
    ';'           reduce using rule 219 (argument)
    ADDR          reduce using rule 219 (argument)
    AFF           reduce using rule 219 (argument)
    AND           reduce using rule 219 (argument)
    ASSIGN        reduce using rule 219 (argument)
    BASICTYPE     reduce using rule 219 (argument)
    BITAND        reduce using rule 219 (argument)
    BITANDEQ      reduce using rule 219 (argument)
    BITCLEAR      reduce using rule 219 (argument)
    BITOR         reduce using rule 219 (argument)
    BITOREQ       reduce using rule 219 (argument)
    BITXOR        reduce using rule 219 (argument)
    BITXOREQ      reduce using rule 219 (argument)
    BOOLEAN       reduce using rule 219 (argument)
    BYTENUM       reduce using rule 219 (argument)
    CASSIGN       reduce using rule 219 (argument)
    COMMA         reduce using rule 219 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 219 (argument)
    DOUBLE        reduce using rule 219 (argument)
    DPROGRAM      reduce using rule 219 (argument)
    DSTACK        reduce using rule 219 (argument)
    DSTATE        reduce using rule 219 (argument)
    EQUAL         reduce using rule 219 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 219 (argument)
    FLOAT         reduce using rule 219 (argument)
    FOR           reduce using rule 219 (argument)
    FUNC          reduce using rule 219 (argument)
    GOTO          reduce using rule 219 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 219 (argument)
    IF            reduce using rule 219 (argument)
    IMPORT        reduce using rule 219 (argument)
    INFER         reduce using rule 219 (argument)
    INT           reduce using rule 219 (argument)
    LBRACE        reduce using rule 219 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 219 (argument)
    LONG          reduce using rule 219 (argument)
    LPAREN        reduce using rule 219 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 219 (argument)
    MINUSMINUS    reduce using rule 219 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 219 (argument)
    NEW           reduce using rule 219 (argument)
    NOT           reduce using rule 219 (argument)
    OR            reduce using rule 219 (argument)
    PACKAGE       reduce using rule 219 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 219 (argument)
    PLUSPLUS      reduce using rule 219 (argument)
    RBRACE        reduce using rule 219 (argument)
    REM           reduce using rule 219 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 219 (argument)
    RETURN        reduce using rule 219 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 219 (argument)
    RPAREN        reduce using rule 219 (argument)
    SFUNC         reduce using rule 219 (argument)
    SPACKAGE      reduce using rule 219 (argument)
    SSTRUCT       reduce using rule 219 (argument)
    STEP          reduce using rule 219 (argument)
    STRING        reduce using rule 219 (argument)
    TAG           reduce using rule 219 (argument)
    TSTEP         reduce using rule 219 (argument)
    TYPSTRUCT     reduce using rule 219 (argument)
    UNEQUAL       reduce using rule 219 (argument)
    VALUE         reduce using rule 219 (argument)
    VAR           reduce using rule 219 (argument)

state 177 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS EQUAL BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression EQUAL argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 217 (argument)
    ';'           reduce using rule 217 (argument)
    ADDR          reduce using rule 217 (argument)
    AFF           reduce using rule 217 (argument)
    AND           reduce using rule 217 (argument)
    ASSIGN        reduce using rule 217 (argument)
    BASICTYPE     reduce using rule 217 (argument)
    BITAND        reduce using rule 217 (argument)
    BITANDEQ      reduce using rule 217 (argument)
    BITCLEAR      reduce using rule 217 (argument)
    BITOR         reduce using rule 217 (argument)
    BITOREQ       reduce using rule 217 (argument)
    BITXOR        reduce using rule 217 (argument)
    BITXOREQ      reduce using rule 217 (argument)
    BOOLEAN       reduce using rule 217 (argument)
    BYTENUM       reduce using rule 217 (argument)
    CASSIGN       reduce using rule 217 (argument)
    COMMA         reduce using rule 217 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 217 (argument)
    DOUBLE        reduce using rule 217 (argument)
    DPROGRAM      reduce using rule 217 (argument)
    DSTACK        reduce using rule 217 (argument)
    DSTATE        reduce using rule 217 (argument)
    EQUAL         reduce using rule 217 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 217 (argument)
    FLOAT         reduce using rule 217 (argument)
    FOR           reduce using rule 217 (argument)
    FUNC          reduce using rule 217 (argument)
    GOTO          reduce using rule 217 (argument)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 217 (argument)
    IF            reduce using rule 217 (argument)
    IMPORT        reduce using rule 217 (argument)
    INFER         reduce using rule 217 (argument)
    INT           reduce using rule 217 (argument)
    LBRACE        reduce using rule 217 (argument)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 217 (argument)
    LONG          reduce using rule 217 (argument)
    LPAREN        reduce using rule 217 (argument)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 217 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 217 (argument)
    NEW           reduce using rule 217 (argument)
    NOT           reduce using rule 217 (argument)
    OR            reduce using rule 217 (argument)
    PACKAGE       reduce using rule 217 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 217 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 217 (argument)
    REM           reduce using rule 217 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 217 (argument)
    RETURN        reduce using rule 217 (argument)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 217 (argument)
    RPAREN        reduce using rule 217 (argument)
    SFUNC         reduce using rule 217 (argument)
    SPACKAGE      reduce using rule 217 (argument)
    SSTRUCT       reduce using rule 217 (argument)
    STEP          reduce using rule 217 (argument)
    STRING        reduce using rule 217 (argument)
    TAG           reduce using rule 217 (argument)
    TSTEP         reduce using rule 217 (argument)
    TYPSTRUCT     reduce using rule 217 (argument)
    UNEQUAL       reduce using rule 217 (argument)
    VALUE         reduce using rule 217 (argument)
    VAR           reduce using rule 217 (argument)

state 178 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS EQUAL BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  215 argument: nonAssignExpression EQUAL nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 215 (argument)
    ';'           reduce using rule 215 (argument)
    ADDR          reduce using rule 215 (argument)
    AFF           reduce using rule 215 (argument)
    AND           reduce using rule 215 (argument)
    ASSIGN        reduce using rule 215 (argument)
    BASICTYPE     reduce using rule 215 (argument)
    BITAND        reduce using rule 215 (argument)
    BITANDEQ      reduce using rule 215 (argument)
    BITCLEAR      reduce using rule 215 (argument)
    BITOR         reduce using rule 215 (argument)
    BITOREQ       reduce using rule 215 (argument)
    BITXOR        reduce using rule 215 (argument)
    BITXOREQ      reduce using rule 215 (argument)
    BOOLEAN       reduce using rule 215 (argument)
    BYTENUM       reduce using rule 215 (argument)
    CASSIGN       reduce using rule 215 (argument)
    COMMA         reduce using rule 215 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 215 (argument)
    DOUBLE        reduce using rule 215 (argument)
    DPROGRAM      reduce using rule 215 (argument)
    DSTACK        reduce using rule 215 (argument)
    DSTATE        reduce using rule 215 (argument)
    EQUAL         reduce using rule 215 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 215 (argument)
    FLOAT         reduce using rule 215 (argument)
    FOR           reduce using rule 215 (argument)
    FUNC          reduce using rule 215 (argument)
    GOTO          reduce using rule 215 (argument)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 215 (argument)
    IF            reduce using rule 215 (argument)
    IMPORT        reduce using rule 215 (argument)
    INFER         reduce using rule 215 (argument)
    INT           reduce using rule 215 (argument)
    LBRACE        reduce using rule 215 (argument)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 215 (argument)
    LONG          reduce using rule 215 (argument)
    LPAREN        reduce using rule 215 (argument)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 215 (argument)
    MINUSMINUS    reduce using rule 215 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 215 (argument)
    NEW           reduce using rule 215 (argument)
    NOT           reduce using rule 215 (argument)
    OR            reduce using rule 215 (argument)
    PACKAGE       reduce using rule 215 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 215 (argument)
    PLUSPLUS      reduce using rule 215 (argument)
    RBRACE        reduce using rule 215 (argument)
    REM           reduce using rule 215 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 215 (argument)
    RETURN        reduce using rule 215 (argument)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 215 (argument)
    RPAREN        reduce using rule 215 (argument)
    SFUNC         reduce using rule 215 (argument)
    SPACKAGE      reduce using rule 215 (argument)
    SSTRUCT       reduce using rule 215 (argument)
    STEP          reduce using rule 215 (argument)
    STRING        reduce using rule 215 (argument)
    TAG           reduce using rule 215 (argument)
    TSTEP         reduce using rule 215 (argument)
    TYPSTRUCT     reduce using rule 215 (argument)
    UNEQUAL       reduce using rule 215 (argument)
    VALUE         reduce using rule 215 (argument)
    VAR           reduce using rule 215 (argument)

state 179 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS EXP BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression EXP argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 213 (argument)
    ';'           reduce using rule 213 (argument)
    ADDR          reduce using rule 213 (argument)
    AFF           reduce using rule 213 (argument)
    AND           reduce using rule 213 (argument)
    ASSIGN        reduce using rule 213 (argument)
    BASICTYPE     reduce using rule 213 (argument)
    BITAND        reduce using rule 213 (argument)
    BITANDEQ      reduce using rule 213 (argument)
    BITCLEAR      reduce using rule 213 (argument)
    BITOR         reduce using rule 213 (argument)
    BITOREQ       reduce using rule 213 (argument)
    BITXOR        reduce using rule 213 (argument)
    BITXOREQ      reduce using rule 213 (argument)
    BOOLEAN       reduce using rule 213 (argument)
    BYTENUM       reduce using rule 213 (argument)
    CASSIGN       reduce using rule 213 (argument)
    COMMA         reduce using rule 213 (argument)
    DIV           reduce using rule 213 (argument)
    DIVEQ         reduce using rule 213 (argument)
    DOUBLE        reduce using rule 213 (argument)
    DPROGRAM      reduce using rule 213 (argument)
    DSTACK        reduce using rule 213 (argument)
    DSTATE        reduce using rule 213 (argument)
    EQUAL         reduce using rule 213 (argument)
    EXP           reduce using rule 213 (argument)
    EXPEQ         reduce using rule 213 (argument)
    FLOAT         reduce using rule 213 (argument)
    FOR           reduce using rule 213 (argument)
    FUNC          reduce using rule 213 (argument)
    GOTO          reduce using rule 213 (argument)
    GTHAN         reduce using rule 213 (argument)
    GTHANEQ       reduce using rule 213 (argument)
    IDENT         reduce using rule 213 (argument)
    IF            reduce using rule 213 (argument)
    IMPORT        reduce using rule 213 (argument)
    INFER         reduce using rule 213 (argument)
    INT           reduce using rule 213 (argument)
    LBRACE        reduce using rule 213 (argument)
    LEFTSHIFT     reduce using rule 213 (argument)
    LEFTSHIFTEQ   reduce using rule 213 (argument)
    LONG          reduce using rule 213 (argument)
    LPAREN        reduce using rule 213 (argument)
    LTHAN         reduce using rule 213 (argument)
    LTHANEQ       reduce using rule 213 (argument)
    MINUS         reduce using rule 213 (argument)
    MINUSEQ       reduce using rule 213 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          reduce using rule 213 (argument)
    MULTEQ        reduce using rule 213 (argument)
    NEW           reduce using rule 213 (argument)
    NOT           reduce using rule 213 (argument)
    OR            reduce using rule 213 (argument)
    PACKAGE       reduce using rule 213 (argument)
    PLUS          reduce using rule 213 (argument)
    PLUSEQ        reduce using rule 213 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 213 (argument)
    REM           reduce using rule 213 (argument)
    REMAINDER     reduce using rule 213 (argument)
    REMAINDEREQ   reduce using rule 213 (argument)
    RETURN        reduce using rule 213 (argument)
    RIGHTSHIFT    reduce using rule 213 (argument)
    RIGHTSHIFTEQ  reduce using rule 213 (argument)
    RPAREN        reduce using rule 213 (argument)
    SFUNC         reduce using rule 213 (argument)
    SPACKAGE      reduce using rule 213 (argument)
    SSTRUCT       reduce using rule 213 (argument)
    STEP          reduce using rule 213 (argument)
    STRING        reduce using rule 213 (argument)
    TAG           reduce using rule 213 (argument)
    TSTEP         reduce using rule 213 (argument)
    TYPSTRUCT     reduce using rule 213 (argument)
    UNEQUAL       reduce using rule 213 (argument)
    VALUE         reduce using rule 213 (argument)
    VAR           reduce using rule 213 (argument)

state 180 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS EXP BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  211 argument: nonAssignExpression EXP nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 211 (argument)
    ';'           reduce using rule 211 (argument)
    ADDR          reduce using rule 211 (argument)
    AFF           reduce using rule 211 (argument)
    AND           reduce using rule 211 (argument)
    ASSIGN        reduce using rule 211 (argument)
    BASICTYPE     reduce using rule 211 (argument)
    BITAND        reduce using rule 211 (argument)
    BITANDEQ      reduce using rule 211 (argument)
    BITCLEAR      reduce using rule 211 (argument)
    BITOR         reduce using rule 211 (argument)
    BITOREQ       reduce using rule 211 (argument)
    BITXOR        reduce using rule 211 (argument)
    BITXOREQ      reduce using rule 211 (argument)
    BOOLEAN       reduce using rule 211 (argument)
    BYTENUM       reduce using rule 211 (argument)
    CASSIGN       reduce using rule 211 (argument)
    COMMA         reduce using rule 211 (argument)
    DIV           reduce using rule 211 (argument)
    DIVEQ         reduce using rule 211 (argument)
    DOUBLE        reduce using rule 211 (argument)
    DPROGRAM      reduce using rule 211 (argument)
    DSTACK        reduce using rule 211 (argument)
    DSTATE        reduce using rule 211 (argument)
    EQUAL         reduce using rule 211 (argument)
    EXP           reduce using rule 211 (argument)
    EXPEQ         reduce using rule 211 (argument)
    FLOAT         reduce using rule 211 (argument)
    FOR           reduce using rule 211 (argument)
    FUNC          reduce using rule 211 (argument)
    GOTO          reduce using rule 211 (argument)
    GTHAN         reduce using rule 211 (argument)
    GTHANEQ       reduce using rule 211 (argument)
    IDENT         reduce using rule 211 (argument)
    IF            reduce using rule 211 (argument)
    IMPORT        reduce using rule 211 (argument)
    INFER         reduce using rule 211 (argument)
    INT           reduce using rule 211 (argument)
    LBRACE        reduce using rule 211 (argument)
    LEFTSHIFT     reduce using rule 211 (argument)
    LEFTSHIFTEQ   reduce using rule 211 (argument)
    LONG          reduce using rule 211 (argument)
    LPAREN        reduce using rule 211 (argument)
    LTHAN         reduce using rule 211 (argument)
    LTHANEQ       reduce using rule 211 (argument)
    MINUS         reduce using rule 211 (argument)
    MINUSEQ       reduce using rule 211 (argument)
    MINUSMINUS    reduce using rule 211 (argument)
    MULT          reduce using rule 211 (argument)
    MULTEQ        reduce using rule 211 (argument)
    NEW           reduce using rule 211 (argument)
    NOT           reduce using rule 211 (argument)
    OR            reduce using rule 211 (argument)
    PACKAGE       reduce using rule 211 (argument)
    PLUS          reduce using rule 211 (argument)
    PLUSEQ        reduce using rule 211 (argument)
    PLUSPLUS      reduce using rule 211 (argument)
    RBRACE        reduce using rule 211 (argument)
    REM           reduce using rule 211 (argument)
    REMAINDER     reduce using rule 211 (argument)
    REMAINDEREQ   reduce using rule 211 (argument)
    RETURN        reduce using rule 211 (argument)
    RIGHTSHIFT    reduce using rule 211 (argument)
    RIGHTSHIFTEQ  reduce using rule 211 (argument)
    RPAREN        reduce using rule 211 (argument)
    SFUNC         reduce using rule 211 (argument)
    SPACKAGE      reduce using rule 211 (argument)
    SSTRUCT       reduce using rule 211 (argument)
    STEP          reduce using rule 211 (argument)
    STRING        reduce using rule 211 (argument)
    TAG           reduce using rule 211 (argument)
    TSTEP         reduce using rule 211 (argument)
    TYPSTRUCT     reduce using rule 211 (argument)
    UNEQUAL       reduce using rule 211 (argument)
    VALUE         reduce using rule 211 (argument)
    VAR           reduce using rule 211 (argument)

state 181 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS RIGHTSHIFT BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression RIGHTSHIFT argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 209 (argument)
    ';'           reduce using rule 209 (argument)
    ADDR          reduce using rule 209 (argument)
    AFF           reduce using rule 209 (argument)
    AND           reduce using rule 209 (argument)
    ASSIGN        reduce using rule 209 (argument)
    BASICTYPE     reduce using rule 209 (argument)
    BITAND        reduce using rule 209 (argument)
    BITANDEQ      reduce using rule 209 (argument)
    BITCLEAR      reduce using rule 209 (argument)
    BITOR         reduce using rule 209 (argument)
    BITOREQ       reduce using rule 209 (argument)
    BITXOR        reduce using rule 209 (argument)
    BITXOREQ      reduce using rule 209 (argument)
    BOOLEAN       reduce using rule 209 (argument)
    BYTENUM       reduce using rule 209 (argument)
    CASSIGN       reduce using rule 209 (argument)
    COMMA         reduce using rule 209 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 209 (argument)
    DOUBLE        reduce using rule 209 (argument)
    DPROGRAM      reduce using rule 209 (argument)
    DSTACK        reduce using rule 209 (argument)
    DSTATE        reduce using rule 209 (argument)
    EQUAL         reduce using rule 209 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 209 (argument)
    FLOAT         reduce using rule 209 (argument)
    FOR           reduce using rule 209 (argument)
    FUNC          reduce using rule 209 (argument)
    GOTO          reduce using rule 209 (argument)
    GTHAN         reduce using rule 209 (argument)
    GTHANEQ       reduce using rule 209 (argument)
    IDENT         reduce using rule 209 (argument)
    IF            reduce using rule 209 (argument)
    IMPORT        reduce using rule 209 (argument)
    INFER         reduce using rule 209 (argument)
    INT           reduce using rule 209 (argument)
    LBRACE        reduce using rule 209 (argument)
    LEFTSHIFT     reduce using rule 209 (argument)
    LEFTSHIFTEQ   reduce using rule 209 (argument)
    LONG          reduce using rule 209 (argument)
    LPAREN        reduce using rule 209 (argument)
    LTHAN         reduce using rule 209 (argument)
    LTHANEQ       reduce using rule 209 (argument)
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 209 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 209 (argument)
    NEW           reduce using rule 209 (argument)
    NOT           reduce using rule 209 (argument)
    OR            reduce using rule 209 (argument)
    PACKAGE       reduce using rule 209 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 209 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 209 (argument)
    REM           reduce using rule 209 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 209 (argument)
    RETURN        reduce using rule 209 (argument)
    RIGHTSHIFT    reduce using rule 209 (argument)
    RIGHTSHIFTEQ  reduce using rule 209 (argument)
    RPAREN        reduce using rule 209 (argument)
    SFUNC         reduce using rule 209 (argument)
    SPACKAGE      reduce using rule 209 (argument)
    SSTRUCT       reduce using rule 209 (argument)
    STEP          reduce using rule 209 (argument)
    STRING        reduce using rule 209 (argument)
    TAG           reduce using rule 209 (argument)
    TSTEP         reduce using rule 209 (argument)
    TYPSTRUCT     reduce using rule 209 (argument)
    UNEQUAL       reduce using rule 209 (argument)
    VALUE         reduce using rule 209 (argument)
    VAR           reduce using rule 209 (argument)

state 182 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS RIGHTSHIFT BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  207 argument: nonAssignExpression RIGHTSHIFT nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 207 (argument)
    ';'           reduce using rule 207 (argument)
    ADDR          reduce using rule 207 (argument)
    AFF           reduce using rule 207 (argument)
    AND           reduce using rule 207 (argument)
    ASSIGN        reduce using rule 207 (argument)
    BASICTYPE     reduce using rule 207 (argument)
    BITAND        reduce using rule 207 (argument)
    BITANDEQ      reduce using rule 207 (argument)
    BITCLEAR      reduce using rule 207 (argument)
    BITOR         reduce using rule 207 (argument)
    BITOREQ       reduce using rule 207 (argument)
    BITXOR        reduce using rule 207 (argument)
    BITXOREQ      reduce using rule 207 (argument)
    BOOLEAN       reduce using rule 207 (argument)
    BYTENUM       reduce using rule 207 (argument)
    CASSIGN       reduce using rule 207 (argument)
    COMMA         reduce using rule 207 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 207 (argument)
    DOUBLE        reduce using rule 207 (argument)
    DPROGRAM      reduce using rule 207 (argument)
    DSTACK        reduce using rule 207 (argument)
    DSTATE        reduce using rule 207 (argument)
    EQUAL         reduce using rule 207 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 207 (argument)
    FLOAT         reduce using rule 207 (argument)
    FOR           reduce using rule 207 (argument)
    FUNC          reduce using rule 207 (argument)
    GOTO          reduce using rule 207 (argument)
    GTHAN         reduce using rule 207 (argument)
    GTHANEQ       reduce using rule 207 (argument)
    IDENT         reduce using rule 207 (argument)
    IF            reduce using rule 207 (argument)
    IMPORT        reduce using rule 207 (argument)
    INFER         reduce using rule 207 (argument)
    INT           reduce using rule 207 (argument)
    LBRACE        reduce using rule 207 (argument)
    LEFTSHIFT     reduce using rule 207 (argument)
    LEFTSHIFTEQ   reduce using rule 207 (argument)
    LONG          reduce using rule 207 (argument)
    LPAREN        reduce using rule 207 (argument)
    LTHAN         reduce using rule 207 (argument)
    LTHANEQ       reduce using rule 207 (argument)
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 207 (argument)
    MINUSMINUS    reduce using rule 207 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 207 (argument)
    NEW           reduce using rule 207 (argument)
    NOT           reduce using rule 207 (argument)
    OR            reduce using rule 207 (argument)
    PACKAGE       reduce using rule 207 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 207 (argument)
    PLUSPLUS      reduce using rule 207 (argument)
    RBRACE        reduce using rule 207 (argument)
    REM           reduce using rule 207 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 207 (argument)
    RETURN        reduce using rule 207 (argument)
    RIGHTSHIFT    reduce using rule 207 (argument)
    RIGHTSHIFTEQ  reduce using rule 207 (argument)
    RPAREN        reduce using rule 207 (argument)
    SFUNC         reduce using rule 207 (argument)
    SPACKAGE      reduce using rule 207 (argument)
    SSTRUCT       reduce using rule 207 (argument)
    STEP          reduce using rule 207 (argument)
    STRING        reduce using rule 207 (argument)
    TAG           reduce using rule 207 (argument)
    TSTEP         reduce using rule 207 (argument)
    TYPSTRUCT     reduce using rule 207 (argument)
    UNEQUAL       reduce using rule 207 (argument)
    VALUE         reduce using rule 207 (argument)
    VAR           reduce using rule 207 (argument)

state 183 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS LEFTSHIFT BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression LEFTSHIFT argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 205 (argument)
    ';'           reduce using rule 205 (argument)
    ADDR          reduce using rule 205 (argument)
    AFF           reduce using rule 205 (argument)
    AND           reduce using rule 205 (argument)
    ASSIGN        reduce using rule 205 (argument)
    BASICTYPE     reduce using rule 205 (argument)
    BITAND        reduce using rule 205 (argument)
    BITANDEQ      reduce using rule 205 (argument)
    BITCLEAR      reduce using rule 205 (argument)
    BITOR         reduce using rule 205 (argument)
    BITOREQ       reduce using rule 205 (argument)
    BITXOR        reduce using rule 205 (argument)
    BITXOREQ      reduce using rule 205 (argument)
    BOOLEAN       reduce using rule 205 (argument)
    BYTENUM       reduce using rule 205 (argument)
    CASSIGN       reduce using rule 205 (argument)
    COMMA         reduce using rule 205 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 205 (argument)
    DOUBLE        reduce using rule 205 (argument)
    DPROGRAM      reduce using rule 205 (argument)
    DSTACK        reduce using rule 205 (argument)
    DSTATE        reduce using rule 205 (argument)
    EQUAL         reduce using rule 205 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 205 (argument)
    FLOAT         reduce using rule 205 (argument)
    FOR           reduce using rule 205 (argument)
    FUNC          reduce using rule 205 (argument)
    GOTO          reduce using rule 205 (argument)
    GTHAN         reduce using rule 205 (argument)
    GTHANEQ       reduce using rule 205 (argument)
    IDENT         reduce using rule 205 (argument)
    IF            reduce using rule 205 (argument)
    IMPORT        reduce using rule 205 (argument)
    INFER         reduce using rule 205 (argument)
    INT           reduce using rule 205 (argument)
    LBRACE        reduce using rule 205 (argument)
    LEFTSHIFT     reduce using rule 205 (argument)
    LEFTSHIFTEQ   reduce using rule 205 (argument)
    LONG          reduce using rule 205 (argument)
    LPAREN        reduce using rule 205 (argument)
    LTHAN         reduce using rule 205 (argument)
    LTHANEQ       reduce using rule 205 (argument)
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 205 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 205 (argument)
    NEW           reduce using rule 205 (argument)
    NOT           reduce using rule 205 (argument)
    OR            reduce using rule 205 (argument)
    PACKAGE       reduce using rule 205 (argument)
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 205 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 205 (argument)
    REM           reduce using rule 205 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 205 (argument)
    RETURN        reduce using rule 205 (argument)
    RIGHTSHIFT    reduce using rule 205 (argument)
    RIGHTSHIFTEQ  reduce using rule 205 (argument)
    RPAREN        reduce using rule 205 (argument)
    SFUNC         reduce using rule 205 (argument)
    SPACKAGE      reduce using rule 205 (argument)
    SSTRUCT       reduce using rule 205 (argument)
    STEP          reduce using rule 205 (argument)
    STRING        reduce using rule 205 (argument)
    TAG           reduce using rule 205 (argument)
    TSTEP         reduce using rule 205 (argument)
    TYPSTRUCT     reduce using rule 205 (argument)
    UNEQUAL       reduce using rule 205 (argument)
    VALUE         reduce using rule 205 (argument)
    VAR           reduce using rule 205 (argument)

state 184 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS LEFTSHIFT BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  203 argument: nonAssignExpression LEFTSHIFT nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 203 (argument)
    ';'           reduce using rule 203 (argument)
    ADDR          reduce using rule 203 (argument)
    AFF           reduce using rule 203 (argument)
    AND           reduce using rule 203 (argument)
    ASSIGN        reduce using rule 203 (argument)
    BASICTYPE     reduce using rule 203 (argument)
    BITAND        reduce using rule 203 (argument)
    BITANDEQ      reduce using rule 203 (argument)
    BITCLEAR      reduce using rule 203 (argument)
    BITOR         reduce using rule 203 (argument)
    BITOREQ       reduce using rule 203 (argument)
    BITXOR        reduce using rule 203 (argument)
    BITXOREQ      reduce using rule 203 (argument)
    BOOLEAN       reduce using rule 203 (argument)
    BYTENUM       reduce using rule 203 (argument)
    CASSIGN       reduce using rule 203 (argument)
    COMMA         reduce using rule 203 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 203 (argument)
    DOUBLE        reduce using rule 203 (argument)
    DPROGRAM      reduce using rule 203 (argument)
    DSTACK        reduce using rule 203 (argument)
    DSTATE        reduce using rule 203 (argument)
    EQUAL         reduce using rule 203 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 203 (argument)
    FLOAT         reduce using rule 203 (argument)
    FOR           reduce using rule 203 (argument)
    FUNC          reduce using rule 203 (argument)
    GOTO          reduce using rule 203 (argument)
    GTHAN         reduce using rule 203 (argument)
    GTHANEQ       reduce using rule 203 (argument)
    IDENT         reduce using rule 203 (argument)
    IF            reduce using rule 203 (argument)
    IMPORT        reduce using rule 203 (argument)
    INFER         reduce using rule 203 (argument)
    INT           reduce using rule 203 (argument)
    LBRACE        reduce using rule 203 (argument)
    LEFTSHIFT     reduce using rule 203 (argument)
    LEFTSHIFTEQ   reduce using rule 203 (argument)
    LONG          reduce using rule 203 (argument)
    LPAREN        reduce using rule 203 (argument)
    LTHAN         reduce using rule 203 (argument)
    LTHANEQ       reduce using rule 203 (argument)
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 203 (argument)
    MINUSMINUS    reduce using rule 203 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 203 (argument)
    NEW           reduce using rule 203 (argument)
    NOT           reduce using rule 203 (argument)
    OR            reduce using rule 203 (argument)
    PACKAGE       reduce using rule 203 (argument)
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 203 (argument)
    PLUSPLUS      reduce using rule 203 (argument)
    RBRACE        reduce using rule 203 (argument)
    REM           reduce using rule 203 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 203 (argument)
    RETURN        reduce using rule 203 (argument)
    RIGHTSHIFT    reduce using rule 203 (argument)
    RIGHTSHIFTEQ  reduce using rule 203 (argument)
    RPAREN        reduce using rule 203 (argument)
    SFUNC         reduce using rule 203 (argument)
    SPACKAGE      reduce using rule 203 (argument)
    SSTRUCT       reduce using rule 203 (argument)
    STEP          reduce using rule 203 (argument)
    STRING        reduce using rule 203 (argument)
    TAG           reduce using rule 203 (argument)
    TSTEP         reduce using rule 203 (argument)
    TYPSTRUCT     reduce using rule 203 (argument)
    UNEQUAL       reduce using rule 203 (argument)
    VALUE         reduce using rule 203 (argument)
    VAR           reduce using rule 203 (argument)

state 185 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS REMAINDER BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression REMAINDER argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 201 (argument)
    ';'           reduce using rule 201 (argument)
    ADDR          reduce using rule 201 (argument)
    AFF           reduce using rule 201 (argument)
    AND           reduce using rule 201 (argument)
    ASSIGN        reduce using rule 201 (argument)
    BASICTYPE     reduce using rule 201 (argument)
    BITAND        reduce using rule 201 (argument)
    BITANDEQ      reduce using rule 201 (argument)
    BITCLEAR      reduce using rule 201 (argument)
    BITOR         reduce using rule 201 (argument)
    BITOREQ       reduce using rule 201 (argument)
    BITXOR        reduce using rule 201 (argument)
    BITXOREQ      reduce using rule 201 (argument)
    BOOLEAN       reduce using rule 201 (argument)
    BYTENUM       reduce using rule 201 (argument)
    CASSIGN       reduce using rule 201 (argument)
    COMMA         reduce using rule 201 (argument)
    DIV           reduce using rule 201 (argument)
    DIVEQ         reduce using rule 201 (argument)
    DOUBLE        reduce using rule 201 (argument)
    DPROGRAM      reduce using rule 201 (argument)
    DSTACK        reduce using rule 201 (argument)
    DSTATE        reduce using rule 201 (argument)
    EQUAL         reduce using rule 201 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 201 (argument)
    FLOAT         reduce using rule 201 (argument)
    FOR           reduce using rule 201 (argument)
    FUNC          reduce using rule 201 (argument)
    GOTO          reduce using rule 201 (argument)
    GTHAN         reduce using rule 201 (argument)
    GTHANEQ       reduce using rule 201 (argument)
    IDENT         reduce using rule 201 (argument)
    IF            reduce using rule 201 (argument)
    IMPORT        reduce using rule 201 (argument)
    INFER         reduce using rule 201 (argument)
    INT           reduce using rule 201 (argument)
    LBRACE        reduce using rule 201 (argument)
    LEFTSHIFT     reduce using rule 201 (argument)
    LEFTSHIFTEQ   reduce using rule 201 (argument)
    LONG          reduce using rule 201 (argument)
    LPAREN        reduce using rule 201 (argument)
    LTHAN         reduce using rule 201 (argument)
    LTHANEQ       reduce using rule 201 (argument)
    MINUS         reduce using rule 201 (argument)
    MINUSEQ       reduce using rule 201 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          reduce using rule 201 (argument)
    MULTEQ        reduce using rule 201 (argument)
    NEW           reduce using rule 201 (argument)
    NOT           reduce using rule 201 (argument)
    OR            reduce using rule 201 (argument)
    PACKAGE       reduce using rule 201 (argument)
    PLUS          reduce using rule 201 (argument)
    PLUSEQ        reduce using rule 201 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 201 (argument)
    REM           reduce using rule 201 (argument)
    REMAINDER     reduce using rule 201 (argument)
    REMAINDEREQ   reduce using rule 201 (argument)
    RETURN        reduce using rule 201 (argument)
    RIGHTSHIFT    reduce using rule 201 (argument)
    RIGHTSHIFTEQ  reduce using rule 201 (argument)
    RPAREN        reduce using rule 201 (argument)
    SFUNC         reduce using rule 201 (argument)
    SPACKAGE      reduce using rule 201 (argument)
    SSTRUCT       reduce using rule 201 (argument)
    STEP          reduce using rule 201 (argument)
    STRING        reduce using rule 201 (argument)
    TAG           reduce using rule 201 (argument)
    TSTEP         reduce using rule 201 (argument)
    TYPSTRUCT     reduce using rule 201 (argument)
    UNEQUAL       reduce using rule 201 (argument)
    VALUE         reduce using rule 201 (argument)
    VAR           reduce using rule 201 (argument)

state 186 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS REMAINDER BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  199 argument: nonAssignExpression REMAINDER nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 199 (argument)
    ';'           reduce using rule 199 (argument)
    ADDR          reduce using rule 199 (argument)
    AFF           reduce using rule 199 (argument)
    AND           reduce using rule 199 (argument)
    ASSIGN        reduce using rule 199 (argument)
    BASICTYPE     reduce using rule 199 (argument)
    BITAND        reduce using rule 199 (argument)
    BITANDEQ      reduce using rule 199 (argument)
    BITCLEAR      reduce using rule 199 (argument)
    BITOR         reduce using rule 199 (argument)
    BITOREQ       reduce using rule 199 (argument)
    BITXOR        reduce using rule 199 (argument)
    BITXOREQ      reduce using rule 199 (argument)
    BOOLEAN       reduce using rule 199 (argument)
    BYTENUM       reduce using rule 199 (argument)
    CASSIGN       reduce using rule 199 (argument)
    COMMA         reduce using rule 199 (argument)
    DIV           reduce using rule 199 (argument)
    DIVEQ         reduce using rule 199 (argument)
    DOUBLE        reduce using rule 199 (argument)
    DPROGRAM      reduce using rule 199 (argument)
    DSTACK        reduce using rule 199 (argument)
    DSTATE        reduce using rule 199 (argument)
    EQUAL         reduce using rule 199 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 199 (argument)
    FLOAT         reduce using rule 199 (argument)
    FOR           reduce using rule 199 (argument)
    FUNC          reduce using rule 199 (argument)
    GOTO          reduce using rule 199 (argument)
    GTHAN         reduce using rule 199 (argument)
    GTHANEQ       reduce using rule 199 (argument)
    IDENT         reduce using rule 199 (argument)
    IF            reduce using rule 199 (argument)
    IMPORT        reduce using rule 199 (argument)
    INFER         reduce using rule 199 (argument)
    INT           reduce using rule 199 (argument)
    LBRACE        reduce using rule 199 (argument)
    LEFTSHIFT     reduce using rule 199 (argument)
    LEFTSHIFTEQ   reduce using rule 199 (argument)
    LONG          reduce using rule 199 (argument)
    LPAREN        reduce using rule 199 (argument)
    LTHAN         reduce using rule 199 (argument)
    LTHANEQ       reduce using rule 199 (argument)
    MINUS         reduce using rule 199 (argument)
    MINUSEQ       reduce using rule 199 (argument)
    MINUSMINUS    reduce using rule 199 (argument)
    MULT          reduce using rule 199 (argument)
    MULTEQ        reduce using rule 199 (argument)
    NEW           reduce using rule 199 (argument)
    NOT           reduce using rule 199 (argument)
    OR            reduce using rule 199 (argument)
    PACKAGE       reduce using rule 199 (argument)
    PLUS          reduce using rule 199 (argument)
    PLUSEQ        reduce using rule 199 (argument)
    PLUSPLUS      reduce using rule 199 (argument)
    RBRACE        reduce using rule 199 (argument)
    REM           reduce using rule 199 (argument)
    REMAINDER     reduce using rule 199 (argument)
    REMAINDEREQ   reduce using rule 199 (argument)
    RETURN        reduce using rule 199 (argument)
    RIGHTSHIFT    reduce using rule 199 (argument)
    RIGHTSHIFTEQ  reduce using rule 199 (argument)
    RPAREN        reduce using rule 199 (argument)
    SFUNC         reduce using rule 199 (argument)
    SPACKAGE      reduce using rule 199 (argument)
    SSTRUCT       reduce using rule 199 (argument)
    STEP          reduce using rule 199 (argument)
    STRING        reduce using rule 199 (argument)
    TAG           reduce using rule 199 (argument)
    TSTEP         reduce using rule 199 (argument)
    TYPSTRUCT     reduce using rule 199 (argument)
    UNEQUAL       reduce using rule 199 (argument)
    VALUE         reduce using rule 199 (argument)
    VAR           reduce using rule 199 (argument)

state 187 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS DIV BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression DIV argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 197 (argument)
    ';'           reduce using rule 197 (argument)
    ADDR          reduce using rule 197 (argument)
    AFF           reduce using rule 197 (argument)
    AND           reduce using rule 197 (argument)
    ASSIGN        reduce using rule 197 (argument)
    BASICTYPE     reduce using rule 197 (argument)
    BITAND        reduce using rule 197 (argument)
    BITANDEQ      reduce using rule 197 (argument)
    BITCLEAR      reduce using rule 197 (argument)
    BITOR         reduce using rule 197 (argument)
    BITOREQ       reduce using rule 197 (argument)
    BITXOR        reduce using rule 197 (argument)
    BITXOREQ      reduce using rule 197 (argument)
    BOOLEAN       reduce using rule 197 (argument)
    BYTENUM       reduce using rule 197 (argument)
    CASSIGN       reduce using rule 197 (argument)
    COMMA         reduce using rule 197 (argument)
    DIV           reduce using rule 197 (argument)
    DIVEQ         reduce using rule 197 (argument)
    DOUBLE        reduce using rule 197 (argument)
    DPROGRAM      reduce using rule 197 (argument)
    DSTACK        reduce using rule 197 (argument)
    DSTATE        reduce using rule 197 (argument)
    EQUAL         reduce using rule 197 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 197 (argument)
    FLOAT         reduce using rule 197 (argument)
    FOR           reduce using rule 197 (argument)
    FUNC          reduce using rule 197 (argument)
    GOTO          reduce using rule 197 (argument)
    GTHAN         reduce using rule 197 (argument)
    GTHANEQ       reduce using rule 197 (argument)
    IDENT         reduce using rule 197 (argument)
    IF            reduce using rule 197 (argument)
    IMPORT        reduce using rule 197 (argument)
    INFER         reduce using rule 197 (argument)
    INT           reduce using rule 197 (argument)
    LBRACE        reduce using rule 197 (argument)
    LEFTSHIFT     reduce using rule 197 (argument)
    LEFTSHIFTEQ   reduce using rule 197 (argument)
    LONG          reduce using rule 197 (argument)
    LPAREN        reduce using rule 197 (argument)
    LTHAN         reduce using rule 197 (argument)
    LTHANEQ       reduce using rule 197 (argument)
    MINUS         reduce using rule 197 (argument)
    MINUSEQ       reduce using rule 197 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          reduce using rule 197 (argument)
    MULTEQ        reduce using rule 197 (argument)
    NEW           reduce using rule 197 (argument)
    NOT           reduce using rule 197 (argument)
    OR            reduce using rule 197 (argument)
    PACKAGE       reduce using rule 197 (argument)
    PLUS          reduce using rule 197 (argument)
    PLUSEQ        reduce using rule 197 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 197 (argument)
    REM           reduce using rule 197 (argument)
    REMAINDER     reduce using rule 197 (argument)
    REMAINDEREQ   reduce using rule 197 (argument)
    RETURN        reduce using rule 197 (argument)
    RIGHTSHIFT    reduce using rule 197 (argument)
    RIGHTSHIFTEQ  reduce using rule 197 (argument)
    RPAREN        reduce using rule 197 (argument)
    SFUNC         reduce using rule 197 (argument)
    SPACKAGE      reduce using rule 197 (argument)
    SSTRUCT       reduce using rule 197 (argument)
    STEP          reduce using rule 197 (argument)
    STRING        reduce using rule 197 (argument)
    TAG           reduce using rule 197 (argument)
    TSTEP         reduce using rule 197 (argument)
    TYPSTRUCT     reduce using rule 197 (argument)
    UNEQUAL       reduce using rule 197 (argument)
    VALUE         reduce using rule 197 (argument)
    VAR           reduce using rule 197 (argument)

state 188 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS DIV BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  195 argument: nonAssignExpression DIV nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 195 (argument)
    ';'           reduce using rule 195 (argument)
    ADDR          reduce using rule 195 (argument)
    AFF           reduce using rule 195 (argument)
    AND           reduce using rule 195 (argument)
    ASSIGN        reduce using rule 195 (argument)
    BASICTYPE     reduce using rule 195 (argument)
    BITAND        reduce using rule 195 (argument)
    BITANDEQ      reduce using rule 195 (argument)
    BITCLEAR      reduce using rule 195 (argument)
    BITOR         reduce using rule 195 (argument)
    BITOREQ       reduce using rule 195 (argument)
    BITXOR        reduce using rule 195 (argument)
    BITXOREQ      reduce using rule 195 (argument)
    BOOLEAN       reduce using rule 195 (argument)
    BYTENUM       reduce using rule 195 (argument)
    CASSIGN       reduce using rule 195 (argument)
    COMMA         reduce using rule 195 (argument)
    DIV           reduce using rule 195 (argument)
    DIVEQ         reduce using rule 195 (argument)
    DOUBLE        reduce using rule 195 (argument)
    DPROGRAM      reduce using rule 195 (argument)
    DSTACK        reduce using rule 195 (argument)
    DSTATE        reduce using rule 195 (argument)
    EQUAL         reduce using rule 195 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 195 (argument)
    FLOAT         reduce using rule 195 (argument)
    FOR           reduce using rule 195 (argument)
    FUNC          reduce using rule 195 (argument)
    GOTO          reduce using rule 195 (argument)
    GTHAN         reduce using rule 195 (argument)
    GTHANEQ       reduce using rule 195 (argument)
    IDENT         reduce using rule 195 (argument)
    IF            reduce using rule 195 (argument)
    IMPORT        reduce using rule 195 (argument)
    INFER         reduce using rule 195 (argument)
    INT           reduce using rule 195 (argument)
    LBRACE        reduce using rule 195 (argument)
    LEFTSHIFT     reduce using rule 195 (argument)
    LEFTSHIFTEQ   reduce using rule 195 (argument)
    LONG          reduce using rule 195 (argument)
    LPAREN        reduce using rule 195 (argument)
    LTHAN         reduce using rule 195 (argument)
    LTHANEQ       reduce using rule 195 (argument)
    MINUS         reduce using rule 195 (argument)
    MINUSEQ       reduce using rule 195 (argument)
    MINUSMINUS    reduce using rule 195 (argument)
    MULT          reduce using rule 195 (argument)
    MULTEQ        reduce using rule 195 (argument)
    NEW           reduce using rule 195 (argument)
    NOT           reduce using rule 195 (argument)
    OR            reduce using rule 195 (argument)
    PACKAGE       reduce using rule 195 (argument)
    PLUS          reduce using rule 195 (argument)
    PLUSEQ        reduce using rule 195 (argument)
    PLUSPLUS      reduce using rule 195 (argument)
    RBRACE        reduce using rule 195 (argument)
    REM           reduce using rule 195 (argument)
    REMAINDER     reduce using rule 195 (argument)
    REMAINDEREQ   reduce using rule 195 (argument)
    RETURN        reduce using rule 195 (argument)
    RIGHTSHIFT    reduce using rule 195 (argument)
    RIGHTSHIFTEQ  reduce using rule 195 (argument)
    RPAREN        reduce using rule 195 (argument)
    SFUNC         reduce using rule 195 (argument)
    SPACKAGE      reduce using rule 195 (argument)
    SSTRUCT       reduce using rule 195 (argument)
    STEP          reduce using rule 195 (argument)
    STRING        reduce using rule 195 (argument)
    TAG           reduce using rule 195 (argument)
    TSTEP         reduce using rule 195 (argument)
    TYPSTRUCT     reduce using rule 195 (argument)
    UNEQUAL       reduce using rule 195 (argument)
    VALUE         reduce using rule 195 (argument)
    VAR           reduce using rule 195 (argument)

state 189 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS MULT BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression MULT argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 193 (argument)
    ';'           reduce using rule 193 (argument)
    ADDR          reduce using rule 193 (argument)
    AFF           reduce using rule 193 (argument)
    AND           reduce using rule 193 (argument)
    ASSIGN        reduce using rule 193 (argument)
    BASICTYPE     reduce using rule 193 (argument)
    BITAND        reduce using rule 193 (argument)
    BITANDEQ      reduce using rule 193 (argument)
    BITCLEAR      reduce using rule 193 (argument)
    BITOR         reduce using rule 193 (argument)
    BITOREQ       reduce using rule 193 (argument)
    BITXOR        reduce using rule 193 (argument)
    BITXOREQ      reduce using rule 193 (argument)
    BOOLEAN       reduce using rule 193 (argument)
    BYTENUM       reduce using rule 193 (argument)
    CASSIGN       reduce using rule 193 (argument)
    COMMA         reduce using rule 193 (argument)
    DIV           reduce using rule 193 (argument)
    DIVEQ         reduce using rule 193 (argument)
    DOUBLE        reduce using rule 193 (argument)
    DPROGRAM      reduce using rule 193 (argument)
    DSTACK        reduce using rule 193 (argument)
    DSTATE        reduce using rule 193 (argument)
    EQUAL         reduce using rule 193 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 193 (argument)
    FLOAT         reduce using rule 193 (argument)
    FOR           reduce using rule 193 (argument)
    FUNC          reduce using rule 193 (argument)
    GOTO          reduce using rule 193 (argument)
    GTHAN         reduce using rule 193 (argument)
    GTHANEQ       reduce using rule 193 (argument)
    IDENT         reduce using rule 193 (argument)
    IF            reduce using rule 193 (argument)
    IMPORT        reduce using rule 193 (argument)
    INFER         reduce using rule 193 (argument)
    INT           reduce using rule 193 (argument)
    LBRACE        reduce using rule 193 (argument)
    LEFTSHIFT     reduce using rule 193 (argument)
    LEFTSHIFTEQ   reduce using rule 193 (argument)
    LONG          reduce using rule 193 (argument)
    LPAREN        reduce using rule 193 (argument)
    LTHAN         reduce using rule 193 (argument)
    LTHANEQ       reduce using rule 193 (argument)
    MINUS         reduce using rule 193 (argument)
    MINUSEQ       reduce using rule 193 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          reduce using rule 193 (argument)
    MULTEQ        reduce using rule 193 (argument)
    NEW           reduce using rule 193 (argument)
    NOT           reduce using rule 193 (argument)
    OR            reduce using rule 193 (argument)
    PACKAGE       reduce using rule 193 (argument)
    PLUS          reduce using rule 193 (argument)
    PLUSEQ        reduce using rule 193 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 193 (argument)
    REM           reduce using rule 193 (argument)
    REMAINDER     reduce using rule 193 (argument)
    REMAINDEREQ   reduce using rule 193 (argument)
    RETURN        reduce using rule 193 (argument)
    RIGHTSHIFT    reduce using rule 193 (argument)
    RIGHTSHIFTEQ  reduce using rule 193 (argument)
    RPAREN        reduce using rule 193 (argument)
    SFUNC         reduce using rule 193 (argument)
    SPACKAGE      reduce using rule 193 (argument)
    SSTRUCT       reduce using rule 193 (argument)
    STEP          reduce using rule 193 (argument)
    STRING        reduce using rule 193 (argument)
    TAG           reduce using rule 193 (argument)
    TSTEP         reduce using rule 193 (argument)
    TYPSTRUCT     reduce using rule 193 (argument)
    UNEQUAL       reduce using rule 193 (argument)
    VALUE         reduce using rule 193 (argument)
    VAR           reduce using rule 193 (argument)

state 190 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS MULT BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  191 argument: nonAssignExpression MULT nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 191 (argument)
    ';'           reduce using rule 191 (argument)
    ADDR          reduce using rule 191 (argument)
    AFF           reduce using rule 191 (argument)
    AND           reduce using rule 191 (argument)
    ASSIGN        reduce using rule 191 (argument)
    BASICTYPE     reduce using rule 191 (argument)
    BITAND        reduce using rule 191 (argument)
    BITANDEQ      reduce using rule 191 (argument)
    BITCLEAR      reduce using rule 191 (argument)
    BITOR         reduce using rule 191 (argument)
    BITOREQ       reduce using rule 191 (argument)
    BITXOR        reduce using rule 191 (argument)
    BITXOREQ      reduce using rule 191 (argument)
    BOOLEAN       reduce using rule 191 (argument)
    BYTENUM       reduce using rule 191 (argument)
    CASSIGN       reduce using rule 191 (argument)
    COMMA         reduce using rule 191 (argument)
    DIV           reduce using rule 191 (argument)
    DIVEQ         reduce using rule 191 (argument)
    DOUBLE        reduce using rule 191 (argument)
    DPROGRAM      reduce using rule 191 (argument)
    DSTACK        reduce using rule 191 (argument)
    DSTATE        reduce using rule 191 (argument)
    EQUAL         reduce using rule 191 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 191 (argument)
    FLOAT         reduce using rule 191 (argument)
    FOR           reduce using rule 191 (argument)
    FUNC          reduce using rule 191 (argument)
    GOTO          reduce using rule 191 (argument)
    GTHAN         reduce using rule 191 (argument)
    GTHANEQ       reduce using rule 191 (argument)
    IDENT         reduce using rule 191 (argument)
    IF            reduce using rule 191 (argument)
    IMPORT        reduce using rule 191 (argument)
    INFER         reduce using rule 191 (argument)
    INT           reduce using rule 191 (argument)
    LBRACE        reduce using rule 191 (argument)
    LEFTSHIFT     reduce using rule 191 (argument)
    LEFTSHIFTEQ   reduce using rule 191 (argument)
    LONG          reduce using rule 191 (argument)
    LPAREN        reduce using rule 191 (argument)
    LTHAN         reduce using rule 191 (argument)
    LTHANEQ       reduce using rule 191 (argument)
    MINUS         reduce using rule 191 (argument)
    MINUSEQ       reduce using rule 191 (argument)
    MINUSMINUS    reduce using rule 191 (argument)
    MULT          reduce using rule 191 (argument)
    MULTEQ        reduce using rule 191 (argument)
    NEW           reduce using rule 191 (argument)
    NOT           reduce using rule 191 (argument)
    OR            reduce using rule 191 (argument)
    PACKAGE       reduce using rule 191 (argument)
    PLUS          reduce using rule 191 (argument)
    PLUSEQ        reduce using rule 191 (argument)
    PLUSPLUS      reduce using rule 191 (argument)
    RBRACE        reduce using rule 191 (argument)
    REM           reduce using rule 191 (argument)
    REMAINDER     reduce using rule 191 (argument)
    REMAINDEREQ   reduce using rule 191 (argument)
    RETURN        reduce using rule 191 (argument)
    RIGHTSHIFT    reduce using rule 191 (argument)
    RIGHTSHIFTEQ  reduce using rule 191 (argument)
    RPAREN        reduce using rule 191 (argument)
    SFUNC         reduce using rule 191 (argument)
    SPACKAGE      reduce using rule 191 (argument)
    SSTRUCT       reduce using rule 191 (argument)
    STEP          reduce using rule 191 (argument)
    STRING        reduce using rule 191 (argument)
    TAG           reduce using rule 191 (argument)
    TSTEP         reduce using rule 191 (argument)
    TYPSTRUCT     reduce using rule 191 (argument)
    UNEQUAL       reduce using rule 191 (argument)
    VALUE         reduce using rule 191 (argument)
    VAR           reduce using rule 191 (argument)

state 191 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS MINUS BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression MINUS argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 189 (argument)
    ';'           reduce using rule 189 (argument)
    ADDR          reduce using rule 189 (argument)
    AFF           reduce using rule 189 (argument)
    AND           reduce using rule 189 (argument)
    ASSIGN        reduce using rule 189 (argument)
    BASICTYPE     reduce using rule 189 (argument)
    BITAND        reduce using rule 189 (argument)
    BITANDEQ      reduce using rule 189 (argument)
    BITCLEAR      reduce using rule 189 (argument)
    BITOR         reduce using rule 189 (argument)
    BITOREQ       reduce using rule 189 (argument)
    BITXOR        reduce using rule 189 (argument)
    BITXOREQ      reduce using rule 189 (argument)
    BOOLEAN       reduce using rule 189 (argument)
    BYTENUM       reduce using rule 189 (argument)
    CASSIGN       reduce using rule 189 (argument)
    COMMA         reduce using rule 189 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 189 (argument)
    DOUBLE        reduce using rule 189 (argument)
    DPROGRAM      reduce using rule 189 (argument)
    DSTACK        reduce using rule 189 (argument)
    DSTATE        reduce using rule 189 (argument)
    EQUAL         reduce using rule 189 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 189 (argument)
    FLOAT         reduce using rule 189 (argument)
    FOR           reduce using rule 189 (argument)
    FUNC          reduce using rule 189 (argument)
    GOTO          reduce using rule 189 (argument)
    GTHAN         reduce using rule 189 (argument)
    GTHANEQ       reduce using rule 189 (argument)
    IDENT         reduce using rule 189 (argument)
    IF            reduce using rule 189 (argument)
    IMPORT        reduce using rule 189 (argument)
    INFER         reduce using rule 189 (argument)
    INT           reduce using rule 189 (argument)
    LBRACE        reduce using rule 189 (argument)
    LEFTSHIFT     reduce using rule 189 (argument)
    LEFTSHIFTEQ   reduce using rule 189 (argument)
    LONG          reduce using rule 189 (argument)
    LPAREN        reduce using rule 189 (argument)
    LTHAN         reduce using rule 189 (argument)
    LTHANEQ       reduce using rule 189 (argument)
    MINUS         reduce using rule 189 (argument)
    MINUSEQ       reduce using rule 189 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 189 (argument)
    NEW           reduce using rule 189 (argument)
    NOT           reduce using rule 189 (argument)
    OR            reduce using rule 189 (argument)
    PACKAGE       reduce using rule 189 (argument)
    PLUS          reduce using rule 189 (argument)
    PLUSEQ        reduce using rule 189 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 189 (argument)
    REM           reduce using rule 189 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 189 (argument)
    RETURN        reduce using rule 189 (argument)
    RIGHTSHIFT    reduce using rule 189 (argument)
    RIGHTSHIFTEQ  reduce using rule 189 (argument)
    RPAREN        reduce using rule 189 (argument)
    SFUNC         reduce using rule 189 (argument)
    SPACKAGE      reduce using rule 189 (argument)
    SSTRUCT       reduce using rule 189 (argument)
    STEP          reduce using rule 189 (argument)
    STRING        reduce using rule 189 (argument)
    TAG           reduce using rule 189 (argument)
    TSTEP         reduce using rule 189 (argument)
    TYPSTRUCT     reduce using rule 189 (argument)
    UNEQUAL       reduce using rule 189 (argument)
    VALUE         reduce using rule 189 (argument)
    VAR           reduce using rule 189 (argument)

state 192 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS MINUS BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  187 argument: nonAssignExpression MINUS nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 187 (argument)
    ';'           reduce using rule 187 (argument)
    ADDR          reduce using rule 187 (argument)
    AFF           reduce using rule 187 (argument)
    AND           reduce using rule 187 (argument)
    ASSIGN        reduce using rule 187 (argument)
    BASICTYPE     reduce using rule 187 (argument)
    BITAND        reduce using rule 187 (argument)
    BITANDEQ      reduce using rule 187 (argument)
    BITCLEAR      reduce using rule 187 (argument)
    BITOR         reduce using rule 187 (argument)
    BITOREQ       reduce using rule 187 (argument)
    BITXOR        reduce using rule 187 (argument)
    BITXOREQ      reduce using rule 187 (argument)
    BOOLEAN       reduce using rule 187 (argument)
    BYTENUM       reduce using rule 187 (argument)
    CASSIGN       reduce using rule 187 (argument)
    COMMA         reduce using rule 187 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 187 (argument)
    DOUBLE        reduce using rule 187 (argument)
    DPROGRAM      reduce using rule 187 (argument)
    DSTACK        reduce using rule 187 (argument)
    DSTATE        reduce using rule 187 (argument)
    EQUAL         reduce using rule 187 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 187 (argument)
    FLOAT         reduce using rule 187 (argument)
    FOR           reduce using rule 187 (argument)
    FUNC          reduce using rule 187 (argument)
    GOTO          reduce using rule 187 (argument)
    GTHAN         reduce using rule 187 (argument)
    GTHANEQ       reduce using rule 187 (argument)
    IDENT         reduce using rule 187 (argument)
    IF            reduce using rule 187 (argument)
    IMPORT        reduce using rule 187 (argument)
    INFER         reduce using rule 187 (argument)
    INT           reduce using rule 187 (argument)
    LBRACE        reduce using rule 187 (argument)
    LEFTSHIFT     reduce using rule 187 (argument)
    LEFTSHIFTEQ   reduce using rule 187 (argument)
    LONG          reduce using rule 187 (argument)
    LPAREN        reduce using rule 187 (argument)
    LTHAN         reduce using rule 187 (argument)
    LTHANEQ       reduce using rule 187 (argument)
    MINUS         reduce using rule 187 (argument)
    MINUSEQ       reduce using rule 187 (argument)
    MINUSMINUS    reduce using rule 187 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 187 (argument)
    NEW           reduce using rule 187 (argument)
    NOT           reduce using rule 187 (argument)
    OR            reduce using rule 187 (argument)
    PACKAGE       reduce using rule 187 (argument)
    PLUS          reduce using rule 187 (argument)
    PLUSEQ        reduce using rule 187 (argument)
    PLUSPLUS      reduce using rule 187 (argument)
    RBRACE        reduce using rule 187 (argument)
    REM           reduce using rule 187 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 187 (argument)
    RETURN        reduce using rule 187 (argument)
    RIGHTSHIFT    reduce using rule 187 (argument)
    RIGHTSHIFTEQ  reduce using rule 187 (argument)
    RPAREN        reduce using rule 187 (argument)
    SFUNC         reduce using rule 187 (argument)
    SPACKAGE      reduce using rule 187 (argument)
    SSTRUCT       reduce using rule 187 (argument)
    STEP          reduce using rule 187 (argument)
    STRING        reduce using rule 187 (argument)
    TAG           reduce using rule 187 (argument)
    TSTEP         reduce using rule 187 (argument)
    TYPSTRUCT     reduce using rule 187 (argument)
    UNEQUAL       reduce using rule 187 (argument)
    VALUE         reduce using rule 187 (argument)
    VAR           reduce using rule 187 (argument)

state 193 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS PLUS BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression PLUS argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end          reduce using rule 185 (argument)
    ';'           reduce using rule 185 (argument)
    ADDR          reduce using rule 185 (argument)
    AFF           reduce using rule 185 (argument)
    AND           reduce using rule 185 (argument)
    ASSIGN        reduce using rule 185 (argument)
    BASICTYPE     reduce using rule 185 (argument)
    BITAND        reduce using rule 185 (argument)
    BITANDEQ      reduce using rule 185 (argument)
    BITCLEAR      reduce using rule 185 (argument)
    BITOR         reduce using rule 185 (argument)
    BITOREQ       reduce using rule 185 (argument)
    BITXOR        reduce using rule 185 (argument)
    BITXOREQ      reduce using rule 185 (argument)
    BOOLEAN       reduce using rule 185 (argument)
    BYTENUM       reduce using rule 185 (argument)
    CASSIGN       reduce using rule 185 (argument)
    COMMA         reduce using rule 185 (argument)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 185 (argument)
    DOUBLE        reduce using rule 185 (argument)
    DPROGRAM      reduce using rule 185 (argument)
    DSTACK        reduce using rule 185 (argument)
    DSTATE        reduce using rule 185 (argument)
    EQUAL         reduce using rule 185 (argument)
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 185 (argument)
    FLOAT         reduce using rule 185 (argument)
    FOR           reduce using rule 185 (argument)
    FUNC          reduce using rule 185 (argument)
    GOTO          reduce using rule 185 (argument)
    GTHAN         reduce using rule 185 (argument)
    GTHANEQ       reduce using rule 185 (argument)
    IDENT         reduce using rule 185 (argument)
    IF            reduce using rule 185 (argument)
    IMPORT        reduce using rule 185 (argument)
    INFER         reduce using rule 185 (argument)
    INT           reduce using rule 185 (argument)
    LBRACE        reduce using rule 185 (argument)
    LEFTSHIFT     reduce using rule 185 (argument)
    LEFTSHIFTEQ   reduce using rule 185 (argument)
    LONG          reduce using rule 185 (argument)
    LPAREN        reduce using rule 185 (argument)
    LTHAN         reduce using rule 185 (argument)
    LTHANEQ       reduce using rule 185 (argument)
    MINUS         reduce using rule 185 (argument)
    MINUSEQ       reduce using rule 185 (argument)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 185 (argument)
    NEW           reduce using rule 185 (argument)
    NOT           reduce using rule 185 (argument)
    OR            reduce using rule 185 (argument)
    PACKAGE       reduce using rule 185 (argument)
    PLUS          reduce using rule 185 (argument)
    PLUSEQ        reduce using rule 185 (argument)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 185 (argument)
    REM           reduce using rule 185 (argument)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 185 (argument)
    RETURN        reduce using rule 185 (argument)
    RIGHTSHIFT    reduce using rule 185 (argument)
    RIGHTSHIFTEQ  reduce using rule 185 (argument)
    RPAREN        reduce using rule 185 (argument)
    SFUNC         reduce using rule 185 (argument)
    SPACKAGE      reduce using rule 185 (argument)
    SSTRUCT       reduce using rule 185 (argument)
    STEP          reduce using rule 185 (argument)
    STRING        reduce using rule 185 (argument)
    TAG           reduce using rule 185 (argument)
    TSTEP         reduce using rule 185 (argument)
    TYPSTRUCT     reduce using rule 185 (argument)
    UNEQUAL       reduce using rule 185 (argument)
    VALUE         reduce using rule 185 (argument)
    VAR           reduce using rule 185 (argument)

state 194 // SFUNC IDENT LBRACE BOOLEAN MINUSMINUS PLUS BOOLEAN MINUSMINUS [$end]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  183 argument: nonAssignExpression PLUS nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    $end          reduce using rule 183 (argument)
    ';'           reduce using rule 183 (argument)
    ADDR          reduce using rule 183 (argument)
    AFF           reduce using rule 183 (argument)
    AND           reduce using rule 183 (argument)
    ASSIGN        reduce using rule 183 (argument)
    BASICTYPE     reduce using rule 183 (argument)
    BITAND        reduce using rule 183 (argument)
    BITANDEQ      reduce using rule 183 (argument)
    BITCLEAR      reduce using rule 183 (argument)
    BITOR         reduce using rule 183 (argument)
    BITOREQ       reduce using rule 183 (argument)
    BITXOR        reduce using rule 183 (argument)
    BITXOREQ      reduce using rule 183 (argument)
    BOOLEAN       reduce using rule 183 (argument)
    BYTENUM       reduce using rule 183 (argument)
    CASSIGN       reduce using rule 183 (argument)
    COMMA         reduce using rule 183 (argument)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 183 (argument)
    DOUBLE        reduce using rule 183 (argument)
    DPROGRAM      reduce using rule 183 (argument)
    DSTACK        reduce using rule 183 (argument)
    DSTATE        reduce using rule 183 (argument)
    EQUAL         reduce using rule 183 (argument)
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 183 (argument)
    FLOAT         reduce using rule 183 (argument)
    FOR           reduce using rule 183 (argument)
    FUNC          reduce using rule 183 (argument)
    GOTO          reduce using rule 183 (argument)
    GTHAN         reduce using rule 183 (argument)
    GTHANEQ       reduce using rule 183 (argument)
    IDENT         reduce using rule 183 (argument)
    IF            reduce using rule 183 (argument)
    IMPORT        reduce using rule 183 (argument)
    INFER         reduce using rule 183 (argument)
    INT           reduce using rule 183 (argument)
    LBRACE        reduce using rule 183 (argument)
    LEFTSHIFT     reduce using rule 183 (argument)
    LEFTSHIFTEQ   reduce using rule 183 (argument)
    LONG          reduce using rule 183 (argument)
    LPAREN        reduce using rule 183 (argument)
    LTHAN         reduce using rule 183 (argument)
    LTHANEQ       reduce using rule 183 (argument)
    MINUS         reduce using rule 183 (argument)
    MINUSEQ       reduce using rule 183 (argument)
    MINUSMINUS    reduce using rule 183 (argument)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 183 (argument)
    NEW           reduce using rule 183 (argument)
    NOT           reduce using rule 183 (argument)
    OR            reduce using rule 183 (argument)
    PACKAGE       reduce using rule 183 (argument)
    PLUS          reduce using rule 183 (argument)
    PLUSEQ        reduce using rule 183 (argument)
    PLUSPLUS      reduce using rule 183 (argument)
    RBRACE        reduce using rule 183 (argument)
    REM           reduce using rule 183 (argument)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 183 (argument)
    RETURN        reduce using rule 183 (argument)
    RIGHTSHIFT    reduce using rule 183 (argument)
    RIGHTSHIFTEQ  reduce using rule 183 (argument)
    RPAREN        reduce using rule 183 (argument)
    SFUNC         reduce using rule 183 (argument)
    SPACKAGE      reduce using rule 183 (argument)
    SSTRUCT       reduce using rule 183 (argument)
    STEP          reduce using rule 183 (argument)
    STRING        reduce using rule 183 (argument)
    TAG           reduce using rule 183 (argument)
    TSTEP         reduce using rule 183 (argument)
    TYPSTRUCT     reduce using rule 183 (argument)
    UNEQUAL       reduce using rule 183 (argument)
    VALUE         reduce using rule 183 (argument)
    VAR           reduce using rule 183 (argument)

state 195 // SFUNC IDENT LBRACE ADDR BOOLEAN [';']

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  282 argumentsList: ADDR argument .  [';', ADDR, AFF, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'           reduce using rule 282 (argumentsList)
    ADDR          reduce using rule 282 (argumentsList)
    AFF           reduce using rule 282 (argumentsList)
    AND           shift, and goto state 112
    ASSIGN        reduce using rule 282 (argumentsList)
    BASICTYPE     reduce using rule 282 (argumentsList)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 282 (argumentsList)
    BITCLEAR      shift, and goto state 116
    BITOR         shift, and goto state 114
    BITOREQ       reduce using rule 282 (argumentsList)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 282 (argumentsList)
    BOOLEAN       reduce using rule 282 (argumentsList)
    BYTENUM       reduce using rule 282 (argumentsList)
    CASSIGN       reduce using rule 282 (argumentsList)
    COMMA         reduce using rule 282 (argumentsList)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 282 (argumentsList)
    DOUBLE        reduce using rule 282 (argumentsList)
    DPROGRAM      reduce using rule 282 (argumentsList)
    DSTACK        reduce using rule 282 (argumentsList)
    DSTATE        reduce using rule 282 (argumentsList)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 282 (argumentsList)
    FLOAT         reduce using rule 282 (argumentsList)
    FOR           reduce using rule 282 (argumentsList)
    GOTO          reduce using rule 282 (argumentsList)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 282 (argumentsList)
    IF            reduce using rule 282 (argumentsList)
    INFER         reduce using rule 282 (argumentsList)
    INT           reduce using rule 282 (argumentsList)
    LBRACE        reduce using rule 282 (argumentsList)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 282 (argumentsList)
    LONG          reduce using rule 282 (argumentsList)
    LPAREN        reduce using rule 282 (argumentsList)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 282 (argumentsList)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 282 (argumentsList)
    NEW           reduce using rule 282 (argumentsList)
    NOT           reduce using rule 282 (argumentsList)
    OR            shift, and goto state 111
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 282 (argumentsList)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 282 (argumentsList)
    REM           reduce using rule 282 (argumentsList)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 282 (argumentsList)
    RETURN        reduce using rule 282 (argumentsList)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 282 (argumentsList)
    RPAREN        reduce using rule 282 (argumentsList)
    SFUNC         reduce using rule 282 (argumentsList)
    SPACKAGE      reduce using rule 282 (argumentsList)
    SSTRUCT       reduce using rule 282 (argumentsList)
    STEP          reduce using rule 282 (argumentsList)
    STRING        reduce using rule 282 (argumentsList)
    TAG           reduce using rule 282 (argumentsList)
    TSTEP         reduce using rule 282 (argumentsList)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 282 (argumentsList)
    VAR           reduce using rule 282 (argumentsList)

state 196 // SFUNC IDENT LBRACE LPAREN BOOLEAN MINUSMINUS [AND]

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    AND         shift, and goto state 88
    BITAND      shift, and goto state 89
    BITCLEAR    shift, and goto state 92
    BITOR       shift, and goto state 90
    BITXOR      shift, and goto state 91
    DIV         shift, and goto state 76
    EQUAL       shift, and goto state 81
    EXP         shift, and goto state 80
    GTHAN       shift, and goto state 83
    GTHANEQ     shift, and goto state 84
    LEFTSHIFT   shift, and goto state 78
    LTHAN       shift, and goto state 85
    LTHANEQ     shift, and goto state 86
    MINUS       shift, and goto state 74
    MULT        shift, and goto state 75
    OR          shift, and goto state 87
    PLUS        shift, and goto state 73
    REMAINDER   shift, and goto state 77
    RIGHTSHIFT  shift, and goto state 79
    UNEQUAL     shift, and goto state 82

state 197 // SFUNC IDENT LBRACE BASICTYPE LBRACE

  276 argument: BASICTYPE LBRACE . argumentsList RBRACE
  277 argument: BASICTYPE LBRACE . RBRACE

    ADDR       shift, and goto state 69
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    RBRACE     shift, and goto state 200
    STRING     shift, and goto state 65
    VALUE      shift, and goto state 70

    argument             goto state 50
    argumentsList        goto state 199
    nonAssignExpression  goto state 198

state 198 // SFUNC IDENT LBRACE RETURN BOOLEAN MINUSMINUS [';']

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3
  281 argumentsList: nonAssignExpression .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, COMMA, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'         reduce using rule 281 (argumentsList)
    ADDR        reduce using rule 281 (argumentsList)
    AFF         reduce using rule 281 (argumentsList)
    AND         shift, and goto state 88
    BASICTYPE   reduce using rule 281 (argumentsList)
    BITAND      shift, and goto state 89
    BITCLEAR    shift, and goto state 92
    BITOR       shift, and goto state 90
    BITXOR      shift, and goto state 91
    BOOLEAN     reduce using rule 281 (argumentsList)
    BYTENUM     reduce using rule 281 (argumentsList)
    COMMA       reduce using rule 281 (argumentsList)
    DIV         shift, and goto state 76
    DOUBLE      reduce using rule 281 (argumentsList)
    DPROGRAM    reduce using rule 281 (argumentsList)
    DSTACK      reduce using rule 281 (argumentsList)
    DSTATE      reduce using rule 281 (argumentsList)
    EQUAL       shift, and goto state 81
    EXP         shift, and goto state 80
    FLOAT       reduce using rule 281 (argumentsList)
    FOR         reduce using rule 281 (argumentsList)
    GOTO        reduce using rule 281 (argumentsList)
    GTHAN       shift, and goto state 83
    GTHANEQ     shift, and goto state 84
    IDENT       reduce using rule 281 (argumentsList)
    IF          reduce using rule 281 (argumentsList)
    INFER       reduce using rule 281 (argumentsList)
    INT         reduce using rule 281 (argumentsList)
    LBRACE      reduce using rule 281 (argumentsList)
    LEFTSHIFT   shift, and goto state 78
    LONG        reduce using rule 281 (argumentsList)
    LPAREN      reduce using rule 281 (argumentsList)
    LTHAN       shift, and goto state 85
    LTHANEQ     shift, and goto state 86
    MINUS       shift, and goto state 74
    MULT        shift, and goto state 75
    NEW         reduce using rule 281 (argumentsList)
    NOT         reduce using rule 281 (argumentsList)
    OR          shift, and goto state 87
    PLUS        shift, and goto state 73
    RBRACE      reduce using rule 281 (argumentsList)
    REM         reduce using rule 281 (argumentsList)
    REMAINDER   shift, and goto state 77
    RETURN      reduce using rule 281 (argumentsList)
    RIGHTSHIFT  shift, and goto state 79
    RPAREN      reduce using rule 281 (argumentsList)
    SFUNC       reduce using rule 281 (argumentsList)
    SPACKAGE    reduce using rule 281 (argumentsList)
    SSTRUCT     reduce using rule 281 (argumentsList)
    STEP        reduce using rule 281 (argumentsList)
    STRING      reduce using rule 281 (argumentsList)
    TAG         reduce using rule 281 (argumentsList)
    TSTEP       reduce using rule 281 (argumentsList)
    UNEQUAL     shift, and goto state 82
    VALUE       reduce using rule 281 (argumentsList)
    VAR         reduce using rule 281 (argumentsList)

state 199 // SFUNC IDENT LBRACE BASICTYPE LBRACE BOOLEAN [COMMA]

  276 argument: BASICTYPE LBRACE argumentsList . RBRACE
  285 argumentsList: argumentsList . COMMA argument
  286 argumentsList: argumentsList . COMMA nonAssignExpression
  287 argumentsList: argumentsList . COMMA ADDR argument
  288 argumentsList: argumentsList . COMMA VALUE argument
  289 argumentsList: argumentsList . COMMA VALUE nonAssignExpression

    COMMA   shift, and goto state 202
    RBRACE  shift, and goto state 201

state 200 // SFUNC IDENT LBRACE BASICTYPE LBRACE RBRACE

  277 argument: BASICTYPE LBRACE RBRACE .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 277 (argument)
    ';'           reduce using rule 277 (argument)
    ADDR          reduce using rule 277 (argument)
    AFF           reduce using rule 277 (argument)
    AND           reduce using rule 277 (argument)
    ASSIGN        reduce using rule 277 (argument)
    BASICTYPE     reduce using rule 277 (argument)
    BITAND        reduce using rule 277 (argument)
    BITANDEQ      reduce using rule 277 (argument)
    BITCLEAR      reduce using rule 277 (argument)
    BITOR         reduce using rule 277 (argument)
    BITOREQ       reduce using rule 277 (argument)
    BITXOR        reduce using rule 277 (argument)
    BITXOREQ      reduce using rule 277 (argument)
    BOOLEAN       reduce using rule 277 (argument)
    BYTENUM       reduce using rule 277 (argument)
    CASSIGN       reduce using rule 277 (argument)
    COMMA         reduce using rule 277 (argument)
    DIV           reduce using rule 277 (argument)
    DIVEQ         reduce using rule 277 (argument)
    DOUBLE        reduce using rule 277 (argument)
    DPROGRAM      reduce using rule 277 (argument)
    DSTACK        reduce using rule 277 (argument)
    DSTATE        reduce using rule 277 (argument)
    EQUAL         reduce using rule 277 (argument)
    EXP           reduce using rule 277 (argument)
    EXPEQ         reduce using rule 277 (argument)
    FLOAT         reduce using rule 277 (argument)
    FOR           reduce using rule 277 (argument)
    FUNC          reduce using rule 277 (argument)
    GOTO          reduce using rule 277 (argument)
    GTHAN         reduce using rule 277 (argument)
    GTHANEQ       reduce using rule 277 (argument)
    IDENT         reduce using rule 277 (argument)
    IF            reduce using rule 277 (argument)
    IMPORT        reduce using rule 277 (argument)
    INFER         reduce using rule 277 (argument)
    INT           reduce using rule 277 (argument)
    LBRACE        reduce using rule 277 (argument)
    LEFTSHIFT     reduce using rule 277 (argument)
    LEFTSHIFTEQ   reduce using rule 277 (argument)
    LONG          reduce using rule 277 (argument)
    LPAREN        reduce using rule 277 (argument)
    LTHAN         reduce using rule 277 (argument)
    LTHANEQ       reduce using rule 277 (argument)
    MINUS         reduce using rule 277 (argument)
    MINUSEQ       reduce using rule 277 (argument)
    MINUSMINUS    reduce using rule 277 (argument)
    MULT          reduce using rule 277 (argument)
    MULTEQ        reduce using rule 277 (argument)
    NEW           reduce using rule 277 (argument)
    NOT           reduce using rule 277 (argument)
    OR            reduce using rule 277 (argument)
    PACKAGE       reduce using rule 277 (argument)
    PLUS          reduce using rule 277 (argument)
    PLUSEQ        reduce using rule 277 (argument)
    PLUSPLUS      reduce using rule 277 (argument)
    RBRACE        reduce using rule 277 (argument)
    REM           reduce using rule 277 (argument)
    REMAINDER     reduce using rule 277 (argument)
    REMAINDEREQ   reduce using rule 277 (argument)
    RETURN        reduce using rule 277 (argument)
    RIGHTSHIFT    reduce using rule 277 (argument)
    RIGHTSHIFTEQ  reduce using rule 277 (argument)
    RPAREN        reduce using rule 277 (argument)
    SFUNC         reduce using rule 277 (argument)
    SPACKAGE      reduce using rule 277 (argument)
    SSTRUCT       reduce using rule 277 (argument)
    STEP          reduce using rule 277 (argument)
    STRING        reduce using rule 277 (argument)
    TAG           reduce using rule 277 (argument)
    TSTEP         reduce using rule 277 (argument)
    TYPSTRUCT     reduce using rule 277 (argument)
    UNEQUAL       reduce using rule 277 (argument)
    VALUE         reduce using rule 277 (argument)
    VAR           reduce using rule 277 (argument)

state 201 // SFUNC IDENT LBRACE BASICTYPE LBRACE BOOLEAN RBRACE

  276 argument: BASICTYPE LBRACE argumentsList RBRACE .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 276 (argument)
    ';'           reduce using rule 276 (argument)
    ADDR          reduce using rule 276 (argument)
    AFF           reduce using rule 276 (argument)
    AND           reduce using rule 276 (argument)
    ASSIGN        reduce using rule 276 (argument)
    BASICTYPE     reduce using rule 276 (argument)
    BITAND        reduce using rule 276 (argument)
    BITANDEQ      reduce using rule 276 (argument)
    BITCLEAR      reduce using rule 276 (argument)
    BITOR         reduce using rule 276 (argument)
    BITOREQ       reduce using rule 276 (argument)
    BITXOR        reduce using rule 276 (argument)
    BITXOREQ      reduce using rule 276 (argument)
    BOOLEAN       reduce using rule 276 (argument)
    BYTENUM       reduce using rule 276 (argument)
    CASSIGN       reduce using rule 276 (argument)
    COMMA         reduce using rule 276 (argument)
    DIV           reduce using rule 276 (argument)
    DIVEQ         reduce using rule 276 (argument)
    DOUBLE        reduce using rule 276 (argument)
    DPROGRAM      reduce using rule 276 (argument)
    DSTACK        reduce using rule 276 (argument)
    DSTATE        reduce using rule 276 (argument)
    EQUAL         reduce using rule 276 (argument)
    EXP           reduce using rule 276 (argument)
    EXPEQ         reduce using rule 276 (argument)
    FLOAT         reduce using rule 276 (argument)
    FOR           reduce using rule 276 (argument)
    FUNC          reduce using rule 276 (argument)
    GOTO          reduce using rule 276 (argument)
    GTHAN         reduce using rule 276 (argument)
    GTHANEQ       reduce using rule 276 (argument)
    IDENT         reduce using rule 276 (argument)
    IF            reduce using rule 276 (argument)
    IMPORT        reduce using rule 276 (argument)
    INFER         reduce using rule 276 (argument)
    INT           reduce using rule 276 (argument)
    LBRACE        reduce using rule 276 (argument)
    LEFTSHIFT     reduce using rule 276 (argument)
    LEFTSHIFTEQ   reduce using rule 276 (argument)
    LONG          reduce using rule 276 (argument)
    LPAREN        reduce using rule 276 (argument)
    LTHAN         reduce using rule 276 (argument)
    LTHANEQ       reduce using rule 276 (argument)
    MINUS         reduce using rule 276 (argument)
    MINUSEQ       reduce using rule 276 (argument)
    MINUSMINUS    reduce using rule 276 (argument)
    MULT          reduce using rule 276 (argument)
    MULTEQ        reduce using rule 276 (argument)
    NEW           reduce using rule 276 (argument)
    NOT           reduce using rule 276 (argument)
    OR            reduce using rule 276 (argument)
    PACKAGE       reduce using rule 276 (argument)
    PLUS          reduce using rule 276 (argument)
    PLUSEQ        reduce using rule 276 (argument)
    PLUSPLUS      reduce using rule 276 (argument)
    RBRACE        reduce using rule 276 (argument)
    REM           reduce using rule 276 (argument)
    REMAINDER     reduce using rule 276 (argument)
    REMAINDEREQ   reduce using rule 276 (argument)
    RETURN        reduce using rule 276 (argument)
    RIGHTSHIFT    reduce using rule 276 (argument)
    RIGHTSHIFTEQ  reduce using rule 276 (argument)
    RPAREN        reduce using rule 276 (argument)
    SFUNC         reduce using rule 276 (argument)
    SPACKAGE      reduce using rule 276 (argument)
    SSTRUCT       reduce using rule 276 (argument)
    STEP          reduce using rule 276 (argument)
    STRING        reduce using rule 276 (argument)
    TAG           reduce using rule 276 (argument)
    TSTEP         reduce using rule 276 (argument)
    TYPSTRUCT     reduce using rule 276 (argument)
    UNEQUAL       reduce using rule 276 (argument)
    VALUE         reduce using rule 276 (argument)
    VAR           reduce using rule 276 (argument)

state 202 // SFUNC IDENT LBRACE BOOLEAN COMMA

  285 argumentsList: argumentsList COMMA . argument
  286 argumentsList: argumentsList COMMA . nonAssignExpression
  287 argumentsList: argumentsList COMMA . ADDR argument
  288 argumentsList: argumentsList COMMA . VALUE argument
  289 argumentsList: argumentsList COMMA . VALUE nonAssignExpression

    ADDR       shift, and goto state 205
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65
    VALUE      shift, and goto state 206

    argument             goto state 203
    nonAssignExpression  goto state 204

state 203 // SFUNC IDENT LBRACE BOOLEAN COMMA BOOLEAN [';']

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  285 argumentsList: argumentsList COMMA argument .  [';', ADDR, AFF, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'           reduce using rule 285 (argumentsList)
    ADDR          reduce using rule 285 (argumentsList)
    AFF           reduce using rule 285 (argumentsList)
    AND           shift, and goto state 112
    ASSIGN        reduce using rule 285 (argumentsList)
    BASICTYPE     reduce using rule 285 (argumentsList)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 285 (argumentsList)
    BITCLEAR      shift, and goto state 116
    BITOR         shift, and goto state 114
    BITOREQ       reduce using rule 285 (argumentsList)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 285 (argumentsList)
    BOOLEAN       reduce using rule 285 (argumentsList)
    BYTENUM       reduce using rule 285 (argumentsList)
    CASSIGN       reduce using rule 285 (argumentsList)
    COMMA         reduce using rule 285 (argumentsList)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 285 (argumentsList)
    DOUBLE        reduce using rule 285 (argumentsList)
    DPROGRAM      reduce using rule 285 (argumentsList)
    DSTACK        reduce using rule 285 (argumentsList)
    DSTATE        reduce using rule 285 (argumentsList)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 285 (argumentsList)
    FLOAT         reduce using rule 285 (argumentsList)
    FOR           reduce using rule 285 (argumentsList)
    GOTO          reduce using rule 285 (argumentsList)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 285 (argumentsList)
    IF            reduce using rule 285 (argumentsList)
    INFER         reduce using rule 285 (argumentsList)
    INT           reduce using rule 285 (argumentsList)
    LBRACE        reduce using rule 285 (argumentsList)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 285 (argumentsList)
    LONG          reduce using rule 285 (argumentsList)
    LPAREN        reduce using rule 285 (argumentsList)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 285 (argumentsList)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 285 (argumentsList)
    NEW           reduce using rule 285 (argumentsList)
    NOT           reduce using rule 285 (argumentsList)
    OR            shift, and goto state 111
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 285 (argumentsList)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 285 (argumentsList)
    REM           reduce using rule 285 (argumentsList)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 285 (argumentsList)
    RETURN        reduce using rule 285 (argumentsList)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 285 (argumentsList)
    RPAREN        reduce using rule 285 (argumentsList)
    SFUNC         reduce using rule 285 (argumentsList)
    SPACKAGE      reduce using rule 285 (argumentsList)
    SSTRUCT       reduce using rule 285 (argumentsList)
    STEP          reduce using rule 285 (argumentsList)
    STRING        reduce using rule 285 (argumentsList)
    TAG           reduce using rule 285 (argumentsList)
    TSTEP         reduce using rule 285 (argumentsList)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 285 (argumentsList)
    VAR           reduce using rule 285 (argumentsList)

state 204 // SFUNC IDENT LBRACE BOOLEAN COMMA BOOLEAN MINUSMINUS [';']

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3
  286 argumentsList: argumentsList COMMA nonAssignExpression .  [';', ADDR, AFF, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'           reduce using rule 286 (argumentsList)
    ADDR          reduce using rule 286 (argumentsList)
    AFF           reduce using rule 286 (argumentsList)
    AND           shift, and goto state 88
    ASSIGN        reduce using rule 286 (argumentsList)
    BASICTYPE     reduce using rule 286 (argumentsList)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 286 (argumentsList)
    BITCLEAR      shift, and goto state 92
    BITOR         shift, and goto state 90
    BITOREQ       reduce using rule 286 (argumentsList)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 286 (argumentsList)
    BOOLEAN       reduce using rule 286 (argumentsList)
    BYTENUM       reduce using rule 286 (argumentsList)
    CASSIGN       reduce using rule 286 (argumentsList)
    COMMA         reduce using rule 286 (argumentsList)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 286 (argumentsList)
    DOUBLE        reduce using rule 286 (argumentsList)
    DPROGRAM      reduce using rule 286 (argumentsList)
    DSTACK        reduce using rule 286 (argumentsList)
    DSTATE        reduce using rule 286 (argumentsList)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 286 (argumentsList)
    FLOAT         reduce using rule 286 (argumentsList)
    FOR           reduce using rule 286 (argumentsList)
    GOTO          reduce using rule 286 (argumentsList)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 286 (argumentsList)
    IF            reduce using rule 286 (argumentsList)
    INFER         reduce using rule 286 (argumentsList)
    INT           reduce using rule 286 (argumentsList)
    LBRACE        reduce using rule 286 (argumentsList)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 286 (argumentsList)
    LONG          reduce using rule 286 (argumentsList)
    LPAREN        reduce using rule 286 (argumentsList)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 286 (argumentsList)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 286 (argumentsList)
    NEW           reduce using rule 286 (argumentsList)
    NOT           reduce using rule 286 (argumentsList)
    OR            shift, and goto state 87
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 286 (argumentsList)
    RBRACE        reduce using rule 286 (argumentsList)
    REM           reduce using rule 286 (argumentsList)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 286 (argumentsList)
    RETURN        reduce using rule 286 (argumentsList)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 286 (argumentsList)
    RPAREN        reduce using rule 286 (argumentsList)
    SFUNC         reduce using rule 286 (argumentsList)
    SPACKAGE      reduce using rule 286 (argumentsList)
    SSTRUCT       reduce using rule 286 (argumentsList)
    STEP          reduce using rule 286 (argumentsList)
    STRING        reduce using rule 286 (argumentsList)
    TAG           reduce using rule 286 (argumentsList)
    TSTEP         reduce using rule 286 (argumentsList)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 286 (argumentsList)
    VAR           reduce using rule 286 (argumentsList)

state 205 // SFUNC IDENT LBRACE BOOLEAN COMMA ADDR

  287 argumentsList: argumentsList COMMA ADDR . argument

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 209
    nonAssignExpression  goto state 196

state 206 // SFUNC IDENT LBRACE BOOLEAN COMMA VALUE

  288 argumentsList: argumentsList COMMA VALUE . argument
  289 argumentsList: argumentsList COMMA VALUE . nonAssignExpression

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 207
    nonAssignExpression  goto state 208

state 207 // SFUNC IDENT LBRACE BOOLEAN COMMA VALUE BOOLEAN [';']

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  288 argumentsList: argumentsList COMMA VALUE argument .  [';', ADDR, AFF, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'           reduce using rule 288 (argumentsList)
    ADDR          reduce using rule 288 (argumentsList)
    AFF           reduce using rule 288 (argumentsList)
    AND           shift, and goto state 112
    ASSIGN        reduce using rule 288 (argumentsList)
    BASICTYPE     reduce using rule 288 (argumentsList)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 288 (argumentsList)
    BITCLEAR      shift, and goto state 116
    BITOR         shift, and goto state 114
    BITOREQ       reduce using rule 288 (argumentsList)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 288 (argumentsList)
    BOOLEAN       reduce using rule 288 (argumentsList)
    BYTENUM       reduce using rule 288 (argumentsList)
    CASSIGN       reduce using rule 288 (argumentsList)
    COMMA         reduce using rule 288 (argumentsList)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 288 (argumentsList)
    DOUBLE        reduce using rule 288 (argumentsList)
    DPROGRAM      reduce using rule 288 (argumentsList)
    DSTACK        reduce using rule 288 (argumentsList)
    DSTATE        reduce using rule 288 (argumentsList)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 288 (argumentsList)
    FLOAT         reduce using rule 288 (argumentsList)
    FOR           reduce using rule 288 (argumentsList)
    GOTO          reduce using rule 288 (argumentsList)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 288 (argumentsList)
    IF            reduce using rule 288 (argumentsList)
    INFER         reduce using rule 288 (argumentsList)
    INT           reduce using rule 288 (argumentsList)
    LBRACE        reduce using rule 288 (argumentsList)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 288 (argumentsList)
    LONG          reduce using rule 288 (argumentsList)
    LPAREN        reduce using rule 288 (argumentsList)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 288 (argumentsList)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 288 (argumentsList)
    NEW           reduce using rule 288 (argumentsList)
    NOT           reduce using rule 288 (argumentsList)
    OR            shift, and goto state 111
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 288 (argumentsList)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 288 (argumentsList)
    REM           reduce using rule 288 (argumentsList)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 288 (argumentsList)
    RETURN        reduce using rule 288 (argumentsList)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 288 (argumentsList)
    RPAREN        reduce using rule 288 (argumentsList)
    SFUNC         reduce using rule 288 (argumentsList)
    SPACKAGE      reduce using rule 288 (argumentsList)
    SSTRUCT       reduce using rule 288 (argumentsList)
    STEP          reduce using rule 288 (argumentsList)
    STRING        reduce using rule 288 (argumentsList)
    TAG           reduce using rule 288 (argumentsList)
    TSTEP         reduce using rule 288 (argumentsList)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 288 (argumentsList)
    VAR           reduce using rule 288 (argumentsList)

state 208 // SFUNC IDENT LBRACE BOOLEAN COMMA VALUE BOOLEAN MINUSMINUS [';']

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3
  289 argumentsList: argumentsList COMMA VALUE nonAssignExpression .  [';', ADDR, AFF, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'           reduce using rule 289 (argumentsList)
    ADDR          reduce using rule 289 (argumentsList)
    AFF           reduce using rule 289 (argumentsList)
    AND           shift, and goto state 88
    ASSIGN        reduce using rule 289 (argumentsList)
    BASICTYPE     reduce using rule 289 (argumentsList)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 289 (argumentsList)
    BITCLEAR      shift, and goto state 92
    BITOR         shift, and goto state 90
    BITOREQ       reduce using rule 289 (argumentsList)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 289 (argumentsList)
    BOOLEAN       reduce using rule 289 (argumentsList)
    BYTENUM       reduce using rule 289 (argumentsList)
    CASSIGN       reduce using rule 289 (argumentsList)
    COMMA         reduce using rule 289 (argumentsList)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 289 (argumentsList)
    DOUBLE        reduce using rule 289 (argumentsList)
    DPROGRAM      reduce using rule 289 (argumentsList)
    DSTACK        reduce using rule 289 (argumentsList)
    DSTATE        reduce using rule 289 (argumentsList)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 289 (argumentsList)
    FLOAT         reduce using rule 289 (argumentsList)
    FOR           reduce using rule 289 (argumentsList)
    GOTO          reduce using rule 289 (argumentsList)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 289 (argumentsList)
    IF            reduce using rule 289 (argumentsList)
    INFER         reduce using rule 289 (argumentsList)
    INT           reduce using rule 289 (argumentsList)
    LBRACE        reduce using rule 289 (argumentsList)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 289 (argumentsList)
    LONG          reduce using rule 289 (argumentsList)
    LPAREN        reduce using rule 289 (argumentsList)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 289 (argumentsList)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 289 (argumentsList)
    NEW           reduce using rule 289 (argumentsList)
    NOT           reduce using rule 289 (argumentsList)
    OR            shift, and goto state 87
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 289 (argumentsList)
    RBRACE        reduce using rule 289 (argumentsList)
    REM           reduce using rule 289 (argumentsList)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 289 (argumentsList)
    RETURN        reduce using rule 289 (argumentsList)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 289 (argumentsList)
    RPAREN        reduce using rule 289 (argumentsList)
    SFUNC         reduce using rule 289 (argumentsList)
    SPACKAGE      reduce using rule 289 (argumentsList)
    SSTRUCT       reduce using rule 289 (argumentsList)
    STEP          reduce using rule 289 (argumentsList)
    STRING        reduce using rule 289 (argumentsList)
    TAG           reduce using rule 289 (argumentsList)
    TSTEP         reduce using rule 289 (argumentsList)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 289 (argumentsList)
    VAR           reduce using rule 289 (argumentsList)

state 209 // SFUNC IDENT LBRACE BOOLEAN COMMA ADDR BOOLEAN [';']

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  287 argumentsList: argumentsList COMMA ADDR argument .  [';', ADDR, AFF, ASSIGN, BASICTYPE, BITANDEQ, BITOREQ, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EXPEQ, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LEFTSHIFTEQ, LONG, LPAREN, MINUSEQ, MULTEQ, NEW, NOT, PLUSEQ, RBRACE, REM, REMAINDEREQ, RETURN, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'           reduce using rule 287 (argumentsList)
    ADDR          reduce using rule 287 (argumentsList)
    AFF           reduce using rule 287 (argumentsList)
    AND           shift, and goto state 112
    ASSIGN        reduce using rule 287 (argumentsList)
    BASICTYPE     reduce using rule 287 (argumentsList)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 287 (argumentsList)
    BITCLEAR      shift, and goto state 116
    BITOR         shift, and goto state 114
    BITOREQ       reduce using rule 287 (argumentsList)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 287 (argumentsList)
    BOOLEAN       reduce using rule 287 (argumentsList)
    BYTENUM       reduce using rule 287 (argumentsList)
    CASSIGN       reduce using rule 287 (argumentsList)
    COMMA         reduce using rule 287 (argumentsList)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 287 (argumentsList)
    DOUBLE        reduce using rule 287 (argumentsList)
    DPROGRAM      reduce using rule 287 (argumentsList)
    DSTACK        reduce using rule 287 (argumentsList)
    DSTATE        reduce using rule 287 (argumentsList)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 287 (argumentsList)
    FLOAT         reduce using rule 287 (argumentsList)
    FOR           reduce using rule 287 (argumentsList)
    GOTO          reduce using rule 287 (argumentsList)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    IDENT         reduce using rule 287 (argumentsList)
    IF            reduce using rule 287 (argumentsList)
    INFER         reduce using rule 287 (argumentsList)
    INT           reduce using rule 287 (argumentsList)
    LBRACE        reduce using rule 287 (argumentsList)
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 287 (argumentsList)
    LONG          reduce using rule 287 (argumentsList)
    LPAREN        reduce using rule 287 (argumentsList)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 287 (argumentsList)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 287 (argumentsList)
    NEW           reduce using rule 287 (argumentsList)
    NOT           reduce using rule 287 (argumentsList)
    OR            shift, and goto state 111
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 287 (argumentsList)
    PLUSPLUS      shift, and goto state 95
    RBRACE        reduce using rule 287 (argumentsList)
    REM           reduce using rule 287 (argumentsList)
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 287 (argumentsList)
    RETURN        reduce using rule 287 (argumentsList)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 287 (argumentsList)
    RPAREN        reduce using rule 287 (argumentsList)
    SFUNC         reduce using rule 287 (argumentsList)
    SPACKAGE      reduce using rule 287 (argumentsList)
    SSTRUCT       reduce using rule 287 (argumentsList)
    STEP          reduce using rule 287 (argumentsList)
    STRING        reduce using rule 287 (argumentsList)
    TAG           reduce using rule 287 (argumentsList)
    TSTEP         reduce using rule 287 (argumentsList)
    UNEQUAL       shift, and goto state 106
    VALUE         reduce using rule 287 (argumentsList)
    VAR           reduce using rule 287 (argumentsList)

state 210 // SFUNC IDENT LBRACE INFER LBRACE

  275 argument: INFER LBRACE . inferClauses RBRACE
  167 inferObj: .  [COMMA, RBRACE]

    COMMA   reduce using rule 167 (inferObj)
    IDENT   shift, and goto state 214
    IF      shift, and goto state 211
    RBRACE  reduce using rule 167 (inferObj)

    inferClauses  goto state 219
    inferObj      goto state 215
    inferObjs     goto state 216
    inferRule     goto state 212
    inferRules    goto state 213
    inferTarget   goto state 217
    inferTargets  goto state 218

state 211 // SFUNC IDENT LBRACE INFER LBRACE IF

  160 inferRule: IF . inferCond LBRACE inferActions RBRACE
  161 inferRule: IF . inferObj LBRACE inferActions RBRACE
  167 inferObj: .  [LBRACE]

    BOOLEAN  shift, and goto state 246
    IDENT    shift, and goto state 245
    LBRACE   reduce using rule 167 (inferObj)

    inferCond  goto state 247
    inferObj   goto state 248

state 212 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN RPAREN RBRACE [IF]

  162 inferRules: inferRule .  [IF, RBRACE]

    IF      reduce using rule 162 (inferRules)
    RBRACE  reduce using rule 162 (inferRules)

state 213 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN RPAREN RBRACE [IF]

  163 inferRules: inferRules . inferRule
  176 inferClauses: inferRules .  [RBRACE]

    IF      shift, and goto state 211
    RBRACE  reduce using rule 176 (inferClauses)

    inferRule  goto state 244

state 214 // SFUNC IDENT LBRACE INFER LBRACE IDENT

  168 inferObj: IDENT . VALUE inferWeight
  169 inferObj: IDENT . VALUE nonAssignExpression
  172 inferTarget: IDENT . LPAREN IDENT RPAREN

    LPAREN  shift, and goto state 223
    VALUE   shift, and goto state 229

state 215 // SFUNC IDENT LBRACE INFER LBRACE [COMMA]

  170 inferObjs: inferObj .  [COMMA, RBRACE]

    COMMA   reduce using rule 170 (inferObjs)
    RBRACE  reduce using rule 170 (inferObjs)

state 216 // SFUNC IDENT LBRACE INFER LBRACE [COMMA]

  171 inferObjs: inferObjs . COMMA inferObj
  175 inferClauses: inferObjs .  [RBRACE]

    COMMA   shift, and goto state 226
    RBRACE  reduce using rule 175 (inferClauses)

state 217 // SFUNC IDENT LBRACE INFER LBRACE IDENT LPAREN IDENT RPAREN [IDENT]

  173 inferTargets: inferTarget .  [IDENT, RBRACE]

    IDENT   reduce using rule 173 (inferTargets)
    RBRACE  reduce using rule 173 (inferTargets)

state 218 // SFUNC IDENT LBRACE INFER LBRACE IDENT LPAREN IDENT RPAREN [IDENT]

  174 inferTargets: inferTargets . inferTarget
  177 inferClauses: inferTargets .  [RBRACE]

    IDENT   shift, and goto state 221
    RBRACE  reduce using rule 177 (inferClauses)

    inferTarget  goto state 222

state 219 // SFUNC IDENT LBRACE INFER LBRACE [RBRACE]

  275 argument: INFER LBRACE inferClauses . RBRACE

    RBRACE  shift, and goto state 220

state 220 // SFUNC IDENT LBRACE INFER LBRACE RBRACE

  275 argument: INFER LBRACE inferClauses RBRACE .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 275 (argument)
    ';'           reduce using rule 275 (argument)
    ADDR          reduce using rule 275 (argument)
    AFF           reduce using rule 275 (argument)
    AND           reduce using rule 275 (argument)
    ASSIGN        reduce using rule 275 (argument)
    BASICTYPE     reduce using rule 275 (argument)
    BITAND        reduce using rule 275 (argument)
    BITANDEQ      reduce using rule 275 (argument)
    BITCLEAR      reduce using rule 275 (argument)
    BITOR         reduce using rule 275 (argument)
    BITOREQ       reduce using rule 275 (argument)
    BITXOR        reduce using rule 275 (argument)
    BITXOREQ      reduce using rule 275 (argument)
    BOOLEAN       reduce using rule 275 (argument)
    BYTENUM       reduce using rule 275 (argument)
    CASSIGN       reduce using rule 275 (argument)
    COMMA         reduce using rule 275 (argument)
    DIV           reduce using rule 275 (argument)
    DIVEQ         reduce using rule 275 (argument)
    DOUBLE        reduce using rule 275 (argument)
    DPROGRAM      reduce using rule 275 (argument)
    DSTACK        reduce using rule 275 (argument)
    DSTATE        reduce using rule 275 (argument)
    EQUAL         reduce using rule 275 (argument)
    EXP           reduce using rule 275 (argument)
    EXPEQ         reduce using rule 275 (argument)
    FLOAT         reduce using rule 275 (argument)
    FOR           reduce using rule 275 (argument)
    FUNC          reduce using rule 275 (argument)
    GOTO          reduce using rule 275 (argument)
    GTHAN         reduce using rule 275 (argument)
    GTHANEQ       reduce using rule 275 (argument)
    IDENT         reduce using rule 275 (argument)
    IF            reduce using rule 275 (argument)
    IMPORT        reduce using rule 275 (argument)
    INFER         reduce using rule 275 (argument)
    INT           reduce using rule 275 (argument)
    LBRACE        reduce using rule 275 (argument)
    LEFTSHIFT     reduce using rule 275 (argument)
    LEFTSHIFTEQ   reduce using rule 275 (argument)
    LONG          reduce using rule 275 (argument)
    LPAREN        reduce using rule 275 (argument)
    LTHAN         reduce using rule 275 (argument)
    LTHANEQ       reduce using rule 275 (argument)
    MINUS         reduce using rule 275 (argument)
    MINUSEQ       reduce using rule 275 (argument)
    MINUSMINUS    reduce using rule 275 (argument)
    MULT          reduce using rule 275 (argument)
    MULTEQ        reduce using rule 275 (argument)
    NEW           reduce using rule 275 (argument)
    NOT           reduce using rule 275 (argument)
    OR            reduce using rule 275 (argument)
    PACKAGE       reduce using rule 275 (argument)
    PLUS          reduce using rule 275 (argument)
    PLUSEQ        reduce using rule 275 (argument)
    PLUSPLUS      reduce using rule 275 (argument)
    RBRACE        reduce using rule 275 (argument)
    REM           reduce using rule 275 (argument)
    REMAINDER     reduce using rule 275 (argument)
    REMAINDEREQ   reduce using rule 275 (argument)
    RETURN        reduce using rule 275 (argument)
    RIGHTSHIFT    reduce using rule 275 (argument)
    RIGHTSHIFTEQ  reduce using rule 275 (argument)
    RPAREN        reduce using rule 275 (argument)
    SFUNC         reduce using rule 275 (argument)
    SPACKAGE      reduce using rule 275 (argument)
    SSTRUCT       reduce using rule 275 (argument)
    STEP          reduce using rule 275 (argument)
    STRING        reduce using rule 275 (argument)
    TAG           reduce using rule 275 (argument)
    TSTEP         reduce using rule 275 (argument)
    TYPSTRUCT     reduce using rule 275 (argument)
    UNEQUAL       reduce using rule 275 (argument)
    VALUE         reduce using rule 275 (argument)
    VAR           reduce using rule 275 (argument)

state 221 // SFUNC IDENT LBRACE INFER LBRACE IDENT LPAREN IDENT RPAREN IDENT

  172 inferTarget: IDENT . LPAREN IDENT RPAREN

    LPAREN  shift, and goto state 223

state 222 // SFUNC IDENT LBRACE INFER LBRACE IDENT LPAREN IDENT RPAREN IDENT LPAREN IDENT RPAREN [IDENT]

  174 inferTargets: inferTargets inferTarget .  [IDENT, RBRACE]

    IDENT   reduce using rule 174 (inferTargets)
    RBRACE  reduce using rule 174 (inferTargets)

state 223 // SFUNC IDENT LBRACE INFER LBRACE IDENT LPAREN

  172 inferTarget: IDENT LPAREN . IDENT RPAREN

    IDENT  shift, and goto state 224

state 224 // SFUNC IDENT LBRACE INFER LBRACE IDENT LPAREN IDENT

  172 inferTarget: IDENT LPAREN IDENT . RPAREN

    RPAREN  shift, and goto state 225

state 225 // SFUNC IDENT LBRACE INFER LBRACE IDENT LPAREN IDENT RPAREN

  172 inferTarget: IDENT LPAREN IDENT RPAREN .  [IDENT, RBRACE]

    IDENT   reduce using rule 172 (inferTarget)
    RBRACE  reduce using rule 172 (inferTarget)

state 226 // SFUNC IDENT LBRACE INFER LBRACE COMMA

  171 inferObjs: inferObjs COMMA . inferObj
  167 inferObj: .  [COMMA, RBRACE]

    COMMA   reduce using rule 167 (inferObj)
    IDENT   shift, and goto state 227
    RBRACE  reduce using rule 167 (inferObj)

    inferObj  goto state 228

state 227 // SFUNC IDENT LBRACE INFER LBRACE COMMA IDENT

  168 inferObj: IDENT . VALUE inferWeight
  169 inferObj: IDENT . VALUE nonAssignExpression

    VALUE  shift, and goto state 229

state 228 // SFUNC IDENT LBRACE INFER LBRACE COMMA [COMMA]

  171 inferObjs: inferObjs COMMA inferObj .  [COMMA, RBRACE]

    COMMA   reduce using rule 171 (inferObjs)
    RBRACE  reduce using rule 171 (inferObjs)

state 229 // SFUNC IDENT LBRACE INFER LBRACE IDENT VALUE

  168 inferObj: IDENT VALUE . inferWeight
  169 inferObj: IDENT VALUE . nonAssignExpression

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 232
    IDENT      shift, and goto state 230
    INFER      shift, and goto state 67
    INT        shift, and goto state 233
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 231
    inferWeight          goto state 234
    nonAssignExpression  goto state 235

state 230 // SFUNC IDENT LBRACE INFER LBRACE IDENT VALUE IDENT

  117 nonAssignExpression: IDENT . arguments  // assoc %right, prec 15
  166 inferWeight: IDENT .  [COMMA, LBRACE, RBRACE, RPAREN]  // assoc %right, prec 15
  272 argument: IDENT .  [AND, BITAND, BITCLEAR, BITOR, BITXOR, DIV, EQUAL, EXP, GTHAN, GTHANEQ, LEFTSHIFT, LTHAN, LTHANEQ, MINUS, MINUSMINUS, MULT, OR, PLUS, PLUSPLUS, REMAINDER, RIGHTSHIFT, UNEQUAL]  // assoc %right, prec 15
  274 argument: IDENT . LBRACK INT RBRACK

    AND         reduce using rule 272 (argument)
    BITAND      reduce using rule 272 (argument)
    BITCLEAR    reduce using rule 272 (argument)
    BITOR       reduce using rule 272 (argument)
    BITXOR      reduce using rule 272 (argument)
    COMMA       reduce using rule 166 (inferWeight)
    DIV         reduce using rule 272 (argument)
    EQUAL       reduce using rule 272 (argument)
    EXP         reduce using rule 272 (argument)
    GTHAN       reduce using rule 272 (argument)
    GTHANEQ     reduce using rule 272 (argument)
    LBRACE      reduce using rule 166 (inferWeight)
    LBRACK      shift, and goto state 237
    LEFTSHIFT   reduce using rule 272 (argument)
    LPAREN      shift, and goto state 238
    LTHAN       reduce using rule 272 (argument)
    LTHANEQ     reduce using rule 272 (argument)
    MINUS       reduce using rule 272 (argument)
    MINUSMINUS  reduce using rule 272 (argument)
    MULT        reduce using rule 272 (argument)
    OR          reduce using rule 272 (argument)
    PLUS        reduce using rule 272 (argument)
    PLUSPLUS    reduce using rule 272 (argument)
    RBRACE      reduce using rule 166 (inferWeight)
    REMAINDER   reduce using rule 272 (argument)
    RIGHTSHIFT  reduce using rule 272 (argument)
    RPAREN      reduce using rule 166 (inferWeight)
    UNEQUAL     reduce using rule 272 (argument)

    arguments  goto state 236

state 231 // SFUNC IDENT LBRACE INFER LBRACE IDENT VALUE BOOLEAN [AND]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    AND         shift, and goto state 112
    BITAND      shift, and goto state 113
    BITCLEAR    shift, and goto state 116
    BITOR       shift, and goto state 114
    BITXOR      shift, and goto state 115
    DIV         shift, and goto state 100
    EQUAL       shift, and goto state 105
    EXP         shift, and goto state 104
    GTHAN       shift, and goto state 107
    GTHANEQ     shift, and goto state 108
    LEFTSHIFT   shift, and goto state 102
    LTHAN       shift, and goto state 109
    LTHANEQ     shift, and goto state 110
    MINUS       shift, and goto state 98
    MINUSMINUS  shift, and goto state 96
    MULT        shift, and goto state 99
    OR          shift, and goto state 111
    PLUS        shift, and goto state 97
    PLUSPLUS    shift, and goto state 95
    REMAINDER   shift, and goto state 101
    RIGHTSHIFT  shift, and goto state 103
    UNEQUAL     shift, and goto state 106

state 232 // SFUNC IDENT LBRACE INFER LBRACE IDENT VALUE FLOAT

  164 inferWeight: FLOAT .  [COMMA, LBRACE, RBRACE, RPAREN]
  268 argument: FLOAT .  [AND, BITAND, BITCLEAR, BITOR, BITXOR, DIV, EQUAL, EXP, GTHAN, GTHANEQ, LEFTSHIFT, LTHAN, LTHANEQ, MINUS, MINUSMINUS, MULT, OR, PLUS, PLUSPLUS, REMAINDER, RIGHTSHIFT, UNEQUAL]

    AND         reduce using rule 268 (argument)
    BITAND      reduce using rule 268 (argument)
    BITCLEAR    reduce using rule 268 (argument)
    BITOR       reduce using rule 268 (argument)
    BITXOR      reduce using rule 268 (argument)
    COMMA       reduce using rule 164 (inferWeight)
    DIV         reduce using rule 268 (argument)
    EQUAL       reduce using rule 268 (argument)
    EXP         reduce using rule 268 (argument)
    GTHAN       reduce using rule 268 (argument)
    GTHANEQ     reduce using rule 268 (argument)
    LBRACE      reduce using rule 164 (inferWeight)
    LEFTSHIFT   reduce using rule 268 (argument)
    LTHAN       reduce using rule 268 (argument)
    LTHANEQ     reduce using rule 268 (argument)
    MINUS       reduce using rule 268 (argument)
    MINUSMINUS  reduce using rule 268 (argument)
    MULT        reduce using rule 268 (argument)
    OR          reduce using rule 268 (argument)
    PLUS        reduce using rule 268 (argument)
    PLUSPLUS    reduce using rule 268 (argument)
    RBRACE      reduce using rule 164 (inferWeight)
    REMAINDER   reduce using rule 268 (argument)
    RIGHTSHIFT  reduce using rule 268 (argument)
    RPAREN      reduce using rule 164 (inferWeight)
    UNEQUAL     reduce using rule 268 (argument)

state 233 // SFUNC IDENT LBRACE INFER LBRACE IDENT VALUE INT

  165 inferWeight: INT .  [COMMA, LBRACE, RBRACE, RPAREN]
  266 argument: INT .  [AND, BITAND, BITCLEAR, BITOR, BITXOR, DIV, EQUAL, EXP, GTHAN, GTHANEQ, LEFTSHIFT, LTHAN, LTHANEQ, MINUS, MINUSMINUS, MULT, OR, PLUS, PLUSPLUS, REMAINDER, RIGHTSHIFT, UNEQUAL]

    AND         reduce using rule 266 (argument)
    BITAND      reduce using rule 266 (argument)
    BITCLEAR    reduce using rule 266 (argument)
    BITOR       reduce using rule 266 (argument)
    BITXOR      reduce using rule 266 (argument)
    COMMA       reduce using rule 165 (inferWeight)
    DIV         reduce using rule 266 (argument)
    EQUAL       reduce using rule 266 (argument)
    EXP         reduce using rule 266 (argument)
    GTHAN       reduce using rule 266 (argument)
    GTHANEQ     reduce using rule 266 (argument)
    LBRACE      reduce using rule 165 (inferWeight)
    LEFTSHIFT   reduce using rule 266 (argument)
    LTHAN       reduce using rule 266 (argument)
    LTHANEQ     reduce using rule 266 (argument)
    MINUS       reduce using rule 266 (argument)
    MINUSMINUS  reduce using rule 266 (argument)
    MULT        reduce using rule 266 (argument)
    OR          reduce using rule 266 (argument)
    PLUS        reduce using rule 266 (argument)
    PLUSPLUS    reduce using rule 266 (argument)
    RBRACE      reduce using rule 165 (inferWeight)
    REMAINDER   reduce using rule 266 (argument)
    RIGHTSHIFT  reduce using rule 266 (argument)
    RPAREN      reduce using rule 165 (inferWeight)
    UNEQUAL     reduce using rule 266 (argument)

state 234 // SFUNC IDENT LBRACE INFER LBRACE IDENT VALUE FLOAT [COMMA]

  168 inferObj: IDENT VALUE inferWeight .  [COMMA, LBRACE, RBRACE, RPAREN]

    COMMA   reduce using rule 168 (inferObj)
    LBRACE  reduce using rule 168 (inferObj)
    RBRACE  reduce using rule 168 (inferObj)
    RPAREN  reduce using rule 168 (inferObj)

state 235 // SFUNC IDENT LBRACE INFER LBRACE IDENT VALUE BOOLEAN MINUSMINUS [AND]

  169 inferObj: IDENT VALUE nonAssignExpression .  [COMMA, LBRACE, RBRACE, RPAREN]
  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    AND         shift, and goto state 88
    BITAND      shift, and goto state 89
    BITCLEAR    shift, and goto state 92
    BITOR       shift, and goto state 90
    BITXOR      shift, and goto state 91
    COMMA       reduce using rule 169 (inferObj)
    DIV         shift, and goto state 76
    EQUAL       shift, and goto state 81
    EXP         shift, and goto state 80
    GTHAN       shift, and goto state 83
    GTHANEQ     shift, and goto state 84
    LBRACE      reduce using rule 169 (inferObj)
    LEFTSHIFT   shift, and goto state 78
    LTHAN       shift, and goto state 85
    LTHANEQ     shift, and goto state 86
    MINUS       shift, and goto state 74
    MULT        shift, and goto state 75
    OR          shift, and goto state 87
    PLUS        shift, and goto state 73
    RBRACE      reduce using rule 169 (inferObj)
    REMAINDER   shift, and goto state 77
    RIGHTSHIFT  shift, and goto state 79
    RPAREN      reduce using rule 169 (inferObj)
    UNEQUAL     shift, and goto state 82

state 236 // SFUNC IDENT LBRACE IDENT LPAREN RPAREN [$end]

  117 nonAssignExpression: IDENT arguments .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %right, prec 15

    $end          reduce using rule 117 (nonAssignExpression)
    ';'           reduce using rule 117 (nonAssignExpression)
    ADDR          reduce using rule 117 (nonAssignExpression)
    AFF           reduce using rule 117 (nonAssignExpression)
    AND           reduce using rule 117 (nonAssignExpression)
    ASSIGN        reduce using rule 117 (nonAssignExpression)
    BASICTYPE     reduce using rule 117 (nonAssignExpression)
    BITAND        reduce using rule 117 (nonAssignExpression)
    BITANDEQ      reduce using rule 117 (nonAssignExpression)
    BITCLEAR      reduce using rule 117 (nonAssignExpression)
    BITOR         reduce using rule 117 (nonAssignExpression)
    BITOREQ       reduce using rule 117 (nonAssignExpression)
    BITXOR        reduce using rule 117 (nonAssignExpression)
    BITXOREQ      reduce using rule 117 (nonAssignExpression)
    BOOLEAN       reduce using rule 117 (nonAssignExpression)
    BYTENUM       reduce using rule 117 (nonAssignExpression)
    CASSIGN       reduce using rule 117 (nonAssignExpression)
    COMMA         reduce using rule 117 (nonAssignExpression)
    DIV           reduce using rule 117 (nonAssignExpression)
    DIVEQ         reduce using rule 117 (nonAssignExpression)
    DOUBLE        reduce using rule 117 (nonAssignExpression)
    DPROGRAM      reduce using rule 117 (nonAssignExpression)
    DSTACK        reduce using rule 117 (nonAssignExpression)
    DSTATE        reduce using rule 117 (nonAssignExpression)
    EQUAL         reduce using rule 117 (nonAssignExpression)
    EXP           reduce using rule 117 (nonAssignExpression)
    EXPEQ         reduce using rule 117 (nonAssignExpression)
    FLOAT         reduce using rule 117 (nonAssignExpression)
    FOR           reduce using rule 117 (nonAssignExpression)
    FUNC          reduce using rule 117 (nonAssignExpression)
    GOTO          reduce using rule 117 (nonAssignExpression)
    GTHAN         reduce using rule 117 (nonAssignExpression)
    GTHANEQ       reduce using rule 117 (nonAssignExpression)
    IDENT         reduce using rule 117 (nonAssignExpression)
    IF            reduce using rule 117 (nonAssignExpression)
    IMPORT        reduce using rule 117 (nonAssignExpression)
    INFER         reduce using rule 117 (nonAssignExpression)
    INT           reduce using rule 117 (nonAssignExpression)
    LBRACE        reduce using rule 117 (nonAssignExpression)
    LEFTSHIFT     reduce using rule 117 (nonAssignExpression)
    LEFTSHIFTEQ   reduce using rule 117 (nonAssignExpression)
    LONG          reduce using rule 117 (nonAssignExpression)
    LPAREN        reduce using rule 117 (nonAssignExpression)
    LTHAN         reduce using rule 117 (nonAssignExpression)
    LTHANEQ       reduce using rule 117 (nonAssignExpression)
    MINUS         reduce using rule 117 (nonAssignExpression)
    MINUSEQ       reduce using rule 117 (nonAssignExpression)
    MINUSMINUS    reduce using rule 117 (nonAssignExpression)
    MULT          reduce using rule 117 (nonAssignExpression)
    MULTEQ        reduce using rule 117 (nonAssignExpression)
    NEW           reduce using rule 117 (nonAssignExpression)
    NOT           reduce using rule 117 (nonAssignExpression)
    OR            reduce using rule 117 (nonAssignExpression)
    PACKAGE       reduce using rule 117 (nonAssignExpression)
    PLUS          reduce using rule 117 (nonAssignExpression)
    PLUSEQ        reduce using rule 117 (nonAssignExpression)
    PLUSPLUS      reduce using rule 117 (nonAssignExpression)
    RBRACE        reduce using rule 117 (nonAssignExpression)
    REM           reduce using rule 117 (nonAssignExpression)
    REMAINDER     reduce using rule 117 (nonAssignExpression)
    REMAINDEREQ   reduce using rule 117 (nonAssignExpression)
    RETURN        reduce using rule 117 (nonAssignExpression)
    RIGHTSHIFT    reduce using rule 117 (nonAssignExpression)
    RIGHTSHIFTEQ  reduce using rule 117 (nonAssignExpression)
    RPAREN        reduce using rule 117 (nonAssignExpression)
    SFUNC         reduce using rule 117 (nonAssignExpression)
    SPACKAGE      reduce using rule 117 (nonAssignExpression)
    SSTRUCT       reduce using rule 117 (nonAssignExpression)
    STEP          reduce using rule 117 (nonAssignExpression)
    STRING        reduce using rule 117 (nonAssignExpression)
    TAG           reduce using rule 117 (nonAssignExpression)
    TSTEP         reduce using rule 117 (nonAssignExpression)
    TYPSTRUCT     reduce using rule 117 (nonAssignExpression)
    UNEQUAL       reduce using rule 117 (nonAssignExpression)
    VALUE         reduce using rule 117 (nonAssignExpression)
    VAR           reduce using rule 117 (nonAssignExpression)

state 237 // SFUNC IDENT LBRACE IDENT LBRACK

  274 argument: IDENT LBRACK . INT RBRACK

    INT  shift, and goto state 242

state 238 // SFUNC IDENT LBRACE IDENT LPAREN

  278 arguments: LPAREN . argumentsList RPAREN
  279 arguments: LPAREN . RPAREN

    ADDR       shift, and goto state 69
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    RPAREN     shift, and goto state 240
    STRING     shift, and goto state 65
    VALUE      shift, and goto state 70

    argument             goto state 50
    argumentsList        goto state 239
    nonAssignExpression  goto state 198

state 239 // SFUNC IDENT LBRACE IDENT LPAREN BOOLEAN [COMMA]

  278 arguments: LPAREN argumentsList . RPAREN
  285 argumentsList: argumentsList . COMMA argument
  286 argumentsList: argumentsList . COMMA nonAssignExpression
  287 argumentsList: argumentsList . COMMA ADDR argument
  288 argumentsList: argumentsList . COMMA VALUE argument
  289 argumentsList: argumentsList . COMMA VALUE nonAssignExpression

    COMMA   shift, and goto state 202
    RPAREN  shift, and goto state 241

state 240 // SFUNC IDENT LBRACE IDENT LPAREN RPAREN

  279 arguments: LPAREN RPAREN .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 279 (arguments)
    ';'           reduce using rule 279 (arguments)
    ADDR          reduce using rule 279 (arguments)
    AFF           reduce using rule 279 (arguments)
    AND           reduce using rule 279 (arguments)
    ASSIGN        reduce using rule 279 (arguments)
    BASICTYPE     reduce using rule 279 (arguments)
    BITAND        reduce using rule 279 (arguments)
    BITANDEQ      reduce using rule 279 (arguments)
    BITCLEAR      reduce using rule 279 (arguments)
    BITOR         reduce using rule 279 (arguments)
    BITOREQ       reduce using rule 279 (arguments)
    BITXOR        reduce using rule 279 (arguments)
    BITXOREQ      reduce using rule 279 (arguments)
    BOOLEAN       reduce using rule 279 (arguments)
    BYTENUM       reduce using rule 279 (arguments)
    CASSIGN       reduce using rule 279 (arguments)
    COMMA         reduce using rule 279 (arguments)
    DIV           reduce using rule 279 (arguments)
    DIVEQ         reduce using rule 279 (arguments)
    DOUBLE        reduce using rule 279 (arguments)
    DPROGRAM      reduce using rule 279 (arguments)
    DSTACK        reduce using rule 279 (arguments)
    DSTATE        reduce using rule 279 (arguments)
    EQUAL         reduce using rule 279 (arguments)
    EXP           reduce using rule 279 (arguments)
    EXPEQ         reduce using rule 279 (arguments)
    FLOAT         reduce using rule 279 (arguments)
    FOR           reduce using rule 279 (arguments)
    FUNC          reduce using rule 279 (arguments)
    GOTO          reduce using rule 279 (arguments)
    GTHAN         reduce using rule 279 (arguments)
    GTHANEQ       reduce using rule 279 (arguments)
    IDENT         reduce using rule 279 (arguments)
    IF            reduce using rule 279 (arguments)
    IMPORT        reduce using rule 279 (arguments)
    INFER         reduce using rule 279 (arguments)
    INT           reduce using rule 279 (arguments)
    LBRACE        reduce using rule 279 (arguments)
    LEFTSHIFT     reduce using rule 279 (arguments)
    LEFTSHIFTEQ   reduce using rule 279 (arguments)
    LONG          reduce using rule 279 (arguments)
    LPAREN        reduce using rule 279 (arguments)
    LTHAN         reduce using rule 279 (arguments)
    LTHANEQ       reduce using rule 279 (arguments)
    MINUS         reduce using rule 279 (arguments)
    MINUSEQ       reduce using rule 279 (arguments)
    MINUSMINUS    reduce using rule 279 (arguments)
    MULT          reduce using rule 279 (arguments)
    MULTEQ        reduce using rule 279 (arguments)
    NEW           reduce using rule 279 (arguments)
    NOT           reduce using rule 279 (arguments)
    OR            reduce using rule 279 (arguments)
    PACKAGE       reduce using rule 279 (arguments)
    PLUS          reduce using rule 279 (arguments)
    PLUSEQ        reduce using rule 279 (arguments)
    PLUSPLUS      reduce using rule 279 (arguments)
    RBRACE        reduce using rule 279 (arguments)
    REM           reduce using rule 279 (arguments)
    REMAINDER     reduce using rule 279 (arguments)
    REMAINDEREQ   reduce using rule 279 (arguments)
    RETURN        reduce using rule 279 (arguments)
    RIGHTSHIFT    reduce using rule 279 (arguments)
    RIGHTSHIFTEQ  reduce using rule 279 (arguments)
    RPAREN        reduce using rule 279 (arguments)
    SFUNC         reduce using rule 279 (arguments)
    SPACKAGE      reduce using rule 279 (arguments)
    SSTRUCT       reduce using rule 279 (arguments)
    STEP          reduce using rule 279 (arguments)
    STRING        reduce using rule 279 (arguments)
    TAG           reduce using rule 279 (arguments)
    TSTEP         reduce using rule 279 (arguments)
    TYPSTRUCT     reduce using rule 279 (arguments)
    UNEQUAL       reduce using rule 279 (arguments)
    VALUE         reduce using rule 279 (arguments)
    VAR           reduce using rule 279 (arguments)

state 241 // SFUNC IDENT LBRACE IDENT LPAREN BOOLEAN RPAREN

  278 arguments: LPAREN argumentsList RPAREN .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 278 (arguments)
    ';'           reduce using rule 278 (arguments)
    ADDR          reduce using rule 278 (arguments)
    AFF           reduce using rule 278 (arguments)
    AND           reduce using rule 278 (arguments)
    ASSIGN        reduce using rule 278 (arguments)
    BASICTYPE     reduce using rule 278 (arguments)
    BITAND        reduce using rule 278 (arguments)
    BITANDEQ      reduce using rule 278 (arguments)
    BITCLEAR      reduce using rule 278 (arguments)
    BITOR         reduce using rule 278 (arguments)
    BITOREQ       reduce using rule 278 (arguments)
    BITXOR        reduce using rule 278 (arguments)
    BITXOREQ      reduce using rule 278 (arguments)
    BOOLEAN       reduce using rule 278 (arguments)
    BYTENUM       reduce using rule 278 (arguments)
    CASSIGN       reduce using rule 278 (arguments)
    COMMA         reduce using rule 278 (arguments)
    DIV           reduce using rule 278 (arguments)
    DIVEQ         reduce using rule 278 (arguments)
    DOUBLE        reduce using rule 278 (arguments)
    DPROGRAM      reduce using rule 278 (arguments)
    DSTACK        reduce using rule 278 (arguments)
    DSTATE        reduce using rule 278 (arguments)
    EQUAL         reduce using rule 278 (arguments)
    EXP           reduce using rule 278 (arguments)
    EXPEQ         reduce using rule 278 (arguments)
    FLOAT         reduce using rule 278 (arguments)
    FOR           reduce using rule 278 (arguments)
    FUNC          reduce using rule 278 (arguments)
    GOTO          reduce using rule 278 (arguments)
    GTHAN         reduce using rule 278 (arguments)
    GTHANEQ       reduce using rule 278 (arguments)
    IDENT         reduce using rule 278 (arguments)
    IF            reduce using rule 278 (arguments)
    IMPORT        reduce using rule 278 (arguments)
    INFER         reduce using rule 278 (arguments)
    INT           reduce using rule 278 (arguments)
    LBRACE        reduce using rule 278 (arguments)
    LEFTSHIFT     reduce using rule 278 (arguments)
    LEFTSHIFTEQ   reduce using rule 278 (arguments)
    LONG          reduce using rule 278 (arguments)
    LPAREN        reduce using rule 278 (arguments)
    LTHAN         reduce using rule 278 (arguments)
    LTHANEQ       reduce using rule 278 (arguments)
    MINUS         reduce using rule 278 (arguments)
    MINUSEQ       reduce using rule 278 (arguments)
    MINUSMINUS    reduce using rule 278 (arguments)
    MULT          reduce using rule 278 (arguments)
    MULTEQ        reduce using rule 278 (arguments)
    NEW           reduce using rule 278 (arguments)
    NOT           reduce using rule 278 (arguments)
    OR            reduce using rule 278 (arguments)
    PACKAGE       reduce using rule 278 (arguments)
    PLUS          reduce using rule 278 (arguments)
    PLUSEQ        reduce using rule 278 (arguments)
    PLUSPLUS      reduce using rule 278 (arguments)
    RBRACE        reduce using rule 278 (arguments)
    REM           reduce using rule 278 (arguments)
    REMAINDER     reduce using rule 278 (arguments)
    REMAINDEREQ   reduce using rule 278 (arguments)
    RETURN        reduce using rule 278 (arguments)
    RIGHTSHIFT    reduce using rule 278 (arguments)
    RIGHTSHIFTEQ  reduce using rule 278 (arguments)
    RPAREN        reduce using rule 278 (arguments)
    SFUNC         reduce using rule 278 (arguments)
    SPACKAGE      reduce using rule 278 (arguments)
    SSTRUCT       reduce using rule 278 (arguments)
    STEP          reduce using rule 278 (arguments)
    STRING        reduce using rule 278 (arguments)
    TAG           reduce using rule 278 (arguments)
    TSTEP         reduce using rule 278 (arguments)
    TYPSTRUCT     reduce using rule 278 (arguments)
    UNEQUAL       reduce using rule 278 (arguments)
    VALUE         reduce using rule 278 (arguments)
    VAR           reduce using rule 278 (arguments)

state 242 // SFUNC IDENT LBRACE IDENT LBRACK INT

  274 argument: IDENT LBRACK INT . RBRACK

    RBRACK  shift, and goto state 243

state 243 // SFUNC IDENT LBRACE IDENT LBRACK INT RBRACK

  274 argument: IDENT LBRACK INT RBRACK .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 274 (argument)
    ';'           reduce using rule 274 (argument)
    ADDR          reduce using rule 274 (argument)
    AFF           reduce using rule 274 (argument)
    AND           reduce using rule 274 (argument)
    ASSIGN        reduce using rule 274 (argument)
    BASICTYPE     reduce using rule 274 (argument)
    BITAND        reduce using rule 274 (argument)
    BITANDEQ      reduce using rule 274 (argument)
    BITCLEAR      reduce using rule 274 (argument)
    BITOR         reduce using rule 274 (argument)
    BITOREQ       reduce using rule 274 (argument)
    BITXOR        reduce using rule 274 (argument)
    BITXOREQ      reduce using rule 274 (argument)
    BOOLEAN       reduce using rule 274 (argument)
    BYTENUM       reduce using rule 274 (argument)
    CASSIGN       reduce using rule 274 (argument)
    COMMA         reduce using rule 274 (argument)
    DIV           reduce using rule 274 (argument)
    DIVEQ         reduce using rule 274 (argument)
    DOUBLE        reduce using rule 274 (argument)
    DPROGRAM      reduce using rule 274 (argument)
    DSTACK        reduce using rule 274 (argument)
    DSTATE        reduce using rule 274 (argument)
    EQUAL         reduce using rule 274 (argument)
    EXP           reduce using rule 274 (argument)
    EXPEQ         reduce using rule 274 (argument)
    FLOAT         reduce using rule 274 (argument)
    FOR           reduce using rule 274 (argument)
    FUNC          reduce using rule 274 (argument)
    GOTO          reduce using rule 274 (argument)
    GTHAN         reduce using rule 274 (argument)
    GTHANEQ       reduce using rule 274 (argument)
    IDENT         reduce using rule 274 (argument)
    IF            reduce using rule 274 (argument)
    IMPORT        reduce using rule 274 (argument)
    INFER         reduce using rule 274 (argument)
    INT           reduce using rule 274 (argument)
    LBRACE        reduce using rule 274 (argument)
    LEFTSHIFT     reduce using rule 274 (argument)
    LEFTSHIFTEQ   reduce using rule 274 (argument)
    LONG          reduce using rule 274 (argument)
    LPAREN        reduce using rule 274 (argument)
    LTHAN         reduce using rule 274 (argument)
    LTHANEQ       reduce using rule 274 (argument)
    MINUS         reduce using rule 274 (argument)
    MINUSEQ       reduce using rule 274 (argument)
    MINUSMINUS    reduce using rule 274 (argument)
    MULT          reduce using rule 274 (argument)
    MULTEQ        reduce using rule 274 (argument)
    NEW           reduce using rule 274 (argument)
    NOT           reduce using rule 274 (argument)
    OR            reduce using rule 274 (argument)
    PACKAGE       reduce using rule 274 (argument)
    PLUS          reduce using rule 274 (argument)
    PLUSEQ        reduce using rule 274 (argument)
    PLUSPLUS      reduce using rule 274 (argument)
    RBRACE        reduce using rule 274 (argument)
    REM           reduce using rule 274 (argument)
    REMAINDER     reduce using rule 274 (argument)
    REMAINDEREQ   reduce using rule 274 (argument)
    RETURN        reduce using rule 274 (argument)
    RIGHTSHIFT    reduce using rule 274 (argument)
    RIGHTSHIFTEQ  reduce using rule 274 (argument)
    RPAREN        reduce using rule 274 (argument)
    SFUNC         reduce using rule 274 (argument)
    SPACKAGE      reduce using rule 274 (argument)
    SSTRUCT       reduce using rule 274 (argument)
    STEP          reduce using rule 274 (argument)
    STRING        reduce using rule 274 (argument)
    TAG           reduce using rule 274 (argument)
    TSTEP         reduce using rule 274 (argument)
    TYPSTRUCT     reduce using rule 274 (argument)
    UNEQUAL       reduce using rule 274 (argument)
    VALUE         reduce using rule 274 (argument)
    VAR           reduce using rule 274 (argument)

state 244 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN RPAREN RBRACE IF LBRACE IDENT LPAREN RPAREN RBRACE [IF]

  163 inferRules: inferRules inferRule .  [IF, RBRACE]

    IF      reduce using rule 163 (inferRules)
    RBRACE  reduce using rule 163 (inferRules)

state 245 // SFUNC IDENT LBRACE INFER LBRACE IF IDENT

  146 inferCond: IDENT . LPAREN inferPred RPAREN
  168 inferObj: IDENT . VALUE inferWeight
  169 inferObj: IDENT . VALUE nonAssignExpression

    LPAREN  shift, and goto state 272
    VALUE   shift, and goto state 229

state 246 // SFUNC IDENT LBRACE INFER LBRACE IF BOOLEAN

  147 inferCond: BOOLEAN .  [COMMA, LBRACE, RPAREN]

    COMMA   reduce using rule 147 (inferCond)
    LBRACE  reduce using rule 147 (inferCond)
    RPAREN  reduce using rule 147 (inferCond)

state 247 // SFUNC IDENT LBRACE INFER LBRACE IF BOOLEAN [LBRACE]

  160 inferRule: IF inferCond . LBRACE inferActions RBRACE

    LBRACE  shift, and goto state 269

state 248 // SFUNC IDENT LBRACE INFER LBRACE IF [LBRACE]

  161 inferRule: IF inferObj . LBRACE inferActions RBRACE

    LBRACE  shift, and goto state 249

state 249 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE

  161 inferRule: IF inferObj LBRACE . inferActions RBRACE

    IDENT  shift, and goto state 250

    inferAction   goto state 251
    inferActions  goto state 252

state 250 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT

  157 inferAction: IDENT . LPAREN inferActionArg RPAREN

    LPAREN  shift, and goto state 255

state 251 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN RPAREN [IDENT]

  158 inferActions: inferAction .  [IDENT, RBRACE]

    IDENT   reduce using rule 158 (inferActions)
    RBRACE  reduce using rule 158 (inferActions)

state 252 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN RPAREN [IDENT]

  159 inferActions: inferActions . inferAction
  161 inferRule: IF inferObj LBRACE inferActions . RBRACE

    IDENT   shift, and goto state 250
    RBRACE  shift, and goto state 254

    inferAction  goto state 253

state 253 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN RPAREN IDENT LPAREN RPAREN [IDENT]

  159 inferActions: inferActions inferAction .  [IDENT, RBRACE]

    IDENT   reduce using rule 159 (inferActions)
    RBRACE  reduce using rule 159 (inferActions)

state 254 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN RPAREN RBRACE

  161 inferRule: IF inferObj LBRACE inferActions RBRACE .  [IF, RBRACE]

    IF      reduce using rule 161 (inferRule)
    RBRACE  reduce using rule 161 (inferRule)

state 255 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN

  157 inferAction: IDENT LPAREN . inferActionArg RPAREN
  167 inferObj: .  [RPAREN]

    AFFVAR  shift, and goto state 258
    IDENT   shift, and goto state 257
    RPAREN  reduce using rule 167 (inferObj)

    inferActionArg  goto state 259
    inferObj        goto state 256

state 256 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN [RPAREN]

  152 inferActionArg: inferObj .  [RPAREN]

    RPAREN  reduce using rule 152 (inferActionArg)

state 257 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN IDENT

  153 inferActionArg: IDENT .  [RPAREN]  // assoc %right, prec 15
  168 inferObj: IDENT . VALUE inferWeight
  169 inferObj: IDENT . VALUE nonAssignExpression

    RPAREN  reduce using rule 153 (inferActionArg)
    VALUE   shift, and goto state 229

state 258 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN AFFVAR

  154 inferActionArg: AFFVAR . relationalOp argument
  155 inferActionArg: AFFVAR . relationalOp nonAssignExpression
  156 inferActionArg: AFFVAR . relationalOp AFFVAR

    EQUAL    shift, and goto state 261
    GTHAN    shift, and goto state 262
    LTHAN    shift, and goto state 263
    UNEQUAL  shift, and goto state 264

    relationalOp  goto state 265

state 259 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN [RPAREN]

  157 inferAction: IDENT LPAREN inferActionArg . RPAREN

    RPAREN  shift, and goto state 260

state 260 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN RPAREN

  157 inferAction: IDENT LPAREN inferActionArg RPAREN .  [IDENT, RBRACE]

    IDENT   reduce using rule 157 (inferAction)
    RBRACE  reduce using rule 157 (inferAction)

state 261 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN AFFVAR EQUAL

  148 relationalOp: EQUAL .  [AFFVAR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING]  // assoc %left, prec 7

    AFFVAR     reduce using rule 148 (relationalOp)
    BASICTYPE  reduce using rule 148 (relationalOp)
    BOOLEAN    reduce using rule 148 (relationalOp)
    BYTENUM    reduce using rule 148 (relationalOp)
    DOUBLE     reduce using rule 148 (relationalOp)
    FLOAT      reduce using rule 148 (relationalOp)
    IDENT      reduce using rule 148 (relationalOp)
    INFER      reduce using rule 148 (relationalOp)
    INT        reduce using rule 148 (relationalOp)
    LONG       reduce using rule 148 (relationalOp)
    LPAREN     reduce using rule 148 (relationalOp)
    NEW        reduce using rule 148 (relationalOp)
    NOT        reduce using rule 148 (relationalOp)
    STRING     reduce using rule 148 (relationalOp)

state 262 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN AFFVAR GTHAN

  149 relationalOp: GTHAN .  [AFFVAR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING]  // assoc %left, prec 8

    AFFVAR     reduce using rule 149 (relationalOp)
    BASICTYPE  reduce using rule 149 (relationalOp)
    BOOLEAN    reduce using rule 149 (relationalOp)
    BYTENUM    reduce using rule 149 (relationalOp)
    DOUBLE     reduce using rule 149 (relationalOp)
    FLOAT      reduce using rule 149 (relationalOp)
    IDENT      reduce using rule 149 (relationalOp)
    INFER      reduce using rule 149 (relationalOp)
    INT        reduce using rule 149 (relationalOp)
    LONG       reduce using rule 149 (relationalOp)
    LPAREN     reduce using rule 149 (relationalOp)
    NEW        reduce using rule 149 (relationalOp)
    NOT        reduce using rule 149 (relationalOp)
    STRING     reduce using rule 149 (relationalOp)

state 263 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN AFFVAR LTHAN

  150 relationalOp: LTHAN .  [AFFVAR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING]  // assoc %left, prec 8

    AFFVAR     reduce using rule 150 (relationalOp)
    BASICTYPE  reduce using rule 150 (relationalOp)
    BOOLEAN    reduce using rule 150 (relationalOp)
    BYTENUM    reduce using rule 150 (relationalOp)
    DOUBLE     reduce using rule 150 (relationalOp)
    FLOAT      reduce using rule 150 (relationalOp)
    IDENT      reduce using rule 150 (relationalOp)
    INFER      reduce using rule 150 (relationalOp)
    INT        reduce using rule 150 (relationalOp)
    LONG       reduce using rule 150 (relationalOp)
    LPAREN     reduce using rule 150 (relationalOp)
    NEW        reduce using rule 150 (relationalOp)
    NOT        reduce using rule 150 (relationalOp)
    STRING     reduce using rule 150 (relationalOp)

state 264 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN AFFVAR UNEQUAL

  151 relationalOp: UNEQUAL .  [AFFVAR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING]  // assoc %left, prec 7

    AFFVAR     reduce using rule 151 (relationalOp)
    BASICTYPE  reduce using rule 151 (relationalOp)
    BOOLEAN    reduce using rule 151 (relationalOp)
    BYTENUM    reduce using rule 151 (relationalOp)
    DOUBLE     reduce using rule 151 (relationalOp)
    FLOAT      reduce using rule 151 (relationalOp)
    IDENT      reduce using rule 151 (relationalOp)
    INFER      reduce using rule 151 (relationalOp)
    INT        reduce using rule 151 (relationalOp)
    LONG       reduce using rule 151 (relationalOp)
    LPAREN     reduce using rule 151 (relationalOp)
    NEW        reduce using rule 151 (relationalOp)
    NOT        reduce using rule 151 (relationalOp)
    STRING     reduce using rule 151 (relationalOp)

state 265 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN AFFVAR EQUAL [AFFVAR]

  154 inferActionArg: AFFVAR relationalOp . argument
  155 inferActionArg: AFFVAR relationalOp . nonAssignExpression
  156 inferActionArg: AFFVAR relationalOp . AFFVAR

    AFFVAR     shift, and goto state 268
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 266
    nonAssignExpression  goto state 267

state 266 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN AFFVAR EQUAL BOOLEAN [AND]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  154 inferActionArg: AFFVAR relationalOp argument .  [RPAREN]
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    AND         shift, and goto state 112
    BITAND      shift, and goto state 113
    BITCLEAR    shift, and goto state 116
    BITOR       shift, and goto state 114
    BITXOR      shift, and goto state 115
    DIV         shift, and goto state 100
    EQUAL       shift, and goto state 105
    EXP         shift, and goto state 104
    GTHAN       shift, and goto state 107
    GTHANEQ     shift, and goto state 108
    LEFTSHIFT   shift, and goto state 102
    LTHAN       shift, and goto state 109
    LTHANEQ     shift, and goto state 110
    MINUS       shift, and goto state 98
    MINUSMINUS  shift, and goto state 96
    MULT        shift, and goto state 99
    OR          shift, and goto state 111
    PLUS        shift, and goto state 97
    PLUSPLUS    shift, and goto state 95
    REMAINDER   shift, and goto state 101
    RIGHTSHIFT  shift, and goto state 103
    RPAREN      reduce using rule 154 (inferActionArg)
    UNEQUAL     shift, and goto state 106

state 267 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN AFFVAR EQUAL BOOLEAN MINUSMINUS [AND]

  155 inferActionArg: AFFVAR relationalOp nonAssignExpression .  [RPAREN]
  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    AND         shift, and goto state 88
    BITAND      shift, and goto state 89
    BITCLEAR    shift, and goto state 92
    BITOR       shift, and goto state 90
    BITXOR      shift, and goto state 91
    DIV         shift, and goto state 76
    EQUAL       shift, and goto state 81
    EXP         shift, and goto state 80
    GTHAN       shift, and goto state 83
    GTHANEQ     shift, and goto state 84
    LEFTSHIFT   shift, and goto state 78
    LTHAN       shift, and goto state 85
    LTHANEQ     shift, and goto state 86
    MINUS       shift, and goto state 74
    MULT        shift, and goto state 75
    OR          shift, and goto state 87
    PLUS        shift, and goto state 73
    REMAINDER   shift, and goto state 77
    RIGHTSHIFT  shift, and goto state 79
    RPAREN      reduce using rule 155 (inferActionArg)
    UNEQUAL     shift, and goto state 82

state 268 // SFUNC IDENT LBRACE INFER LBRACE IF LBRACE IDENT LPAREN AFFVAR EQUAL AFFVAR

  156 inferActionArg: AFFVAR relationalOp AFFVAR .  [RPAREN]

    RPAREN  reduce using rule 156 (inferActionArg)

state 269 // SFUNC IDENT LBRACE INFER LBRACE IF BOOLEAN LBRACE

  160 inferRule: IF inferCond LBRACE . inferActions RBRACE

    IDENT  shift, and goto state 250

    inferAction   goto state 251
    inferActions  goto state 270

state 270 // SFUNC IDENT LBRACE INFER LBRACE IF BOOLEAN LBRACE IDENT LPAREN RPAREN [IDENT]

  159 inferActions: inferActions . inferAction
  160 inferRule: IF inferCond LBRACE inferActions . RBRACE

    IDENT   shift, and goto state 250
    RBRACE  shift, and goto state 271

    inferAction  goto state 253

state 271 // SFUNC IDENT LBRACE INFER LBRACE IF BOOLEAN LBRACE IDENT LPAREN RPAREN RBRACE

  160 inferRule: IF inferCond LBRACE inferActions RBRACE .  [IF, RBRACE]

    IF      reduce using rule 160 (inferRule)
    RBRACE  reduce using rule 160 (inferRule)

state 272 // SFUNC IDENT LBRACE INFER LBRACE IF IDENT LPAREN

  146 inferCond: IDENT LPAREN . inferPred RPAREN
  167 inferObj: .  [COMMA, RPAREN]

    BOOLEAN  shift, and goto state 246
    COMMA    reduce using rule 167 (inferObj)
    IDENT    shift, and goto state 245
    RPAREN   reduce using rule 167 (inferObj)

    inferCond  goto state 274
    inferObj   goto state 273
    inferPred  goto state 275

state 273 // SFUNC IDENT LBRACE INFER LBRACE IF IDENT LPAREN [COMMA]

  142 inferPred: inferObj .  [COMMA, RPAREN]

    COMMA   reduce using rule 142 (inferPred)
    RPAREN  reduce using rule 142 (inferPred)

state 274 // SFUNC IDENT LBRACE INFER LBRACE IF IDENT LPAREN BOOLEAN [COMMA]

  143 inferPred: inferCond .  [COMMA, RPAREN]

    COMMA   reduce using rule 143 (inferPred)
    RPAREN  reduce using rule 143 (inferPred)

state 275 // SFUNC IDENT LBRACE INFER LBRACE IF IDENT LPAREN [COMMA]

  144 inferPred: inferPred . COMMA inferObj
  145 inferPred: inferPred . COMMA inferCond
  146 inferCond: IDENT LPAREN inferPred . RPAREN

    COMMA   shift, and goto state 276
    RPAREN  shift, and goto state 277

state 276 // SFUNC IDENT LBRACE INFER LBRACE IF IDENT LPAREN COMMA

  144 inferPred: inferPred COMMA . inferObj
  145 inferPred: inferPred COMMA . inferCond
  167 inferObj: .  [COMMA, RPAREN]

    BOOLEAN  shift, and goto state 246
    COMMA    reduce using rule 167 (inferObj)
    IDENT    shift, and goto state 245
    RPAREN   reduce using rule 167 (inferObj)

    inferCond  goto state 279
    inferObj   goto state 278

state 277 // SFUNC IDENT LBRACE INFER LBRACE IF IDENT LPAREN RPAREN

  146 inferCond: IDENT LPAREN inferPred RPAREN .  [COMMA, LBRACE, RPAREN]

    COMMA   reduce using rule 146 (inferCond)
    LBRACE  reduce using rule 146 (inferCond)
    RPAREN  reduce using rule 146 (inferCond)

state 278 // SFUNC IDENT LBRACE INFER LBRACE IF IDENT LPAREN COMMA [COMMA]

  144 inferPred: inferPred COMMA inferObj .  [COMMA, RPAREN]

    COMMA   reduce using rule 144 (inferPred)
    RPAREN  reduce using rule 144 (inferPred)

state 279 // SFUNC IDENT LBRACE INFER LBRACE IF IDENT LPAREN COMMA BOOLEAN [COMMA]

  145 inferPred: inferPred COMMA inferCond .  [COMMA, RPAREN]

    COMMA   reduce using rule 145 (inferPred)
    RPAREN  reduce using rule 145 (inferPred)

state 280 // SFUNC IDENT LBRACE NEW IDENT

  273 argument: NEW IDENT . LBRACE structLitDefs RBRACE

    LBRACE  shift, and goto state 281

state 281 // SFUNC IDENT LBRACE NEW IDENT LBRACE

  273 argument: NEW IDENT LBRACE . structLitDefs RBRACE

    TAG  shift, and goto state 282

    structLitDef   goto state 283
    structLitDefs  goto state 284

state 282 // SFUNC IDENT LBRACE NEW IDENT LBRACE TAG

  178 structLitDef: TAG . argument
  179 structLitDef: TAG . nonAssignExpression

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 288
    nonAssignExpression  goto state 289

state 283 // SFUNC IDENT LBRACE NEW IDENT LBRACE TAG BOOLEAN [COMMA]

  180 structLitDefs: structLitDef .  [COMMA, RBRACE]

    COMMA   reduce using rule 180 (structLitDefs)
    RBRACE  reduce using rule 180 (structLitDefs)

state 284 // SFUNC IDENT LBRACE NEW IDENT LBRACE TAG BOOLEAN [COMMA]

  181 structLitDefs: structLitDefs . COMMA structLitDef
  273 argument: NEW IDENT LBRACE structLitDefs . RBRACE

    COMMA   shift, and goto state 285
    RBRACE  shift, and goto state 286

state 285 // SFUNC IDENT LBRACE NEW IDENT LBRACE TAG BOOLEAN COMMA

  181 structLitDefs: structLitDefs COMMA . structLitDef

    TAG  shift, and goto state 282

    structLitDef  goto state 287

state 286 // SFUNC IDENT LBRACE NEW IDENT LBRACE TAG BOOLEAN RBRACE

  273 argument: NEW IDENT LBRACE structLitDefs RBRACE .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 273 (argument)
    ';'           reduce using rule 273 (argument)
    ADDR          reduce using rule 273 (argument)
    AFF           reduce using rule 273 (argument)
    AND           reduce using rule 273 (argument)
    ASSIGN        reduce using rule 273 (argument)
    BASICTYPE     reduce using rule 273 (argument)
    BITAND        reduce using rule 273 (argument)
    BITANDEQ      reduce using rule 273 (argument)
    BITCLEAR      reduce using rule 273 (argument)
    BITOR         reduce using rule 273 (argument)
    BITOREQ       reduce using rule 273 (argument)
    BITXOR        reduce using rule 273 (argument)
    BITXOREQ      reduce using rule 273 (argument)
    BOOLEAN       reduce using rule 273 (argument)
    BYTENUM       reduce using rule 273 (argument)
    CASSIGN       reduce using rule 273 (argument)
    COMMA         reduce using rule 273 (argument)
    DIV           reduce using rule 273 (argument)
    DIVEQ         reduce using rule 273 (argument)
    DOUBLE        reduce using rule 273 (argument)
    DPROGRAM      reduce using rule 273 (argument)
    DSTACK        reduce using rule 273 (argument)
    DSTATE        reduce using rule 273 (argument)
    EQUAL         reduce using rule 273 (argument)
    EXP           reduce using rule 273 (argument)
    EXPEQ         reduce using rule 273 (argument)
    FLOAT         reduce using rule 273 (argument)
    FOR           reduce using rule 273 (argument)
    FUNC          reduce using rule 273 (argument)
    GOTO          reduce using rule 273 (argument)
    GTHAN         reduce using rule 273 (argument)
    GTHANEQ       reduce using rule 273 (argument)
    IDENT         reduce using rule 273 (argument)
    IF            reduce using rule 273 (argument)
    IMPORT        reduce using rule 273 (argument)
    INFER         reduce using rule 273 (argument)
    INT           reduce using rule 273 (argument)
    LBRACE        reduce using rule 273 (argument)
    LEFTSHIFT     reduce using rule 273 (argument)
    LEFTSHIFTEQ   reduce using rule 273 (argument)
    LONG          reduce using rule 273 (argument)
    LPAREN        reduce using rule 273 (argument)
    LTHAN         reduce using rule 273 (argument)
    LTHANEQ       reduce using rule 273 (argument)
    MINUS         reduce using rule 273 (argument)
    MINUSEQ       reduce using rule 273 (argument)
    MINUSMINUS    reduce using rule 273 (argument)
    MULT          reduce using rule 273 (argument)
    MULTEQ        reduce using rule 273 (argument)
    NEW           reduce using rule 273 (argument)
    NOT           reduce using rule 273 (argument)
    OR            reduce using rule 273 (argument)
    PACKAGE       reduce using rule 273 (argument)
    PLUS          reduce using rule 273 (argument)
    PLUSEQ        reduce using rule 273 (argument)
    PLUSPLUS      reduce using rule 273 (argument)
    RBRACE        reduce using rule 273 (argument)
    REM           reduce using rule 273 (argument)
    REMAINDER     reduce using rule 273 (argument)
    REMAINDEREQ   reduce using rule 273 (argument)
    RETURN        reduce using rule 273 (argument)
    RIGHTSHIFT    reduce using rule 273 (argument)
    RIGHTSHIFTEQ  reduce using rule 273 (argument)
    RPAREN        reduce using rule 273 (argument)
    SFUNC         reduce using rule 273 (argument)
    SPACKAGE      reduce using rule 273 (argument)
    SSTRUCT       reduce using rule 273 (argument)
    STEP          reduce using rule 273 (argument)
    STRING        reduce using rule 273 (argument)
    TAG           reduce using rule 273 (argument)
    TSTEP         reduce using rule 273 (argument)
    TYPSTRUCT     reduce using rule 273 (argument)
    UNEQUAL       reduce using rule 273 (argument)
    VALUE         reduce using rule 273 (argument)
    VAR           reduce using rule 273 (argument)

state 287 // SFUNC IDENT LBRACE NEW IDENT LBRACE TAG BOOLEAN COMMA TAG BOOLEAN [COMMA]

  181 structLitDefs: structLitDefs COMMA structLitDef .  [COMMA, RBRACE]

    COMMA   reduce using rule 181 (structLitDefs)
    RBRACE  reduce using rule 181 (structLitDefs)

state 288 // SFUNC IDENT LBRACE NEW IDENT LBRACE TAG BOOLEAN [AND]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  178 structLitDef: TAG argument .  [COMMA, RBRACE]
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    AND         shift, and goto state 112
    BITAND      shift, and goto state 113
    BITCLEAR    shift, and goto state 116
    BITOR       shift, and goto state 114
    BITXOR      shift, and goto state 115
    COMMA       reduce using rule 178 (structLitDef)
    DIV         shift, and goto state 100
    EQUAL       shift, and goto state 105
    EXP         shift, and goto state 104
    GTHAN       shift, and goto state 107
    GTHANEQ     shift, and goto state 108
    LEFTSHIFT   shift, and goto state 102
    LTHAN       shift, and goto state 109
    LTHANEQ     shift, and goto state 110
    MINUS       shift, and goto state 98
    MINUSMINUS  shift, and goto state 96
    MULT        shift, and goto state 99
    OR          shift, and goto state 111
    PLUS        shift, and goto state 97
    PLUSPLUS    shift, and goto state 95
    RBRACE      reduce using rule 178 (structLitDef)
    REMAINDER   shift, and goto state 101
    RIGHTSHIFT  shift, and goto state 103
    UNEQUAL     shift, and goto state 106

state 289 // SFUNC IDENT LBRACE NEW IDENT LBRACE TAG BOOLEAN MINUSMINUS [AND]

  179 structLitDef: TAG nonAssignExpression .  [COMMA, RBRACE]
  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    AND         shift, and goto state 88
    BITAND      shift, and goto state 89
    BITCLEAR    shift, and goto state 92
    BITOR       shift, and goto state 90
    BITXOR      shift, and goto state 91
    COMMA       reduce using rule 179 (structLitDef)
    DIV         shift, and goto state 76
    EQUAL       shift, and goto state 81
    EXP         shift, and goto state 80
    GTHAN       shift, and goto state 83
    GTHANEQ     shift, and goto state 84
    LEFTSHIFT   shift, and goto state 78
    LTHAN       shift, and goto state 85
    LTHANEQ     shift, and goto state 86
    MINUS       shift, and goto state 74
    MULT        shift, and goto state 75
    OR          shift, and goto state 87
    PLUS        shift, and goto state 73
    RBRACE      reduce using rule 179 (structLitDef)
    REMAINDER   shift, and goto state 77
    RIGHTSHIFT  shift, and goto state 79
    UNEQUAL     shift, and goto state 82

state 290 // SFUNC IDENT LBRACE LPAREN BOOLEAN [AND]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  264 argument: LPAREN argument . RPAREN

    AND         shift, and goto state 112
    BITAND      shift, and goto state 113
    BITCLEAR    shift, and goto state 116
    BITOR       shift, and goto state 114
    BITXOR      shift, and goto state 115
    DIV         shift, and goto state 100
    EQUAL       shift, and goto state 105
    EXP         shift, and goto state 104
    GTHAN       shift, and goto state 107
    GTHANEQ     shift, and goto state 108
    LEFTSHIFT   shift, and goto state 102
    LTHAN       shift, and goto state 109
    LTHANEQ     shift, and goto state 110
    MINUS       shift, and goto state 98
    MINUSMINUS  shift, and goto state 96
    MULT        shift, and goto state 99
    OR          shift, and goto state 111
    PLUS        shift, and goto state 97
    PLUSPLUS    shift, and goto state 95
    REMAINDER   shift, and goto state 101
    RIGHTSHIFT  shift, and goto state 103
    RPAREN      shift, and goto state 291
    UNEQUAL     shift, and goto state 106

state 291 // SFUNC IDENT LBRACE LPAREN BOOLEAN RPAREN

  264 argument: LPAREN argument RPAREN .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]

    $end          reduce using rule 264 (argument)
    ';'           reduce using rule 264 (argument)
    ADDR          reduce using rule 264 (argument)
    AFF           reduce using rule 264 (argument)
    AND           reduce using rule 264 (argument)
    ASSIGN        reduce using rule 264 (argument)
    BASICTYPE     reduce using rule 264 (argument)
    BITAND        reduce using rule 264 (argument)
    BITANDEQ      reduce using rule 264 (argument)
    BITCLEAR      reduce using rule 264 (argument)
    BITOR         reduce using rule 264 (argument)
    BITOREQ       reduce using rule 264 (argument)
    BITXOR        reduce using rule 264 (argument)
    BITXOREQ      reduce using rule 264 (argument)
    BOOLEAN       reduce using rule 264 (argument)
    BYTENUM       reduce using rule 264 (argument)
    CASSIGN       reduce using rule 264 (argument)
    COMMA         reduce using rule 264 (argument)
    DIV           reduce using rule 264 (argument)
    DIVEQ         reduce using rule 264 (argument)
    DOUBLE        reduce using rule 264 (argument)
    DPROGRAM      reduce using rule 264 (argument)
    DSTACK        reduce using rule 264 (argument)
    DSTATE        reduce using rule 264 (argument)
    EQUAL         reduce using rule 264 (argument)
    EXP           reduce using rule 264 (argument)
    EXPEQ         reduce using rule 264 (argument)
    FLOAT         reduce using rule 264 (argument)
    FOR           reduce using rule 264 (argument)
    FUNC          reduce using rule 264 (argument)
    GOTO          reduce using rule 264 (argument)
    GTHAN         reduce using rule 264 (argument)
    GTHANEQ       reduce using rule 264 (argument)
    IDENT         reduce using rule 264 (argument)
    IF            reduce using rule 264 (argument)
    IMPORT        reduce using rule 264 (argument)
    INFER         reduce using rule 264 (argument)
    INT           reduce using rule 264 (argument)
    LBRACE        reduce using rule 264 (argument)
    LEFTSHIFT     reduce using rule 264 (argument)
    LEFTSHIFTEQ   reduce using rule 264 (argument)
    LONG          reduce using rule 264 (argument)
    LPAREN        reduce using rule 264 (argument)
    LTHAN         reduce using rule 264 (argument)
    LTHANEQ       reduce using rule 264 (argument)
    MINUS         reduce using rule 264 (argument)
    MINUSEQ       reduce using rule 264 (argument)
    MINUSMINUS    reduce using rule 264 (argument)
    MULT          reduce using rule 264 (argument)
    MULTEQ        reduce using rule 264 (argument)
    NEW           reduce using rule 264 (argument)
    NOT           reduce using rule 264 (argument)
    OR            reduce using rule 264 (argument)
    PACKAGE       reduce using rule 264 (argument)
    PLUS          reduce using rule 264 (argument)
    PLUSEQ        reduce using rule 264 (argument)
    PLUSPLUS      reduce using rule 264 (argument)
    RBRACE        reduce using rule 264 (argument)
    REM           reduce using rule 264 (argument)
    REMAINDER     reduce using rule 264 (argument)
    REMAINDEREQ   reduce using rule 264 (argument)
    RETURN        reduce using rule 264 (argument)
    RIGHTSHIFT    reduce using rule 264 (argument)
    RIGHTSHIFTEQ  reduce using rule 264 (argument)
    RPAREN        reduce using rule 264 (argument)
    SFUNC         reduce using rule 264 (argument)
    SPACKAGE      reduce using rule 264 (argument)
    SSTRUCT       reduce using rule 264 (argument)
    STEP          reduce using rule 264 (argument)
    STRING        reduce using rule 264 (argument)
    TAG           reduce using rule 264 (argument)
    TSTEP         reduce using rule 264 (argument)
    TYPSTRUCT     reduce using rule 264 (argument)
    UNEQUAL       reduce using rule 264 (argument)
    VALUE         reduce using rule 264 (argument)
    VAR           reduce using rule 264 (argument)

state 292 // SFUNC IDENT LBRACE NOT BOOLEAN [$end]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  262 argument: NOT argument .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 14

    $end          reduce using rule 262 (argument)
    ';'           reduce using rule 262 (argument)
    ADDR          reduce using rule 262 (argument)
    AFF           reduce using rule 262 (argument)
    AND           reduce using rule 262 (argument)
    ASSIGN        reduce using rule 262 (argument)
    BASICTYPE     reduce using rule 262 (argument)
    BITAND        reduce using rule 262 (argument)
    BITANDEQ      reduce using rule 262 (argument)
    BITCLEAR      reduce using rule 262 (argument)
    BITOR         reduce using rule 262 (argument)
    BITOREQ       reduce using rule 262 (argument)
    BITXOR        reduce using rule 262 (argument)
    BITXOREQ      reduce using rule 262 (argument)
    BOOLEAN       reduce using rule 262 (argument)
    BYTENUM       reduce using rule 262 (argument)
    CASSIGN       reduce using rule 262 (argument)
    COMMA         reduce using rule 262 (argument)
    DIV           reduce using rule 262 (argument)
    DIVEQ         reduce using rule 262 (argument)
    DOUBLE        reduce using rule 262 (argument)
    DPROGRAM      reduce using rule 262 (argument)
    DSTACK        reduce using rule 262 (argument)
    DSTATE        reduce using rule 262 (argument)
    EQUAL         reduce using rule 262 (argument)
    EXP           reduce using rule 262 (argument)
    EXPEQ         reduce using rule 262 (argument)
    FLOAT         reduce using rule 262 (argument)
    FOR           reduce using rule 262 (argument)
    FUNC          reduce using rule 262 (argument)
    GOTO          reduce using rule 262 (argument)
    GTHAN         reduce using rule 262 (argument)
    GTHANEQ       reduce using rule 262 (argument)
    IDENT         reduce using rule 262 (argument)
    IF            reduce using rule 262 (argument)
    IMPORT        reduce using rule 262 (argument)
    INFER         reduce using rule 262 (argument)
    INT           reduce using rule 262 (argument)
    LBRACE        reduce using rule 262 (argument)
    LEFTSHIFT     reduce using rule 262 (argument)
    LEFTSHIFTEQ   reduce using rule 262 (argument)
    LONG          reduce using rule 262 (argument)
    LPAREN        reduce using rule 262 (argument)
    LTHAN         reduce using rule 262 (argument)
    LTHANEQ       reduce using rule 262 (argument)
    MINUS         reduce using rule 262 (argument)
    MINUSEQ       reduce using rule 262 (argument)
    MINUSMINUS    reduce using rule 262 (argument)
    MULT          reduce using rule 262 (argument)
    MULTEQ        reduce using rule 262 (argument)
    NEW           reduce using rule 262 (argument)
    NOT           reduce using rule 262 (argument)
    OR            reduce using rule 262 (argument)
    PACKAGE       reduce using rule 262 (argument)
    PLUS          reduce using rule 262 (argument)
    PLUSEQ        reduce using rule 262 (argument)
    PLUSPLUS      reduce using rule 262 (argument)
    RBRACE        reduce using rule 262 (argument)
    REM           reduce using rule 262 (argument)
    REMAINDER     reduce using rule 262 (argument)
    REMAINDEREQ   reduce using rule 262 (argument)
    RETURN        reduce using rule 262 (argument)
    RIGHTSHIFT    reduce using rule 262 (argument)
    RIGHTSHIFTEQ  reduce using rule 262 (argument)
    RPAREN        reduce using rule 262 (argument)
    SFUNC         reduce using rule 262 (argument)
    SPACKAGE      reduce using rule 262 (argument)
    SSTRUCT       reduce using rule 262 (argument)
    STEP          reduce using rule 262 (argument)
    STRING        reduce using rule 262 (argument)
    TAG           reduce using rule 262 (argument)
    TSTEP         reduce using rule 262 (argument)
    TYPSTRUCT     reduce using rule 262 (argument)
    UNEQUAL       reduce using rule 262 (argument)
    VALUE         reduce using rule 262 (argument)
    VAR           reduce using rule 262 (argument)

state 293 // SFUNC IDENT LBRACE NOT BOOLEAN MINUSMINUS

  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3
  263 argument: NOT nonAssignExpression .  [$end, ';', ADDR, AFF, AND, ASSIGN, BASICTYPE, BITAND, BITANDEQ, BITCLEAR, BITOR, BITOREQ, BITXOR, BITXOREQ, BOOLEAN, BYTENUM, CASSIGN, COMMA, DIV, DIVEQ, DOUBLE, DPROGRAM, DSTACK, DSTATE, EQUAL, EXP, EXPEQ, FLOAT, FOR, FUNC, GOTO, GTHAN, GTHANEQ, IDENT, IF, IMPORT, INFER, INT, LBRACE, LEFTSHIFT, LEFTSHIFTEQ, LONG, LPAREN, LTHAN, LTHANEQ, MINUS, MINUSEQ, MINUSMINUS, MULT, MULTEQ, NEW, NOT, OR, PACKAGE, PLUS, PLUSEQ, PLUSPLUS, RBRACE, REM, REMAINDER, REMAINDEREQ, RETURN, RIGHTSHIFT, RIGHTSHIFTEQ, RPAREN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, UNEQUAL, VALUE, VAR]  // assoc %left, prec 14

    $end          reduce using rule 263 (argument)
    ';'           reduce using rule 263 (argument)
    ADDR          reduce using rule 263 (argument)
    AFF           reduce using rule 263 (argument)
    AND           reduce using rule 263 (argument)
    ASSIGN        reduce using rule 263 (argument)
    BASICTYPE     reduce using rule 263 (argument)
    BITAND        reduce using rule 263 (argument)
    BITANDEQ      reduce using rule 263 (argument)
    BITCLEAR      reduce using rule 263 (argument)
    BITOR         reduce using rule 263 (argument)
    BITOREQ       reduce using rule 263 (argument)
    BITXOR        reduce using rule 263 (argument)
    BITXOREQ      reduce using rule 263 (argument)
    BOOLEAN       reduce using rule 263 (argument)
    BYTENUM       reduce using rule 263 (argument)
    CASSIGN       reduce using rule 263 (argument)
    COMMA         reduce using rule 263 (argument)
    DIV           reduce using rule 263 (argument)
    DIVEQ         reduce using rule 263 (argument)
    DOUBLE        reduce using rule 263 (argument)
    DPROGRAM      reduce using rule 263 (argument)
    DSTACK        reduce using rule 263 (argument)
    DSTATE        reduce using rule 263 (argument)
    EQUAL         reduce using rule 263 (argument)
    EXP           reduce using rule 263 (argument)
    EXPEQ         reduce using rule 263 (argument)
    FLOAT         reduce using rule 263 (argument)
    FOR           reduce using rule 263 (argument)
    FUNC          reduce using rule 263 (argument)
    GOTO          reduce using rule 263 (argument)
    GTHAN         reduce using rule 263 (argument)
    GTHANEQ       reduce using rule 263 (argument)
    IDENT         reduce using rule 263 (argument)
    IF            reduce using rule 263 (argument)
    IMPORT        reduce using rule 263 (argument)
    INFER         reduce using rule 263 (argument)
    INT           reduce using rule 263 (argument)
    LBRACE        reduce using rule 263 (argument)
    LEFTSHIFT     reduce using rule 263 (argument)
    LEFTSHIFTEQ   reduce using rule 263 (argument)
    LONG          reduce using rule 263 (argument)
    LPAREN        reduce using rule 263 (argument)
    LTHAN         reduce using rule 263 (argument)
    LTHANEQ       reduce using rule 263 (argument)
    MINUS         reduce using rule 263 (argument)
    MINUSEQ       reduce using rule 263 (argument)
    MINUSMINUS    reduce using rule 263 (argument)
    MULT          reduce using rule 263 (argument)
    MULTEQ        reduce using rule 263 (argument)
    NEW           reduce using rule 263 (argument)
    NOT           reduce using rule 263 (argument)
    OR            reduce using rule 263 (argument)
    PACKAGE       reduce using rule 263 (argument)
    PLUS          reduce using rule 263 (argument)
    PLUSEQ        reduce using rule 263 (argument)
    PLUSPLUS      reduce using rule 263 (argument)
    RBRACE        reduce using rule 263 (argument)
    REM           reduce using rule 263 (argument)
    REMAINDER     reduce using rule 263 (argument)
    REMAINDEREQ   reduce using rule 263 (argument)
    RETURN        reduce using rule 263 (argument)
    RIGHTSHIFT    reduce using rule 263 (argument)
    RIGHTSHIFTEQ  reduce using rule 263 (argument)
    RPAREN        reduce using rule 263 (argument)
    SFUNC         reduce using rule 263 (argument)
    SPACKAGE      reduce using rule 263 (argument)
    SSTRUCT       reduce using rule 263 (argument)
    STEP          reduce using rule 263 (argument)
    STRING        reduce using rule 263 (argument)
    TAG           reduce using rule 263 (argument)
    TSTEP         reduce using rule 263 (argument)
    TYPSTRUCT     reduce using rule 263 (argument)
    UNEQUAL       reduce using rule 263 (argument)
    VALUE         reduce using rule 263 (argument)
    VAR           reduce using rule 263 (argument)

state 294 // SFUNC IDENT LBRACE FOR VAR

  114 assignExpression: VAR . IDENT BASICTYPE definitionAssignment
  115 assignExpression: VAR . IDENT LBRACK RBRACK IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 323

state 295 // SFUNC IDENT LBRACE FOR BOOLEAN [AND]

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  129 statement: beginFor argument . LBRACE expressionsAndStatements RBRACE
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  280 argumentsList: argument .  [ASSIGN, BITANDEQ, BITOREQ, BITXOREQ, CASSIGN, COMMA, DIVEQ, EXPEQ, LEFTSHIFTEQ, MINUSEQ, MULTEQ, PLUSEQ, REMAINDEREQ, RIGHTSHIFTEQ]

    AND           shift, and goto state 112
    ASSIGN        reduce using rule 280 (argumentsList)
    BITAND        shift, and goto state 113
    BITANDEQ      reduce using rule 280 (argumentsList)
    BITCLEAR      shift, and goto state 116
    BITOR         shift, and goto state 114
    BITOREQ       reduce using rule 280 (argumentsList)
    BITXOR        shift, and goto state 115
    BITXOREQ      reduce using rule 280 (argumentsList)
    CASSIGN       reduce using rule 280 (argumentsList)
    COMMA         reduce using rule 280 (argumentsList)
    DIV           shift, and goto state 100
    DIVEQ         reduce using rule 280 (argumentsList)
    EQUAL         shift, and goto state 105
    EXP           shift, and goto state 104
    EXPEQ         reduce using rule 280 (argumentsList)
    GTHAN         shift, and goto state 107
    GTHANEQ       shift, and goto state 108
    LBRACE        shift, and goto state 320
    LEFTSHIFT     shift, and goto state 102
    LEFTSHIFTEQ   reduce using rule 280 (argumentsList)
    LTHAN         shift, and goto state 109
    LTHANEQ       shift, and goto state 110
    MINUS         shift, and goto state 98
    MINUSEQ       reduce using rule 280 (argumentsList)
    MINUSMINUS    shift, and goto state 96
    MULT          shift, and goto state 99
    MULTEQ        reduce using rule 280 (argumentsList)
    OR            shift, and goto state 111
    PLUS          shift, and goto state 97
    PLUSEQ        reduce using rule 280 (argumentsList)
    PLUSPLUS      shift, and goto state 95
    REMAINDER     shift, and goto state 101
    REMAINDEREQ   reduce using rule 280 (argumentsList)
    RIGHTSHIFT    shift, and goto state 103
    RIGHTSHIFTEQ  reduce using rule 280 (argumentsList)
    UNEQUAL       shift, and goto state 106

state 296 // SFUNC IDENT LBRACE FOR BOOLEAN MINUSMINUS [';']

  128 statement: beginFor nonAssignExpression . LBRACE expressionsAndStatements RBRACE
  135 forLoopAssignExpression: nonAssignExpression .  [';']
  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3
  281 argumentsList: nonAssignExpression .  [ASSIGN, BITANDEQ, BITOREQ, BITXOREQ, CASSIGN, COMMA, DIVEQ, EXPEQ, LEFTSHIFTEQ, MINUSEQ, MULTEQ, PLUSEQ, REMAINDEREQ, RIGHTSHIFTEQ]

    ';'           reduce using rule 135 (forLoopAssignExpression)
    AND           shift, and goto state 88
    ASSIGN        reduce using rule 281 (argumentsList)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 281 (argumentsList)
    BITCLEAR      shift, and goto state 92
    BITOR         shift, and goto state 90
    BITOREQ       reduce using rule 281 (argumentsList)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 281 (argumentsList)
    CASSIGN       reduce using rule 281 (argumentsList)
    COMMA         reduce using rule 281 (argumentsList)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 281 (argumentsList)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 281 (argumentsList)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    LBRACE        shift, and goto state 317
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 281 (argumentsList)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 281 (argumentsList)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 281 (argumentsList)
    OR            shift, and goto state 87
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 281 (argumentsList)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 281 (argumentsList)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 281 (argumentsList)
    UNEQUAL       shift, and goto state 82

state 297 // SFUNC IDENT LBRACE FOR [';']

  130 statement: beginFor forLoopAssignExpression . ';' conditionControl ';' forLoopAssignExpression LBRACE expressionsAndStatements RBRACE

    ';'  shift, and goto state 299

state 298 // SFUNC IDENT LBRACE FOR BOOLEAN ASSIGN BOOLEAN [';']

  134 forLoopAssignExpression: assignExpression .  [';', LBRACE]

    ';'     reduce using rule 134 (forLoopAssignExpression)
    LBRACE  reduce using rule 134 (forLoopAssignExpression)

state 299 // SFUNC IDENT LBRACE FOR ';'

  130 statement: beginFor forLoopAssignExpression ';' . conditionControl ';' forLoopAssignExpression LBRACE expressionsAndStatements RBRACE

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 300
    conditionControl     goto state 302
    nonAssignExpression  goto state 301

state 300 // SFUNC IDENT LBRACE IF BOOLEAN [';']

  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  122 conditionControl: argument .  [';', LBRACE]
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    ';'         reduce using rule 122 (conditionControl)
    AND         shift, and goto state 112
    BITAND      shift, and goto state 113
    BITCLEAR    shift, and goto state 116
    BITOR       shift, and goto state 114
    BITXOR      shift, and goto state 115
    DIV         shift, and goto state 100
    EQUAL       shift, and goto state 105
    EXP         shift, and goto state 104
    GTHAN       shift, and goto state 107
    GTHANEQ     shift, and goto state 108
    LBRACE      reduce using rule 122 (conditionControl)
    LEFTSHIFT   shift, and goto state 102
    LTHAN       shift, and goto state 109
    LTHANEQ     shift, and goto state 110
    MINUS       shift, and goto state 98
    MINUSMINUS  shift, and goto state 96
    MULT        shift, and goto state 99
    OR          shift, and goto state 111
    PLUS        shift, and goto state 97
    PLUSPLUS    shift, and goto state 95
    REMAINDER   shift, and goto state 101
    RIGHTSHIFT  shift, and goto state 103
    UNEQUAL     shift, and goto state 106

state 301 // SFUNC IDENT LBRACE IF BOOLEAN MINUSMINUS [';']

  121 conditionControl: nonAssignExpression .  [';', LBRACE]
  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3

    ';'         reduce using rule 121 (conditionControl)
    AND         shift, and goto state 88
    BITAND      shift, and goto state 89
    BITCLEAR    shift, and goto state 92
    BITOR       shift, and goto state 90
    BITXOR      shift, and goto state 91
    DIV         shift, and goto state 76
    EQUAL       shift, and goto state 81
    EXP         shift, and goto state 80
    GTHAN       shift, and goto state 83
    GTHANEQ     shift, and goto state 84
    LBRACE      reduce using rule 121 (conditionControl)
    LEFTSHIFT   shift, and goto state 78
    LTHAN       shift, and goto state 85
    LTHANEQ     shift, and goto state 86
    MINUS       shift, and goto state 74
    MULT        shift, and goto state 75
    OR          shift, and goto state 87
    PLUS        shift, and goto state 73
    REMAINDER   shift, and goto state 77
    RIGHTSHIFT  shift, and goto state 79
    UNEQUAL     shift, and goto state 82

state 302 // SFUNC IDENT LBRACE FOR ';' BOOLEAN [';']

  130 statement: beginFor forLoopAssignExpression ';' conditionControl . ';' forLoopAssignExpression LBRACE expressionsAndStatements RBRACE

    ';'  shift, and goto state 303

state 303 // SFUNC IDENT LBRACE FOR ';' BOOLEAN ';'

  130 statement: beginFor forLoopAssignExpression ';' conditionControl ';' . forLoopAssignExpression LBRACE expressionsAndStatements RBRACE
  133 forLoopAssignExpression: .  [LBRACE]

    ADDR       shift, and goto state 69
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LBRACE     reduce using rule 133 (forLoopAssignExpression)
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 294

    argument                 goto state 50
    argumentsList            goto state 48
    assignExpression         goto state 298
    forLoopAssignExpression  goto state 304
    nonAssignExpression      goto state 305

state 304 // SFUNC IDENT LBRACE FOR ';' BOOLEAN ';' [LBRACE]

  130 statement: beginFor forLoopAssignExpression ';' conditionControl ';' forLoopAssignExpression . LBRACE expressionsAndStatements RBRACE

    LBRACE  shift, and goto state 306

state 305 // SFUNC IDENT LBRACE FOR ';' BOOLEAN ';' BOOLEAN MINUSMINUS [AND]

  135 forLoopAssignExpression: nonAssignExpression .  [LBRACE]
  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3
  281 argumentsList: nonAssignExpression .  [ASSIGN, BITANDEQ, BITOREQ, BITXOREQ, CASSIGN, COMMA, DIVEQ, EXPEQ, LEFTSHIFTEQ, MINUSEQ, MULTEQ, PLUSEQ, REMAINDEREQ, RIGHTSHIFTEQ]

    AND           shift, and goto state 88
    ASSIGN        reduce using rule 281 (argumentsList)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 281 (argumentsList)
    BITCLEAR      shift, and goto state 92
    BITOR         shift, and goto state 90
    BITOREQ       reduce using rule 281 (argumentsList)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 281 (argumentsList)
    CASSIGN       reduce using rule 281 (argumentsList)
    COMMA         reduce using rule 281 (argumentsList)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 281 (argumentsList)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 281 (argumentsList)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    LBRACE        reduce using rule 135 (forLoopAssignExpression)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 281 (argumentsList)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 281 (argumentsList)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 281 (argumentsList)
    OR            shift, and goto state 87
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 281 (argumentsList)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 281 (argumentsList)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 281 (argumentsList)
    UNEQUAL       shift, and goto state 82

state 306 // SFUNC IDENT LBRACE FOR ';' BOOLEAN ';' LBRACE

  130 statement: beginFor forLoopAssignExpression ';' conditionControl ';' forLoopAssignExpression LBRACE . expressionsAndStatements RBRACE

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance                goto state 45
    argument                  goto state 50
    argumentsList             goto state 48
    assignExpression          goto state 40
    beginFor                  goto state 55
    debugging                 goto state 44
    expressionsAndStatements  goto state 307
    nonAssignExpression       goto state 39
    remover                   goto state 46
    selector                  goto state 42
    statement                 goto state 41
    stepping                  goto state 43

state 307 // SFUNC IDENT LBRACE FOR ';' BOOLEAN ';' LBRACE ';' [';']

  106 expressionsAndStatements: expressionsAndStatements . nonAssignExpression
  107 expressionsAndStatements: expressionsAndStatements . assignExpression
  108 expressionsAndStatements: expressionsAndStatements . statement
  109 expressionsAndStatements: expressionsAndStatements . selector
  110 expressionsAndStatements: expressionsAndStatements . stepping
  111 expressionsAndStatements: expressionsAndStatements . debugging
  112 expressionsAndStatements: expressionsAndStatements . affordance
  113 expressionsAndStatements: expressionsAndStatements . remover
  130 statement: beginFor forLoopAssignExpression ';' conditionControl ';' forLoopAssignExpression LBRACE expressionsAndStatements . RBRACE

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    RBRACE     shift, and goto state 316
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance           goto state 314
    argument             goto state 50
    argumentsList        goto state 48
    assignExpression     goto state 309
    beginFor             goto state 55
    debugging            goto state 313
    nonAssignExpression  goto state 308
    remover              goto state 315
    selector             goto state 311
    statement            goto state 310
    stepping             goto state 312

state 308 // SFUNC IDENT LBRACE ';' BOOLEAN MINUSMINUS [';']

  106 expressionsAndStatements: expressionsAndStatements nonAssignExpression .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]
  183 argument: nonAssignExpression . PLUS nonAssignExpression  // assoc %left, prec 10
  185 argument: nonAssignExpression . PLUS argument  // assoc %left, prec 10
  187 argument: nonAssignExpression . MINUS nonAssignExpression  // assoc %left, prec 10
  189 argument: nonAssignExpression . MINUS argument  // assoc %left, prec 10
  191 argument: nonAssignExpression . MULT nonAssignExpression  // assoc %left, prec 11
  193 argument: nonAssignExpression . MULT argument  // assoc %left, prec 11
  195 argument: nonAssignExpression . DIV nonAssignExpression  // assoc %left, prec 11
  197 argument: nonAssignExpression . DIV argument  // assoc %left, prec 11
  199 argument: nonAssignExpression . REMAINDER nonAssignExpression  // assoc %left, prec 11
  201 argument: nonAssignExpression . REMAINDER argument  // assoc %left, prec 11
  203 argument: nonAssignExpression . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  205 argument: nonAssignExpression . LEFTSHIFT argument  // assoc %left, prec 9
  207 argument: nonAssignExpression . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  209 argument: nonAssignExpression . RIGHTSHIFT argument  // assoc %left, prec 9
  211 argument: nonAssignExpression . EXP nonAssignExpression  // assoc %left, prec 12
  213 argument: nonAssignExpression . EXP argument  // assoc %left, prec 12
  215 argument: nonAssignExpression . EQUAL nonAssignExpression  // assoc %left, prec 7
  217 argument: nonAssignExpression . EQUAL argument  // assoc %left, prec 7
  219 argument: nonAssignExpression . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  221 argument: nonAssignExpression . UNEQUAL argument  // assoc %left, prec 7
  223 argument: nonAssignExpression . GTHAN nonAssignExpression  // assoc %left, prec 8
  225 argument: nonAssignExpression . GTHAN argument  // assoc %left, prec 8
  227 argument: nonAssignExpression . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  229 argument: nonAssignExpression . GTHANEQ argument  // assoc %left, prec 8
  231 argument: nonAssignExpression . LTHAN nonAssignExpression  // assoc %left, prec 8
  233 argument: nonAssignExpression . LTHAN argument  // assoc %left, prec 8
  235 argument: nonAssignExpression . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  237 argument: nonAssignExpression . LTHANEQ argument  // assoc %left, prec 8
  239 argument: nonAssignExpression . OR nonAssignExpression  // assoc %left, prec 1
  241 argument: nonAssignExpression . OR argument  // assoc %left, prec 1
  243 argument: nonAssignExpression . AND nonAssignExpression  // assoc %left, prec 2
  245 argument: nonAssignExpression . AND argument  // assoc %left, prec 2
  247 argument: nonAssignExpression . BITAND nonAssignExpression  // assoc %left, prec 6
  249 argument: nonAssignExpression . BITAND argument  // assoc %left, prec 6
  251 argument: nonAssignExpression . BITOR nonAssignExpression  // assoc %left, prec 4
  253 argument: nonAssignExpression . BITOR argument  // assoc %left, prec 4
  255 argument: nonAssignExpression . BITXOR nonAssignExpression  // assoc %left, prec 5
  257 argument: nonAssignExpression . BITXOR argument  // assoc %left, prec 5
  259 argument: nonAssignExpression . BITCLEAR nonAssignExpression  // assoc %left, prec 3
  261 argument: nonAssignExpression . BITCLEAR argument  // assoc %left, prec 3
  281 argumentsList: nonAssignExpression .  [ASSIGN, BITANDEQ, BITOREQ, BITXOREQ, CASSIGN, COMMA, DIVEQ, EXPEQ, LEFTSHIFTEQ, MINUSEQ, MULTEQ, PLUSEQ, REMAINDEREQ, RIGHTSHIFTEQ]

    ';'           reduce using rule 106 (expressionsAndStatements)
    ADDR          reduce using rule 106 (expressionsAndStatements)
    AFF           reduce using rule 106 (expressionsAndStatements)
    AND           shift, and goto state 88
    ASSIGN        reduce using rule 281 (argumentsList)
    BASICTYPE     reduce using rule 106 (expressionsAndStatements)
    BITAND        shift, and goto state 89
    BITANDEQ      reduce using rule 281 (argumentsList)
    BITCLEAR      shift, and goto state 92
    BITOR         shift, and goto state 90
    BITOREQ       reduce using rule 281 (argumentsList)
    BITXOR        shift, and goto state 91
    BITXOREQ      reduce using rule 281 (argumentsList)
    BOOLEAN       reduce using rule 106 (expressionsAndStatements)
    BYTENUM       reduce using rule 106 (expressionsAndStatements)
    CASSIGN       reduce using rule 281 (argumentsList)
    COMMA         reduce using rule 281 (argumentsList)
    DIV           shift, and goto state 76
    DIVEQ         reduce using rule 281 (argumentsList)
    DOUBLE        reduce using rule 106 (expressionsAndStatements)
    DPROGRAM      reduce using rule 106 (expressionsAndStatements)
    DSTACK        reduce using rule 106 (expressionsAndStatements)
    DSTATE        reduce using rule 106 (expressionsAndStatements)
    EQUAL         shift, and goto state 81
    EXP           shift, and goto state 80
    EXPEQ         reduce using rule 281 (argumentsList)
    FLOAT         reduce using rule 106 (expressionsAndStatements)
    FOR           reduce using rule 106 (expressionsAndStatements)
    GOTO          reduce using rule 106 (expressionsAndStatements)
    GTHAN         shift, and goto state 83
    GTHANEQ       shift, and goto state 84
    IDENT         reduce using rule 106 (expressionsAndStatements)
    IF            reduce using rule 106 (expressionsAndStatements)
    INFER         reduce using rule 106 (expressionsAndStatements)
    INT           reduce using rule 106 (expressionsAndStatements)
    LEFTSHIFT     shift, and goto state 78
    LEFTSHIFTEQ   reduce using rule 281 (argumentsList)
    LONG          reduce using rule 106 (expressionsAndStatements)
    LPAREN        reduce using rule 106 (expressionsAndStatements)
    LTHAN         shift, and goto state 85
    LTHANEQ       shift, and goto state 86
    MINUS         shift, and goto state 74
    MINUSEQ       reduce using rule 281 (argumentsList)
    MULT          shift, and goto state 75
    MULTEQ        reduce using rule 281 (argumentsList)
    NEW           reduce using rule 106 (expressionsAndStatements)
    NOT           reduce using rule 106 (expressionsAndStatements)
    OR            shift, and goto state 87
    PLUS          shift, and goto state 73
    PLUSEQ        reduce using rule 281 (argumentsList)
    RBRACE        reduce using rule 106 (expressionsAndStatements)
    REM           reduce using rule 106 (expressionsAndStatements)
    REMAINDER     shift, and goto state 77
    REMAINDEREQ   reduce using rule 281 (argumentsList)
    RETURN        reduce using rule 106 (expressionsAndStatements)
    RIGHTSHIFT    shift, and goto state 79
    RIGHTSHIFTEQ  reduce using rule 281 (argumentsList)
    SFUNC         reduce using rule 106 (expressionsAndStatements)
    SPACKAGE      reduce using rule 106 (expressionsAndStatements)
    SSTRUCT       reduce using rule 106 (expressionsAndStatements)
    STEP          reduce using rule 106 (expressionsAndStatements)
    STRING        reduce using rule 106 (expressionsAndStatements)
    TAG           reduce using rule 106 (expressionsAndStatements)
    TSTEP         reduce using rule 106 (expressionsAndStatements)
    UNEQUAL       shift, and goto state 82
    VALUE         reduce using rule 106 (expressionsAndStatements)
    VAR           reduce using rule 106 (expressionsAndStatements)

state 309 // SFUNC IDENT LBRACE ';' BOOLEAN ASSIGN BOOLEAN [';']

  107 expressionsAndStatements: expressionsAndStatements assignExpression .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 107 (expressionsAndStatements)
    ADDR       reduce using rule 107 (expressionsAndStatements)
    AFF        reduce using rule 107 (expressionsAndStatements)
    BASICTYPE  reduce using rule 107 (expressionsAndStatements)
    BOOLEAN    reduce using rule 107 (expressionsAndStatements)
    BYTENUM    reduce using rule 107 (expressionsAndStatements)
    DOUBLE     reduce using rule 107 (expressionsAndStatements)
    DPROGRAM   reduce using rule 107 (expressionsAndStatements)
    DSTACK     reduce using rule 107 (expressionsAndStatements)
    DSTATE     reduce using rule 107 (expressionsAndStatements)
    FLOAT      reduce using rule 107 (expressionsAndStatements)
    FOR        reduce using rule 107 (expressionsAndStatements)
    GOTO       reduce using rule 107 (expressionsAndStatements)
    IDENT      reduce using rule 107 (expressionsAndStatements)
    IF         reduce using rule 107 (expressionsAndStatements)
    INFER      reduce using rule 107 (expressionsAndStatements)
    INT        reduce using rule 107 (expressionsAndStatements)
    LONG       reduce using rule 107 (expressionsAndStatements)
    LPAREN     reduce using rule 107 (expressionsAndStatements)
    NEW        reduce using rule 107 (expressionsAndStatements)
    NOT        reduce using rule 107 (expressionsAndStatements)
    RBRACE     reduce using rule 107 (expressionsAndStatements)
    REM        reduce using rule 107 (expressionsAndStatements)
    RETURN     reduce using rule 107 (expressionsAndStatements)
    SFUNC      reduce using rule 107 (expressionsAndStatements)
    SPACKAGE   reduce using rule 107 (expressionsAndStatements)
    SSTRUCT    reduce using rule 107 (expressionsAndStatements)
    STEP       reduce using rule 107 (expressionsAndStatements)
    STRING     reduce using rule 107 (expressionsAndStatements)
    TAG        reduce using rule 107 (expressionsAndStatements)
    TSTEP      reduce using rule 107 (expressionsAndStatements)
    VALUE      reduce using rule 107 (expressionsAndStatements)
    VAR        reduce using rule 107 (expressionsAndStatements)

state 310 // SFUNC IDENT LBRACE ';' ';' [';']

  108 expressionsAndStatements: expressionsAndStatements statement .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 108 (expressionsAndStatements)
    ADDR       reduce using rule 108 (expressionsAndStatements)
    AFF        reduce using rule 108 (expressionsAndStatements)
    BASICTYPE  reduce using rule 108 (expressionsAndStatements)
    BOOLEAN    reduce using rule 108 (expressionsAndStatements)
    BYTENUM    reduce using rule 108 (expressionsAndStatements)
    DOUBLE     reduce using rule 108 (expressionsAndStatements)
    DPROGRAM   reduce using rule 108 (expressionsAndStatements)
    DSTACK     reduce using rule 108 (expressionsAndStatements)
    DSTATE     reduce using rule 108 (expressionsAndStatements)
    FLOAT      reduce using rule 108 (expressionsAndStatements)
    FOR        reduce using rule 108 (expressionsAndStatements)
    GOTO       reduce using rule 108 (expressionsAndStatements)
    IDENT      reduce using rule 108 (expressionsAndStatements)
    IF         reduce using rule 108 (expressionsAndStatements)
    INFER      reduce using rule 108 (expressionsAndStatements)
    INT        reduce using rule 108 (expressionsAndStatements)
    LONG       reduce using rule 108 (expressionsAndStatements)
    LPAREN     reduce using rule 108 (expressionsAndStatements)
    NEW        reduce using rule 108 (expressionsAndStatements)
    NOT        reduce using rule 108 (expressionsAndStatements)
    RBRACE     reduce using rule 108 (expressionsAndStatements)
    REM        reduce using rule 108 (expressionsAndStatements)
    RETURN     reduce using rule 108 (expressionsAndStatements)
    SFUNC      reduce using rule 108 (expressionsAndStatements)
    SPACKAGE   reduce using rule 108 (expressionsAndStatements)
    SSTRUCT    reduce using rule 108 (expressionsAndStatements)
    STEP       reduce using rule 108 (expressionsAndStatements)
    STRING     reduce using rule 108 (expressionsAndStatements)
    TAG        reduce using rule 108 (expressionsAndStatements)
    TSTEP      reduce using rule 108 (expressionsAndStatements)
    VALUE      reduce using rule 108 (expressionsAndStatements)
    VAR        reduce using rule 108 (expressionsAndStatements)

state 311 // SFUNC IDENT LBRACE ';' SFUNC IDENT [';']

  109 expressionsAndStatements: expressionsAndStatements selector .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 109 (expressionsAndStatements)
    ADDR       reduce using rule 109 (expressionsAndStatements)
    AFF        reduce using rule 109 (expressionsAndStatements)
    BASICTYPE  reduce using rule 109 (expressionsAndStatements)
    BOOLEAN    reduce using rule 109 (expressionsAndStatements)
    BYTENUM    reduce using rule 109 (expressionsAndStatements)
    DOUBLE     reduce using rule 109 (expressionsAndStatements)
    DPROGRAM   reduce using rule 109 (expressionsAndStatements)
    DSTACK     reduce using rule 109 (expressionsAndStatements)
    DSTATE     reduce using rule 109 (expressionsAndStatements)
    FLOAT      reduce using rule 109 (expressionsAndStatements)
    FOR        reduce using rule 109 (expressionsAndStatements)
    GOTO       reduce using rule 109 (expressionsAndStatements)
    IDENT      reduce using rule 109 (expressionsAndStatements)
    IF         reduce using rule 109 (expressionsAndStatements)
    INFER      reduce using rule 109 (expressionsAndStatements)
    INT        reduce using rule 109 (expressionsAndStatements)
    LONG       reduce using rule 109 (expressionsAndStatements)
    LPAREN     reduce using rule 109 (expressionsAndStatements)
    NEW        reduce using rule 109 (expressionsAndStatements)
    NOT        reduce using rule 109 (expressionsAndStatements)
    RBRACE     reduce using rule 109 (expressionsAndStatements)
    REM        reduce using rule 109 (expressionsAndStatements)
    RETURN     reduce using rule 109 (expressionsAndStatements)
    SFUNC      reduce using rule 109 (expressionsAndStatements)
    SPACKAGE   reduce using rule 109 (expressionsAndStatements)
    SSTRUCT    reduce using rule 109 (expressionsAndStatements)
    STEP       reduce using rule 109 (expressionsAndStatements)
    STRING     reduce using rule 109 (expressionsAndStatements)
    TAG        reduce using rule 109 (expressionsAndStatements)
    TSTEP      reduce using rule 109 (expressionsAndStatements)
    VALUE      reduce using rule 109 (expressionsAndStatements)
    VAR        reduce using rule 109 (expressionsAndStatements)

state 312 // SFUNC IDENT LBRACE ';' STEP INT [';']

  110 expressionsAndStatements: expressionsAndStatements stepping .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 110 (expressionsAndStatements)
    ADDR       reduce using rule 110 (expressionsAndStatements)
    AFF        reduce using rule 110 (expressionsAndStatements)
    BASICTYPE  reduce using rule 110 (expressionsAndStatements)
    BOOLEAN    reduce using rule 110 (expressionsAndStatements)
    BYTENUM    reduce using rule 110 (expressionsAndStatements)
    DOUBLE     reduce using rule 110 (expressionsAndStatements)
    DPROGRAM   reduce using rule 110 (expressionsAndStatements)
    DSTACK     reduce using rule 110 (expressionsAndStatements)
    DSTATE     reduce using rule 110 (expressionsAndStatements)
    FLOAT      reduce using rule 110 (expressionsAndStatements)
    FOR        reduce using rule 110 (expressionsAndStatements)
    GOTO       reduce using rule 110 (expressionsAndStatements)
    IDENT      reduce using rule 110 (expressionsAndStatements)
    IF         reduce using rule 110 (expressionsAndStatements)
    INFER      reduce using rule 110 (expressionsAndStatements)
    INT        reduce using rule 110 (expressionsAndStatements)
    LONG       reduce using rule 110 (expressionsAndStatements)
    LPAREN     reduce using rule 110 (expressionsAndStatements)
    NEW        reduce using rule 110 (expressionsAndStatements)
    NOT        reduce using rule 110 (expressionsAndStatements)
    RBRACE     reduce using rule 110 (expressionsAndStatements)
    REM        reduce using rule 110 (expressionsAndStatements)
    RETURN     reduce using rule 110 (expressionsAndStatements)
    SFUNC      reduce using rule 110 (expressionsAndStatements)
    SPACKAGE   reduce using rule 110 (expressionsAndStatements)
    SSTRUCT    reduce using rule 110 (expressionsAndStatements)
    STEP       reduce using rule 110 (expressionsAndStatements)
    STRING     reduce using rule 110 (expressionsAndStatements)
    TAG        reduce using rule 110 (expressionsAndStatements)
    TSTEP      reduce using rule 110 (expressionsAndStatements)
    VALUE      reduce using rule 110 (expressionsAndStatements)
    VAR        reduce using rule 110 (expressionsAndStatements)

state 313 // SFUNC IDENT LBRACE ';' DPROGRAM [';']

  111 expressionsAndStatements: expressionsAndStatements debugging .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 111 (expressionsAndStatements)
    ADDR       reduce using rule 111 (expressionsAndStatements)
    AFF        reduce using rule 111 (expressionsAndStatements)
    BASICTYPE  reduce using rule 111 (expressionsAndStatements)
    BOOLEAN    reduce using rule 111 (expressionsAndStatements)
    BYTENUM    reduce using rule 111 (expressionsAndStatements)
    DOUBLE     reduce using rule 111 (expressionsAndStatements)
    DPROGRAM   reduce using rule 111 (expressionsAndStatements)
    DSTACK     reduce using rule 111 (expressionsAndStatements)
    DSTATE     reduce using rule 111 (expressionsAndStatements)
    FLOAT      reduce using rule 111 (expressionsAndStatements)
    FOR        reduce using rule 111 (expressionsAndStatements)
    GOTO       reduce using rule 111 (expressionsAndStatements)
    IDENT      reduce using rule 111 (expressionsAndStatements)
    IF         reduce using rule 111 (expressionsAndStatements)
    INFER      reduce using rule 111 (expressionsAndStatements)
    INT        reduce using rule 111 (expressionsAndStatements)
    LONG       reduce using rule 111 (expressionsAndStatements)
    LPAREN     reduce using rule 111 (expressionsAndStatements)
    NEW        reduce using rule 111 (expressionsAndStatements)
    NOT        reduce using rule 111 (expressionsAndStatements)
    RBRACE     reduce using rule 111 (expressionsAndStatements)
    REM        reduce using rule 111 (expressionsAndStatements)
    RETURN     reduce using rule 111 (expressionsAndStatements)
    SFUNC      reduce using rule 111 (expressionsAndStatements)
    SPACKAGE   reduce using rule 111 (expressionsAndStatements)
    SSTRUCT    reduce using rule 111 (expressionsAndStatements)
    STEP       reduce using rule 111 (expressionsAndStatements)
    STRING     reduce using rule 111 (expressionsAndStatements)
    TAG        reduce using rule 111 (expressionsAndStatements)
    TSTEP      reduce using rule 111 (expressionsAndStatements)
    VALUE      reduce using rule 111 (expressionsAndStatements)
    VAR        reduce using rule 111 (expressionsAndStatements)

state 314 // SFUNC IDENT LBRACE ';' TAG [';']

  112 expressionsAndStatements: expressionsAndStatements affordance .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 112 (expressionsAndStatements)
    ADDR       reduce using rule 112 (expressionsAndStatements)
    AFF        reduce using rule 112 (expressionsAndStatements)
    BASICTYPE  reduce using rule 112 (expressionsAndStatements)
    BOOLEAN    reduce using rule 112 (expressionsAndStatements)
    BYTENUM    reduce using rule 112 (expressionsAndStatements)
    DOUBLE     reduce using rule 112 (expressionsAndStatements)
    DPROGRAM   reduce using rule 112 (expressionsAndStatements)
    DSTACK     reduce using rule 112 (expressionsAndStatements)
    DSTATE     reduce using rule 112 (expressionsAndStatements)
    FLOAT      reduce using rule 112 (expressionsAndStatements)
    FOR        reduce using rule 112 (expressionsAndStatements)
    GOTO       reduce using rule 112 (expressionsAndStatements)
    IDENT      reduce using rule 112 (expressionsAndStatements)
    IF         reduce using rule 112 (expressionsAndStatements)
    INFER      reduce using rule 112 (expressionsAndStatements)
    INT        reduce using rule 112 (expressionsAndStatements)
    LONG       reduce using rule 112 (expressionsAndStatements)
    LPAREN     reduce using rule 112 (expressionsAndStatements)
    NEW        reduce using rule 112 (expressionsAndStatements)
    NOT        reduce using rule 112 (expressionsAndStatements)
    RBRACE     reduce using rule 112 (expressionsAndStatements)
    REM        reduce using rule 112 (expressionsAndStatements)
    RETURN     reduce using rule 112 (expressionsAndStatements)
    SFUNC      reduce using rule 112 (expressionsAndStatements)
    SPACKAGE   reduce using rule 112 (expressionsAndStatements)
    SSTRUCT    reduce using rule 112 (expressionsAndStatements)
    STEP       reduce using rule 112 (expressionsAndStatements)
    STRING     reduce using rule 112 (expressionsAndStatements)
    TAG        reduce using rule 112 (expressionsAndStatements)
    TSTEP      reduce using rule 112 (expressionsAndStatements)
    VALUE      reduce using rule 112 (expressionsAndStatements)
    VAR        reduce using rule 112 (expressionsAndStatements)

state 315 // SFUNC IDENT LBRACE ';' REM DEF IDENT [';']

  113 expressionsAndStatements: expressionsAndStatements remover .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 113 (expressionsAndStatements)
    ADDR       reduce using rule 113 (expressionsAndStatements)
    AFF        reduce using rule 113 (expressionsAndStatements)
    BASICTYPE  reduce using rule 113 (expressionsAndStatements)
    BOOLEAN    reduce using rule 113 (expressionsAndStatements)
    BYTENUM    reduce using rule 113 (expressionsAndStatements)
    DOUBLE     reduce using rule 113 (expressionsAndStatements)
    DPROGRAM   reduce using rule 113 (expressionsAndStatements)
    DSTACK     reduce using rule 113 (expressionsAndStatements)
    DSTATE     reduce using rule 113 (expressionsAndStatements)
    FLOAT      reduce using rule 113 (expressionsAndStatements)
    FOR        reduce using rule 113 (expressionsAndStatements)
    GOTO       reduce using rule 113 (expressionsAndStatements)
    IDENT      reduce using rule 113 (expressionsAndStatements)
    IF         reduce using rule 113 (expressionsAndStatements)
    INFER      reduce using rule 113 (expressionsAndStatements)
    INT        reduce using rule 113 (expressionsAndStatements)
    LONG       reduce using rule 113 (expressionsAndStatements)
    LPAREN     reduce using rule 113 (expressionsAndStatements)
    NEW        reduce using rule 113 (expressionsAndStatements)
    NOT        reduce using rule 113 (expressionsAndStatements)
    RBRACE     reduce using rule 113 (expressionsAndStatements)
    REM        reduce using rule 113 (expressionsAndStatements)
    RETURN     reduce using rule 113 (expressionsAndStatements)
    SFUNC      reduce using rule 113 (expressionsAndStatements)
    SPACKAGE   reduce using rule 113 (expressionsAndStatements)
    SSTRUCT    reduce using rule 113 (expressionsAndStatements)
    STEP       reduce using rule 113 (expressionsAndStatements)
    STRING     reduce using rule 113 (expressionsAndStatements)
    TAG        reduce using rule 113 (expressionsAndStatements)
    TSTEP      reduce using rule 113 (expressionsAndStatements)
    VALUE      reduce using rule 113 (expressionsAndStatements)
    VAR        reduce using rule 113 (expressionsAndStatements)

state 316 // SFUNC IDENT LBRACE FOR ';' BOOLEAN ';' LBRACE ';' RBRACE

  130 statement: beginFor forLoopAssignExpression ';' conditionControl ';' forLoopAssignExpression LBRACE expressionsAndStatements RBRACE .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 130 (statement)
    ADDR       reduce using rule 130 (statement)
    AFF        reduce using rule 130 (statement)
    BASICTYPE  reduce using rule 130 (statement)
    BOOLEAN    reduce using rule 130 (statement)
    BYTENUM    reduce using rule 130 (statement)
    DOUBLE     reduce using rule 130 (statement)
    DPROGRAM   reduce using rule 130 (statement)
    DSTACK     reduce using rule 130 (statement)
    DSTATE     reduce using rule 130 (statement)
    FLOAT      reduce using rule 130 (statement)
    FOR        reduce using rule 130 (statement)
    GOTO       reduce using rule 130 (statement)
    IDENT      reduce using rule 130 (statement)
    IF         reduce using rule 130 (statement)
    INFER      reduce using rule 130 (statement)
    INT        reduce using rule 130 (statement)
    LONG       reduce using rule 130 (statement)
    LPAREN     reduce using rule 130 (statement)
    NEW        reduce using rule 130 (statement)
    NOT        reduce using rule 130 (statement)
    RBRACE     reduce using rule 130 (statement)
    REM        reduce using rule 130 (statement)
    RETURN     reduce using rule 130 (statement)
    SFUNC      reduce using rule 130 (statement)
    SPACKAGE   reduce using rule 130 (statement)
    SSTRUCT    reduce using rule 130 (statement)
    STEP       reduce using rule 130 (statement)
    STRING     reduce using rule 130 (statement)
    TAG        reduce using rule 130 (statement)
    TSTEP      reduce using rule 130 (statement)
    VALUE      reduce using rule 130 (statement)
    VAR        reduce using rule 130 (statement)

state 317 // SFUNC IDENT LBRACE FOR BOOLEAN MINUSMINUS LBRACE

  128 statement: beginFor nonAssignExpression LBRACE . expressionsAndStatements RBRACE

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance                goto state 45
    argument                  goto state 50
    argumentsList             goto state 48
    assignExpression          goto state 40
    beginFor                  goto state 55
    debugging                 goto state 44
    expressionsAndStatements  goto state 318
    nonAssignExpression       goto state 39
    remover                   goto state 46
    selector                  goto state 42
    statement                 goto state 41
    stepping                  goto state 43

state 318 // SFUNC IDENT LBRACE FOR BOOLEAN MINUSMINUS LBRACE ';' [';']

  106 expressionsAndStatements: expressionsAndStatements . nonAssignExpression
  107 expressionsAndStatements: expressionsAndStatements . assignExpression
  108 expressionsAndStatements: expressionsAndStatements . statement
  109 expressionsAndStatements: expressionsAndStatements . selector
  110 expressionsAndStatements: expressionsAndStatements . stepping
  111 expressionsAndStatements: expressionsAndStatements . debugging
  112 expressionsAndStatements: expressionsAndStatements . affordance
  113 expressionsAndStatements: expressionsAndStatements . remover
  128 statement: beginFor nonAssignExpression LBRACE expressionsAndStatements . RBRACE

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    RBRACE     shift, and goto state 319
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance           goto state 314
    argument             goto state 50
    argumentsList        goto state 48
    assignExpression     goto state 309
    beginFor             goto state 55
    debugging            goto state 313
    nonAssignExpression  goto state 308
    remover              goto state 315
    selector             goto state 311
    statement            goto state 310
    stepping             goto state 312

state 319 // SFUNC IDENT LBRACE FOR BOOLEAN MINUSMINUS LBRACE ';' RBRACE

  128 statement: beginFor nonAssignExpression LBRACE expressionsAndStatements RBRACE .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 128 (statement)
    ADDR       reduce using rule 128 (statement)
    AFF        reduce using rule 128 (statement)
    BASICTYPE  reduce using rule 128 (statement)
    BOOLEAN    reduce using rule 128 (statement)
    BYTENUM    reduce using rule 128 (statement)
    DOUBLE     reduce using rule 128 (statement)
    DPROGRAM   reduce using rule 128 (statement)
    DSTACK     reduce using rule 128 (statement)
    DSTATE     reduce using rule 128 (statement)
    FLOAT      reduce using rule 128 (statement)
    FOR        reduce using rule 128 (statement)
    GOTO       reduce using rule 128 (statement)
    IDENT      reduce using rule 128 (statement)
    IF         reduce using rule 128 (statement)
    INFER      reduce using rule 128 (statement)
    INT        reduce using rule 128 (statement)
    LONG       reduce using rule 128 (statement)
    LPAREN     reduce using rule 128 (statement)
    NEW        reduce using rule 128 (statement)
    NOT        reduce using rule 128 (statement)
    RBRACE     reduce using rule 128 (statement)
    REM        reduce using rule 128 (statement)
    RETURN     reduce using rule 128 (statement)
    SFUNC      reduce using rule 128 (statement)
    SPACKAGE   reduce using rule 128 (statement)
    SSTRUCT    reduce using rule 128 (statement)
    STEP       reduce using rule 128 (statement)
    STRING     reduce using rule 128 (statement)
    TAG        reduce using rule 128 (statement)
    TSTEP      reduce using rule 128 (statement)
    VALUE      reduce using rule 128 (statement)
    VAR        reduce using rule 128 (statement)

state 320 // SFUNC IDENT LBRACE FOR BOOLEAN LBRACE

  129 statement: beginFor argument LBRACE . expressionsAndStatements RBRACE

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance                goto state 45
    argument                  goto state 50
    argumentsList             goto state 48
    assignExpression          goto state 40
    beginFor                  goto state 55
    debugging                 goto state 44
    expressionsAndStatements  goto state 321
    nonAssignExpression       goto state 39
    remover                   goto state 46
    selector                  goto state 42
    statement                 goto state 41
    stepping                  goto state 43

state 321 // SFUNC IDENT LBRACE FOR BOOLEAN LBRACE ';' [';']

  106 expressionsAndStatements: expressionsAndStatements . nonAssignExpression
  107 expressionsAndStatements: expressionsAndStatements . assignExpression
  108 expressionsAndStatements: expressionsAndStatements . statement
  109 expressionsAndStatements: expressionsAndStatements . selector
  110 expressionsAndStatements: expressionsAndStatements . stepping
  111 expressionsAndStatements: expressionsAndStatements . debugging
  112 expressionsAndStatements: expressionsAndStatements . affordance
  113 expressionsAndStatements: expressionsAndStatements . remover
  129 statement: beginFor argument LBRACE expressionsAndStatements . RBRACE

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    RBRACE     shift, and goto state 322
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance           goto state 314
    argument             goto state 50
    argumentsList        goto state 48
    assignExpression     goto state 309
    beginFor             goto state 55
    debugging            goto state 313
    nonAssignExpression  goto state 308
    remover              goto state 315
    selector             goto state 311
    statement            goto state 310
    stepping             goto state 312

state 322 // SFUNC IDENT LBRACE FOR BOOLEAN LBRACE ';' RBRACE

  129 statement: beginFor argument LBRACE expressionsAndStatements RBRACE .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 129 (statement)
    ADDR       reduce using rule 129 (statement)
    AFF        reduce using rule 129 (statement)
    BASICTYPE  reduce using rule 129 (statement)
    BOOLEAN    reduce using rule 129 (statement)
    BYTENUM    reduce using rule 129 (statement)
    DOUBLE     reduce using rule 129 (statement)
    DPROGRAM   reduce using rule 129 (statement)
    DSTACK     reduce using rule 129 (statement)
    DSTATE     reduce using rule 129 (statement)
    FLOAT      reduce using rule 129 (statement)
    FOR        reduce using rule 129 (statement)
    GOTO       reduce using rule 129 (statement)
    IDENT      reduce using rule 129 (statement)
    IF         reduce using rule 129 (statement)
    INFER      reduce using rule 129 (statement)
    INT        reduce using rule 129 (statement)
    LONG       reduce using rule 129 (statement)
    LPAREN     reduce using rule 129 (statement)
    NEW        reduce using rule 129 (statement)
    NOT        reduce using rule 129 (statement)
    RBRACE     reduce using rule 129 (statement)
    REM        reduce using rule 129 (statement)
    RETURN     reduce using rule 129 (statement)
    SFUNC      reduce using rule 129 (statement)
    SPACKAGE   reduce using rule 129 (statement)
    SSTRUCT    reduce using rule 129 (statement)
    STEP       reduce using rule 129 (statement)
    STRING     reduce using rule 129 (statement)
    TAG        reduce using rule 129 (statement)
    TSTEP      reduce using rule 129 (statement)
    VALUE      reduce using rule 129 (statement)
    VAR        reduce using rule 129 (statement)

state 323 // SFUNC IDENT LBRACE FOR VAR IDENT

  114 assignExpression: VAR IDENT . BASICTYPE definitionAssignment
  115 assignExpression: VAR IDENT . LBRACK RBRACK IDENT  // assoc %right, prec 15

    BASICTYPE  shift, and goto state 324
    LBRACK     shift, and goto state 325

state 324 // SFUNC IDENT LBRACE VAR IDENT BASICTYPE

  114 assignExpression: VAR IDENT BASICTYPE . definitionAssignment
   69 definitionAssignment: .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'           reduce using rule 69 (definitionAssignment)
    ADDR          reduce using rule 69 (definitionAssignment)
    AFF           reduce using rule 69 (definitionAssignment)
    ASSIGN        shift, and goto state 328
    BASICTYPE     reduce using rule 69 (definitionAssignment)
    BITANDEQ      shift, and goto state 338
    BITOREQ       shift, and goto state 340
    BITXOREQ      shift, and goto state 339
    BOOLEAN       reduce using rule 69 (definitionAssignment)
    BYTENUM       reduce using rule 69 (definitionAssignment)
    CASSIGN       shift, and goto state 329
    DIVEQ         shift, and goto state 333
    DOUBLE        reduce using rule 69 (definitionAssignment)
    DPROGRAM      reduce using rule 69 (definitionAssignment)
    DSTACK        reduce using rule 69 (definitionAssignment)
    DSTATE        reduce using rule 69 (definitionAssignment)
    EXPEQ         shift, and goto state 335
    FLOAT         reduce using rule 69 (definitionAssignment)
    FOR           reduce using rule 69 (definitionAssignment)
    GOTO          reduce using rule 69 (definitionAssignment)
    IDENT         reduce using rule 69 (definitionAssignment)
    IF            reduce using rule 69 (definitionAssignment)
    INFER         reduce using rule 69 (definitionAssignment)
    INT           reduce using rule 69 (definitionAssignment)
    LBRACE        reduce using rule 69 (definitionAssignment)
    LEFTSHIFTEQ   shift, and goto state 336
    LONG          reduce using rule 69 (definitionAssignment)
    LPAREN        reduce using rule 69 (definitionAssignment)
    MINUSEQ       shift, and goto state 331
    MULTEQ        shift, and goto state 332
    NEW           reduce using rule 69 (definitionAssignment)
    NOT           reduce using rule 69 (definitionAssignment)
    PLUSEQ        shift, and goto state 330
    RBRACE        reduce using rule 69 (definitionAssignment)
    REM           reduce using rule 69 (definitionAssignment)
    REMAINDEREQ   shift, and goto state 334
    RETURN        reduce using rule 69 (definitionAssignment)
    RIGHTSHIFTEQ  shift, and goto state 337
    SFUNC         reduce using rule 69 (definitionAssignment)
    SPACKAGE      reduce using rule 69 (definitionAssignment)
    SSTRUCT       reduce using rule 69 (definitionAssignment)
    STEP          reduce using rule 69 (definitionAssignment)
    STRING        reduce using rule 69 (definitionAssignment)
    TAG           reduce using rule 69 (definitionAssignment)
    TSTEP         reduce using rule 69 (definitionAssignment)
    VALUE         reduce using rule 69 (definitionAssignment)
    VAR           reduce using rule 69 (definitionAssignment)

    assignOperator        goto state 341
    definitionAssignment  goto state 342

state 325 // SFUNC IDENT LBRACE VAR IDENT LBRACK

  115 assignExpression: VAR IDENT LBRACK . RBRACK IDENT  // assoc %right, prec 15

    RBRACK  shift, and goto state 326

state 326 // SFUNC IDENT LBRACE VAR IDENT LBRACK RBRACK

  115 assignExpression: VAR IDENT LBRACK RBRACK . IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 327

state 327 // SFUNC IDENT LBRACE VAR IDENT LBRACK RBRACK IDENT

  115 assignExpression: VAR IDENT LBRACK RBRACK IDENT .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]  // assoc %right, prec 15

    ';'        reduce using rule 115 (assignExpression)
    ADDR       reduce using rule 115 (assignExpression)
    AFF        reduce using rule 115 (assignExpression)
    BASICTYPE  reduce using rule 115 (assignExpression)
    BOOLEAN    reduce using rule 115 (assignExpression)
    BYTENUM    reduce using rule 115 (assignExpression)
    DOUBLE     reduce using rule 115 (assignExpression)
    DPROGRAM   reduce using rule 115 (assignExpression)
    DSTACK     reduce using rule 115 (assignExpression)
    DSTATE     reduce using rule 115 (assignExpression)
    FLOAT      reduce using rule 115 (assignExpression)
    FOR        reduce using rule 115 (assignExpression)
    GOTO       reduce using rule 115 (assignExpression)
    IDENT      reduce using rule 115 (assignExpression)
    IF         reduce using rule 115 (assignExpression)
    INFER      reduce using rule 115 (assignExpression)
    INT        reduce using rule 115 (assignExpression)
    LBRACE     reduce using rule 115 (assignExpression)
    LONG       reduce using rule 115 (assignExpression)
    LPAREN     reduce using rule 115 (assignExpression)
    NEW        reduce using rule 115 (assignExpression)
    NOT        reduce using rule 115 (assignExpression)
    RBRACE     reduce using rule 115 (assignExpression)
    REM        reduce using rule 115 (assignExpression)
    RETURN     reduce using rule 115 (assignExpression)
    SFUNC      reduce using rule 115 (assignExpression)
    SPACKAGE   reduce using rule 115 (assignExpression)
    SSTRUCT    reduce using rule 115 (assignExpression)
    STEP       reduce using rule 115 (assignExpression)
    STRING     reduce using rule 115 (assignExpression)
    TAG        reduce using rule 115 (assignExpression)
    TSTEP      reduce using rule 115 (assignExpression)
    VALUE      reduce using rule 115 (assignExpression)
    VAR        reduce using rule 115 (assignExpression)

state 328 // VAR IDENT BASICTYPE ASSIGN

   55 assignOperator: ASSIGN .  [ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE]

    ADDR       reduce using rule 55 (assignOperator)
    BASICTYPE  reduce using rule 55 (assignOperator)
    BOOLEAN    reduce using rule 55 (assignOperator)
    BYTENUM    reduce using rule 55 (assignOperator)
    DOUBLE     reduce using rule 55 (assignOperator)
    FLOAT      reduce using rule 55 (assignOperator)
    IDENT      reduce using rule 55 (assignOperator)
    INFER      reduce using rule 55 (assignOperator)
    INT        reduce using rule 55 (assignOperator)
    LONG       reduce using rule 55 (assignOperator)
    LPAREN     reduce using rule 55 (assignOperator)
    NEW        reduce using rule 55 (assignOperator)
    NOT        reduce using rule 55 (assignOperator)
    STRING     reduce using rule 55 (assignOperator)
    VALUE      reduce using rule 55 (assignOperator)

state 329 // VAR IDENT BASICTYPE CASSIGN

   56 assignOperator: CASSIGN .  [ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE]

    ADDR       reduce using rule 56 (assignOperator)
    BASICTYPE  reduce using rule 56 (assignOperator)
    BOOLEAN    reduce using rule 56 (assignOperator)
    BYTENUM    reduce using rule 56 (assignOperator)
    DOUBLE     reduce using rule 56 (assignOperator)
    FLOAT      reduce using rule 56 (assignOperator)
    IDENT      reduce using rule 56 (assignOperator)
    INFER      reduce using rule 56 (assignOperator)
    INT        reduce using rule 56 (assignOperator)
    LONG       reduce using rule 56 (assignOperator)
    LPAREN     reduce using rule 56 (assignOperator)
    NEW        reduce using rule 56 (assignOperator)
    NOT        reduce using rule 56 (assignOperator)
    STRING     reduce using rule 56 (assignOperator)
    VALUE      reduce using rule 56 (assignOperator)

state 330 // VAR IDENT BASICTYPE PLUSEQ

   57 assignOperator: PLUSEQ .  [ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE]

    ADDR       reduce using rule 57 (assignOperator)
    BASICTYPE  reduce using rule 57 (assignOperator)
    BOOLEAN    reduce using rule 57 (assignOperator)
    BYTENUM    reduce using rule 57 (assignOperator)
    DOUBLE     reduce using rule 57 (assignOperator)
    FLOAT      reduce using rule 57 (assignOperator)
    IDENT      reduce using rule 57 (assignOperator)
    INFER      reduce using rule 57 (assignOperator)
    INT        reduce using rule 57 (assignOperator)
    LONG       reduce using rule 57 (assignOperator)
    LPAREN     reduce using rule 57 (assignOperator)
    NEW        reduce using rule 57 (assignOperator)
    NOT        reduce using rule 57 (assignOperator)
    STRING     reduce using rule 57 (assignOperator)
    VALUE      reduce using rule 57 (assignOperator)

state 331 // VAR IDENT BASICTYPE MINUSEQ

   58 assignOperator: MINUSEQ .  [ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE]

    ADDR       reduce using rule 58 (assignOperator)
    BASICTYPE  reduce using rule 58 (assignOperator)
    BOOLEAN    reduce using rule 58 (assignOperator)
    BYTENUM    reduce using rule 58 (assignOperator)
    DOUBLE     reduce using rule 58 (assignOperator)
    FLOAT      reduce using rule 58 (assignOperator)
    IDENT      reduce using rule 58 (assignOperator)
    INFER      reduce using rule 58 (assignOperator)
    INT        reduce using rule 58 (assignOperator)
    LONG       reduce using rule 58 (assignOperator)
    LPAREN     reduce using rule 58 (assignOperator)
    NEW        reduce using rule 58 (assignOperator)
    NOT        reduce using rule 58 (assignOperator)
    STRING     reduce using rule 58 (assignOperator)
    VALUE      reduce using rule 58 (assignOperator)

state 332 // VAR IDENT BASICTYPE MULTEQ

   59 assignOperator: MULTEQ .  [ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE]

    ADDR       reduce using rule 59 (assignOperator)
    BASICTYPE  reduce using rule 59 (assignOperator)
    BOOLEAN    reduce using rule 59 (assignOperator)
    BYTENUM    reduce using rule 59 (assignOperator)
    DOUBLE     reduce using rule 59 (assignOperator)
    FLOAT      reduce using rule 59 (assignOperator)
    IDENT      reduce using rule 59 (assignOperator)
    INFER      reduce using rule 59 (assignOperator)
    INT        reduce using rule 59 (assignOperator)
    LONG       reduce using rule 59 (assignOperator)
    LPAREN     reduce using rule 59 (assignOperator)
    NEW        reduce using rule 59 (assignOperator)
    NOT        reduce using rule 59 (assignOperator)
    STRING     reduce using rule 59 (assignOperator)
    VALUE      reduce using rule 59 (assignOperator)

state 333 // VAR IDENT BASICTYPE DIVEQ

   60 assignOperator: DIVEQ .  [ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE]

    ADDR       reduce using rule 60 (assignOperator)
    BASICTYPE  reduce using rule 60 (assignOperator)
    BOOLEAN    reduce using rule 60 (assignOperator)
    BYTENUM    reduce using rule 60 (assignOperator)
    DOUBLE     reduce using rule 60 (assignOperator)
    FLOAT      reduce using rule 60 (assignOperator)
    IDENT      reduce using rule 60 (assignOperator)
    INFER      reduce using rule 60 (assignOperator)
    INT        reduce using rule 60 (assignOperator)
    LONG       reduce using rule 60 (assignOperator)
    LPAREN     reduce using rule 60 (assignOperator)
    NEW        reduce using rule 60 (assignOperator)
    NOT        reduce using rule 60 (assignOperator)
    STRING     reduce using rule 60 (assignOperator)
    VALUE      reduce using rule 60 (assignOperator)

state 334 // VAR IDENT BASICTYPE REMAINDEREQ

   61 assignOperator: REMAINDEREQ .  [ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE]

    ADDR       reduce using rule 61 (assignOperator)
    BASICTYPE  reduce using rule 61 (assignOperator)
    BOOLEAN    reduce using rule 61 (assignOperator)
    BYTENUM    reduce using rule 61 (assignOperator)
    DOUBLE     reduce using rule 61 (assignOperator)
    FLOAT      reduce using rule 61 (assignOperator)
    IDENT      reduce using rule 61 (assignOperator)
    INFER      reduce using rule 61 (assignOperator)
    INT        reduce using rule 61 (assignOperator)
    LONG       reduce using rule 61 (assignOperator)
    LPAREN     reduce using rule 61 (assignOperator)
    NEW        reduce using rule 61 (assignOperator)
    NOT        reduce using rule 61 (assignOperator)
    STRING     reduce using rule 61 (assignOperator)
    VALUE      reduce using rule 61 (assignOperator)

state 335 // VAR IDENT BASICTYPE EXPEQ

   62 assignOperator: EXPEQ .  [ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE]

    ADDR       reduce using rule 62 (assignOperator)
    BASICTYPE  reduce using rule 62 (assignOperator)
    BOOLEAN    reduce using rule 62 (assignOperator)
    BYTENUM    reduce using rule 62 (assignOperator)
    DOUBLE     reduce using rule 62 (assignOperator)
    FLOAT      reduce using rule 62 (assignOperator)
    IDENT      reduce using rule 62 (assignOperator)
    INFER      reduce using rule 62 (assignOperator)
    INT        reduce using rule 62 (assignOperator)
    LONG       reduce using rule 62 (assignOperator)
    LPAREN     reduce using rule 62 (assignOperator)
    NEW        reduce using rule 62 (assignOperator)
    NOT        reduce using rule 62 (assignOperator)
    STRING     reduce using rule 62 (assignOperator)
    VALUE      reduce using rule 62 (assignOperator)

state 336 // VAR IDENT BASICTYPE LEFTSHIFTEQ

   63 assignOperator: LEFTSHIFTEQ .  [ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE]

    ADDR       reduce using rule 63 (assignOperator)
    BASICTYPE  reduce using rule 63 (assignOperator)
    BOOLEAN    reduce using rule 63 (assignOperator)
    BYTENUM    reduce using rule 63 (assignOperator)
    DOUBLE     reduce using rule 63 (assignOperator)
    FLOAT      reduce using rule 63 (assignOperator)
    IDENT      reduce using rule 63 (assignOperator)
    INFER      reduce using rule 63 (assignOperator)
    INT        reduce using rule 63 (assignOperator)
    LONG       reduce using rule 63 (assignOperator)
    LPAREN     reduce using rule 63 (assignOperator)
    NEW        reduce using rule 63 (assignOperator)
    NOT        reduce using rule 63 (assignOperator)
    STRING     reduce using rule 63 (assignOperator)
    VALUE      reduce using rule 63 (assignOperator)

state 337 // VAR IDENT BASICTYPE RIGHTSHIFTEQ

   64 assignOperator: RIGHTSHIFTEQ .  [ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE]

    ADDR       reduce using rule 64 (assignOperator)
    BASICTYPE  reduce using rule 64 (assignOperator)
    BOOLEAN    reduce using rule 64 (assignOperator)
    BYTENUM    reduce using rule 64 (assignOperator)
    DOUBLE     reduce using rule 64 (assignOperator)
    FLOAT      reduce using rule 64 (assignOperator)
    IDENT      reduce using rule 64 (assignOperator)
    INFER      reduce using rule 64 (assignOperator)
    INT        reduce using rule 64 (assignOperator)
    LONG       reduce using rule 64 (assignOperator)
    LPAREN     reduce using rule 64 (assignOperator)
    NEW        reduce using rule 64 (assignOperator)
    NOT        reduce using rule 64 (assignOperator)
    STRING     reduce using rule 64 (assignOperator)
    VALUE      reduce using rule 64 (assignOperator)

state 338 // VAR IDENT BASICTYPE BITANDEQ

   65 assignOperator: BITANDEQ .  [ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE]

    ADDR       reduce using rule 65 (assignOperator)
    BASICTYPE  reduce using rule 65 (assignOperator)
    BOOLEAN    reduce using rule 65 (assignOperator)
    BYTENUM    reduce using rule 65 (assignOperator)
    DOUBLE     reduce using rule 65 (assignOperator)
    FLOAT      reduce using rule 65 (assignOperator)
    IDENT      reduce using rule 65 (assignOperator)
    INFER      reduce using rule 65 (assignOperator)
    INT        reduce using rule 65 (assignOperator)
    LONG       reduce using rule 65 (assignOperator)
    LPAREN     reduce using rule 65 (assignOperator)
    NEW        reduce using rule 65 (assignOperator)
    NOT        reduce using rule 65 (assignOperator)
    STRING     reduce using rule 65 (assignOperator)
    VALUE      reduce using rule 65 (assignOperator)

state 339 // VAR IDENT BASICTYPE BITXOREQ

   66 assignOperator: BITXOREQ .  [ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE]

    ADDR       reduce using rule 66 (assignOperator)
    BASICTYPE  reduce using rule 66 (assignOperator)
    BOOLEAN    reduce using rule 66 (assignOperator)
    BYTENUM    reduce using rule 66 (assignOperator)
    DOUBLE     reduce using rule 66 (assignOperator)
    FLOAT      reduce using rule 66 (assignOperator)
    IDENT      reduce using rule 66 (assignOperator)
    INFER      reduce using rule 66 (assignOperator)
    INT        reduce using rule 66 (assignOperator)
    LONG       reduce using rule 66 (assignOperator)
    LPAREN     reduce using rule 66 (assignOperator)
    NEW        reduce using rule 66 (assignOperator)
    NOT        reduce using rule 66 (assignOperator)
    STRING     reduce using rule 66 (assignOperator)
    VALUE      reduce using rule 66 (assignOperator)

state 340 // VAR IDENT BASICTYPE BITOREQ

   67 assignOperator: BITOREQ .  [ADDR, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, FLOAT, IDENT, INFER, INT, LONG, LPAREN, NEW, NOT, STRING, VALUE]

    ADDR       reduce using rule 67 (assignOperator)
    BASICTYPE  reduce using rule 67 (assignOperator)
    BOOLEAN    reduce using rule 67 (assignOperator)
    BYTENUM    reduce using rule 67 (assignOperator)
    DOUBLE     reduce using rule 67 (assignOperator)
    FLOAT      reduce using rule 67 (assignOperator)
    IDENT      reduce using rule 67 (assignOperator)
    INFER      reduce using rule 67 (assignOperator)
    INT        reduce using rule 67 (assignOperator)
    LONG       reduce using rule 67 (assignOperator)
    LPAREN     reduce using rule 67 (assignOperator)
    NEW        reduce using rule 67 (assignOperator)
    NOT        reduce using rule 67 (assignOperator)
    STRING     reduce using rule 67 (assignOperator)
    VALUE      reduce using rule 67 (assignOperator)

state 341 // VAR IDENT BASICTYPE ASSIGN [ADDR]

   70 definitionAssignment: assignOperator . argument
   71 definitionAssignment: assignOperator . ADDR argument
   72 definitionAssignment: assignOperator . VALUE argument

    ADDR       shift, and goto state 344
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65
    VALUE      shift, and goto state 345

    argument             goto state 343
    nonAssignExpression  goto state 196

state 342 // SFUNC IDENT LBRACE VAR IDENT BASICTYPE [';']

  114 assignExpression: VAR IDENT BASICTYPE definitionAssignment .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 114 (assignExpression)
    ADDR       reduce using rule 114 (assignExpression)
    AFF        reduce using rule 114 (assignExpression)
    BASICTYPE  reduce using rule 114 (assignExpression)
    BOOLEAN    reduce using rule 114 (assignExpression)
    BYTENUM    reduce using rule 114 (assignExpression)
    DOUBLE     reduce using rule 114 (assignExpression)
    DPROGRAM   reduce using rule 114 (assignExpression)
    DSTACK     reduce using rule 114 (assignExpression)
    DSTATE     reduce using rule 114 (assignExpression)
    FLOAT      reduce using rule 114 (assignExpression)
    FOR        reduce using rule 114 (assignExpression)
    GOTO       reduce using rule 114 (assignExpression)
    IDENT      reduce using rule 114 (assignExpression)
    IF         reduce using rule 114 (assignExpression)
    INFER      reduce using rule 114 (assignExpression)
    INT        reduce using rule 114 (assignExpression)
    LBRACE     reduce using rule 114 (assignExpression)
    LONG       reduce using rule 114 (assignExpression)
    LPAREN     reduce using rule 114 (assignExpression)
    NEW        reduce using rule 114 (assignExpression)
    NOT        reduce using rule 114 (assignExpression)
    RBRACE     reduce using rule 114 (assignExpression)
    REM        reduce using rule 114 (assignExpression)
    RETURN     reduce using rule 114 (assignExpression)
    SFUNC      reduce using rule 114 (assignExpression)
    SPACKAGE   reduce using rule 114 (assignExpression)
    SSTRUCT    reduce using rule 114 (assignExpression)
    STEP       reduce using rule 114 (assignExpression)
    STRING     reduce using rule 114 (assignExpression)
    TAG        reduce using rule 114 (assignExpression)
    TSTEP      reduce using rule 114 (assignExpression)
    VALUE      reduce using rule 114 (assignExpression)
    VAR        reduce using rule 114 (assignExpression)

state 343 // VAR IDENT BASICTYPE ASSIGN BOOLEAN [$end]

   70 definitionAssignment: assignOperator argument .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]
  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end        reduce using rule 70 (definitionAssignment)
    ';'         reduce using rule 70 (definitionAssignment)
    ADDR        reduce using rule 70 (definitionAssignment)
    AFF         reduce using rule 70 (definitionAssignment)
    AND         shift, and goto state 112
    BASICTYPE   reduce using rule 70 (definitionAssignment)
    BITAND      shift, and goto state 113
    BITCLEAR    shift, and goto state 116
    BITOR       shift, and goto state 114
    BITXOR      shift, and goto state 115
    BOOLEAN     reduce using rule 70 (definitionAssignment)
    BYTENUM     reduce using rule 70 (definitionAssignment)
    DIV         shift, and goto state 100
    DOUBLE      reduce using rule 70 (definitionAssignment)
    DPROGRAM    reduce using rule 70 (definitionAssignment)
    DSTACK      reduce using rule 70 (definitionAssignment)
    DSTATE      reduce using rule 70 (definitionAssignment)
    EQUAL       shift, and goto state 105
    EXP         shift, and goto state 104
    FLOAT       reduce using rule 70 (definitionAssignment)
    FOR         reduce using rule 70 (definitionAssignment)
    FUNC        reduce using rule 70 (definitionAssignment)
    GOTO        reduce using rule 70 (definitionAssignment)
    GTHAN       shift, and goto state 107
    GTHANEQ     shift, and goto state 108
    IDENT       reduce using rule 70 (definitionAssignment)
    IF          reduce using rule 70 (definitionAssignment)
    IMPORT      reduce using rule 70 (definitionAssignment)
    INFER       reduce using rule 70 (definitionAssignment)
    INT         reduce using rule 70 (definitionAssignment)
    LBRACE      reduce using rule 70 (definitionAssignment)
    LEFTSHIFT   shift, and goto state 102
    LONG        reduce using rule 70 (definitionAssignment)
    LPAREN      reduce using rule 70 (definitionAssignment)
    LTHAN       shift, and goto state 109
    LTHANEQ     shift, and goto state 110
    MINUS       shift, and goto state 98
    MINUSMINUS  shift, and goto state 96
    MULT        shift, and goto state 99
    NEW         reduce using rule 70 (definitionAssignment)
    NOT         reduce using rule 70 (definitionAssignment)
    OR          shift, and goto state 111
    PACKAGE     reduce using rule 70 (definitionAssignment)
    PLUS        shift, and goto state 97
    PLUSPLUS    shift, and goto state 95
    RBRACE      reduce using rule 70 (definitionAssignment)
    REM         reduce using rule 70 (definitionAssignment)
    REMAINDER   shift, and goto state 101
    RETURN      reduce using rule 70 (definitionAssignment)
    RIGHTSHIFT  shift, and goto state 103
    SFUNC       reduce using rule 70 (definitionAssignment)
    SPACKAGE    reduce using rule 70 (definitionAssignment)
    SSTRUCT     reduce using rule 70 (definitionAssignment)
    STEP        reduce using rule 70 (definitionAssignment)
    STRING      reduce using rule 70 (definitionAssignment)
    TAG         reduce using rule 70 (definitionAssignment)
    TSTEP       reduce using rule 70 (definitionAssignment)
    TYPSTRUCT   reduce using rule 70 (definitionAssignment)
    UNEQUAL     shift, and goto state 106
    VALUE       reduce using rule 70 (definitionAssignment)
    VAR         reduce using rule 70 (definitionAssignment)

state 344 // VAR IDENT BASICTYPE ASSIGN ADDR

   71 definitionAssignment: assignOperator ADDR . argument

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 347
    nonAssignExpression  goto state 196

state 345 // VAR IDENT BASICTYPE ASSIGN VALUE

   72 definitionAssignment: assignOperator VALUE . argument

    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65

    argument             goto state 346
    nonAssignExpression  goto state 196

state 346 // VAR IDENT BASICTYPE ASSIGN VALUE BOOLEAN [$end]

   72 definitionAssignment: assignOperator VALUE argument .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]
  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end        reduce using rule 72 (definitionAssignment)
    ';'         reduce using rule 72 (definitionAssignment)
    ADDR        reduce using rule 72 (definitionAssignment)
    AFF         reduce using rule 72 (definitionAssignment)
    AND         shift, and goto state 112
    BASICTYPE   reduce using rule 72 (definitionAssignment)
    BITAND      shift, and goto state 113
    BITCLEAR    shift, and goto state 116
    BITOR       shift, and goto state 114
    BITXOR      shift, and goto state 115
    BOOLEAN     reduce using rule 72 (definitionAssignment)
    BYTENUM     reduce using rule 72 (definitionAssignment)
    DIV         shift, and goto state 100
    DOUBLE      reduce using rule 72 (definitionAssignment)
    DPROGRAM    reduce using rule 72 (definitionAssignment)
    DSTACK      reduce using rule 72 (definitionAssignment)
    DSTATE      reduce using rule 72 (definitionAssignment)
    EQUAL       shift, and goto state 105
    EXP         shift, and goto state 104
    FLOAT       reduce using rule 72 (definitionAssignment)
    FOR         reduce using rule 72 (definitionAssignment)
    FUNC        reduce using rule 72 (definitionAssignment)
    GOTO        reduce using rule 72 (definitionAssignment)
    GTHAN       shift, and goto state 107
    GTHANEQ     shift, and goto state 108
    IDENT       reduce using rule 72 (definitionAssignment)
    IF          reduce using rule 72 (definitionAssignment)
    IMPORT      reduce using rule 72 (definitionAssignment)
    INFER       reduce using rule 72 (definitionAssignment)
    INT         reduce using rule 72 (definitionAssignment)
    LBRACE      reduce using rule 72 (definitionAssignment)
    LEFTSHIFT   shift, and goto state 102
    LONG        reduce using rule 72 (definitionAssignment)
    LPAREN      reduce using rule 72 (definitionAssignment)
    LTHAN       shift, and goto state 109
    LTHANEQ     shift, and goto state 110
    MINUS       shift, and goto state 98
    MINUSMINUS  shift, and goto state 96
    MULT        shift, and goto state 99
    NEW         reduce using rule 72 (definitionAssignment)
    NOT         reduce using rule 72 (definitionAssignment)
    OR          shift, and goto state 111
    PACKAGE     reduce using rule 72 (definitionAssignment)
    PLUS        shift, and goto state 97
    PLUSPLUS    shift, and goto state 95
    RBRACE      reduce using rule 72 (definitionAssignment)
    REM         reduce using rule 72 (definitionAssignment)
    REMAINDER   shift, and goto state 101
    RETURN      reduce using rule 72 (definitionAssignment)
    RIGHTSHIFT  shift, and goto state 103
    SFUNC       reduce using rule 72 (definitionAssignment)
    SPACKAGE    reduce using rule 72 (definitionAssignment)
    SSTRUCT     reduce using rule 72 (definitionAssignment)
    STEP        reduce using rule 72 (definitionAssignment)
    STRING      reduce using rule 72 (definitionAssignment)
    TAG         reduce using rule 72 (definitionAssignment)
    TSTEP       reduce using rule 72 (definitionAssignment)
    TYPSTRUCT   reduce using rule 72 (definitionAssignment)
    UNEQUAL     shift, and goto state 106
    VALUE       reduce using rule 72 (definitionAssignment)
    VAR         reduce using rule 72 (definitionAssignment)

state 347 // VAR IDENT BASICTYPE ASSIGN ADDR BOOLEAN [$end]

   71 definitionAssignment: assignOperator ADDR argument .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LBRACE, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]
  118 nonAssignExpression: argument . PLUSPLUS  // assoc %left, prec 13
  119 nonAssignExpression: argument . MINUSMINUS  // assoc %left, prec 13
  182 argument: argument . PLUS argument  // assoc %left, prec 10
  184 argument: argument . PLUS nonAssignExpression  // assoc %left, prec 10
  186 argument: argument . MINUS argument  // assoc %left, prec 10
  188 argument: argument . MINUS nonAssignExpression  // assoc %left, prec 10
  190 argument: argument . MULT argument  // assoc %left, prec 11
  192 argument: argument . MULT nonAssignExpression  // assoc %left, prec 11
  194 argument: argument . DIV argument  // assoc %left, prec 11
  196 argument: argument . DIV nonAssignExpression  // assoc %left, prec 11
  198 argument: argument . REMAINDER argument  // assoc %left, prec 11
  200 argument: argument . REMAINDER nonAssignExpression  // assoc %left, prec 11
  202 argument: argument . LEFTSHIFT argument  // assoc %left, prec 9
  204 argument: argument . LEFTSHIFT nonAssignExpression  // assoc %left, prec 9
  206 argument: argument . RIGHTSHIFT argument  // assoc %left, prec 9
  208 argument: argument . RIGHTSHIFT nonAssignExpression  // assoc %left, prec 9
  210 argument: argument . EXP argument  // assoc %left, prec 12
  212 argument: argument . EXP nonAssignExpression  // assoc %left, prec 12
  214 argument: argument . EQUAL argument  // assoc %left, prec 7
  216 argument: argument . EQUAL nonAssignExpression  // assoc %left, prec 7
  218 argument: argument . UNEQUAL argument  // assoc %left, prec 7
  220 argument: argument . UNEQUAL nonAssignExpression  // assoc %left, prec 7
  222 argument: argument . GTHAN argument  // assoc %left, prec 8
  224 argument: argument . GTHAN nonAssignExpression  // assoc %left, prec 8
  226 argument: argument . GTHANEQ argument  // assoc %left, prec 8
  228 argument: argument . GTHANEQ nonAssignExpression  // assoc %left, prec 8
  230 argument: argument . LTHAN argument  // assoc %left, prec 8
  232 argument: argument . LTHAN nonAssignExpression  // assoc %left, prec 8
  234 argument: argument . LTHANEQ argument  // assoc %left, prec 8
  236 argument: argument . LTHANEQ nonAssignExpression  // assoc %left, prec 8
  238 argument: argument . OR argument  // assoc %left, prec 1
  240 argument: argument . OR nonAssignExpression  // assoc %left, prec 1
  242 argument: argument . AND argument  // assoc %left, prec 2
  244 argument: argument . AND nonAssignExpression  // assoc %left, prec 2
  246 argument: argument . BITAND argument  // assoc %left, prec 6
  248 argument: argument . BITAND nonAssignExpression  // assoc %left, prec 6
  250 argument: argument . BITOR argument  // assoc %left, prec 4
  252 argument: argument . BITOR nonAssignExpression  // assoc %left, prec 4
  254 argument: argument . BITXOR argument  // assoc %left, prec 5
  256 argument: argument . BITXOR nonAssignExpression  // assoc %left, prec 5
  258 argument: argument . BITCLEAR argument  // assoc %left, prec 3
  260 argument: argument . BITCLEAR nonAssignExpression  // assoc %left, prec 3

    $end        reduce using rule 71 (definitionAssignment)
    ';'         reduce using rule 71 (definitionAssignment)
    ADDR        reduce using rule 71 (definitionAssignment)
    AFF         reduce using rule 71 (definitionAssignment)
    AND         shift, and goto state 112
    BASICTYPE   reduce using rule 71 (definitionAssignment)
    BITAND      shift, and goto state 113
    BITCLEAR    shift, and goto state 116
    BITOR       shift, and goto state 114
    BITXOR      shift, and goto state 115
    BOOLEAN     reduce using rule 71 (definitionAssignment)
    BYTENUM     reduce using rule 71 (definitionAssignment)
    DIV         shift, and goto state 100
    DOUBLE      reduce using rule 71 (definitionAssignment)
    DPROGRAM    reduce using rule 71 (definitionAssignment)
    DSTACK      reduce using rule 71 (definitionAssignment)
    DSTATE      reduce using rule 71 (definitionAssignment)
    EQUAL       shift, and goto state 105
    EXP         shift, and goto state 104
    FLOAT       reduce using rule 71 (definitionAssignment)
    FOR         reduce using rule 71 (definitionAssignment)
    FUNC        reduce using rule 71 (definitionAssignment)
    GOTO        reduce using rule 71 (definitionAssignment)
    GTHAN       shift, and goto state 107
    GTHANEQ     shift, and goto state 108
    IDENT       reduce using rule 71 (definitionAssignment)
    IF          reduce using rule 71 (definitionAssignment)
    IMPORT      reduce using rule 71 (definitionAssignment)
    INFER       reduce using rule 71 (definitionAssignment)
    INT         reduce using rule 71 (definitionAssignment)
    LBRACE      reduce using rule 71 (definitionAssignment)
    LEFTSHIFT   shift, and goto state 102
    LONG        reduce using rule 71 (definitionAssignment)
    LPAREN      reduce using rule 71 (definitionAssignment)
    LTHAN       shift, and goto state 109
    LTHANEQ     shift, and goto state 110
    MINUS       shift, and goto state 98
    MINUSMINUS  shift, and goto state 96
    MULT        shift, and goto state 99
    NEW         reduce using rule 71 (definitionAssignment)
    NOT         reduce using rule 71 (definitionAssignment)
    OR          shift, and goto state 111
    PACKAGE     reduce using rule 71 (definitionAssignment)
    PLUS        shift, and goto state 97
    PLUSPLUS    shift, and goto state 95
    RBRACE      reduce using rule 71 (definitionAssignment)
    REM         reduce using rule 71 (definitionAssignment)
    REMAINDER   shift, and goto state 101
    RETURN      reduce using rule 71 (definitionAssignment)
    RIGHTSHIFT  shift, and goto state 103
    SFUNC       reduce using rule 71 (definitionAssignment)
    SPACKAGE    reduce using rule 71 (definitionAssignment)
    SSTRUCT     reduce using rule 71 (definitionAssignment)
    STEP        reduce using rule 71 (definitionAssignment)
    STRING      reduce using rule 71 (definitionAssignment)
    TAG         reduce using rule 71 (definitionAssignment)
    TSTEP       reduce using rule 71 (definitionAssignment)
    TYPSTRUCT   reduce using rule 71 (definitionAssignment)
    UNEQUAL     shift, and goto state 106
    VALUE       reduce using rule 71 (definitionAssignment)
    VAR         reduce using rule 71 (definitionAssignment)

state 348 // SFUNC IDENT LBRACE IF BOOLEAN [LBRACE]

  127 statement: IF conditionControl . LBRACE expressionsAndStatements RBRACE elseStatement

    LBRACE  shift, and goto state 349

state 349 // SFUNC IDENT LBRACE IF BOOLEAN LBRACE

  127 statement: IF conditionControl LBRACE . expressionsAndStatements RBRACE elseStatement

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance                goto state 45
    argument                  goto state 50
    argumentsList             goto state 48
    assignExpression          goto state 40
    beginFor                  goto state 55
    debugging                 goto state 44
    expressionsAndStatements  goto state 350
    nonAssignExpression       goto state 39
    remover                   goto state 46
    selector                  goto state 42
    statement                 goto state 41
    stepping                  goto state 43

state 350 // SFUNC IDENT LBRACE IF BOOLEAN LBRACE ';' [';']

  106 expressionsAndStatements: expressionsAndStatements . nonAssignExpression
  107 expressionsAndStatements: expressionsAndStatements . assignExpression
  108 expressionsAndStatements: expressionsAndStatements . statement
  109 expressionsAndStatements: expressionsAndStatements . selector
  110 expressionsAndStatements: expressionsAndStatements . stepping
  111 expressionsAndStatements: expressionsAndStatements . debugging
  112 expressionsAndStatements: expressionsAndStatements . affordance
  113 expressionsAndStatements: expressionsAndStatements . remover
  127 statement: IF conditionControl LBRACE expressionsAndStatements . RBRACE elseStatement

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    RBRACE     shift, and goto state 351
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance           goto state 314
    argument             goto state 50
    argumentsList        goto state 48
    assignExpression     goto state 309
    beginFor             goto state 55
    debugging            goto state 313
    nonAssignExpression  goto state 308
    remover              goto state 315
    selector             goto state 311
    statement            goto state 310
    stepping             goto state 312

state 351 // SFUNC IDENT LBRACE IF BOOLEAN LBRACE ';' RBRACE

  127 statement: IF conditionControl LBRACE expressionsAndStatements RBRACE . elseStatement
  136 elseStatement: .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 136 (elseStatement)
    ADDR       reduce using rule 136 (elseStatement)
    AFF        reduce using rule 136 (elseStatement)
    BASICTYPE  reduce using rule 136 (elseStatement)
    BOOLEAN    reduce using rule 136 (elseStatement)
    BYTENUM    reduce using rule 136 (elseStatement)
    DOUBLE     reduce using rule 136 (elseStatement)
    DPROGRAM   reduce using rule 136 (elseStatement)
    DSTACK     reduce using rule 136 (elseStatement)
    DSTATE     reduce using rule 136 (elseStatement)
    ELSE       shift, and goto state 353
    FLOAT      reduce using rule 136 (elseStatement)
    FOR        reduce using rule 136 (elseStatement)
    GOTO       reduce using rule 136 (elseStatement)
    IDENT      reduce using rule 136 (elseStatement)
    IF         reduce using rule 136 (elseStatement)
    INFER      reduce using rule 136 (elseStatement)
    INT        reduce using rule 136 (elseStatement)
    LONG       reduce using rule 136 (elseStatement)
    LPAREN     reduce using rule 136 (elseStatement)
    NEW        reduce using rule 136 (elseStatement)
    NOT        reduce using rule 136 (elseStatement)
    RBRACE     reduce using rule 136 (elseStatement)
    REM        reduce using rule 136 (elseStatement)
    RETURN     reduce using rule 136 (elseStatement)
    SFUNC      reduce using rule 136 (elseStatement)
    SPACKAGE   reduce using rule 136 (elseStatement)
    SSTRUCT    reduce using rule 136 (elseStatement)
    STEP       reduce using rule 136 (elseStatement)
    STRING     reduce using rule 136 (elseStatement)
    TAG        reduce using rule 136 (elseStatement)
    TSTEP      reduce using rule 136 (elseStatement)
    VALUE      reduce using rule 136 (elseStatement)
    VAR        reduce using rule 136 (elseStatement)

    elseStatement  goto state 352

state 352 // SFUNC IDENT LBRACE IF BOOLEAN LBRACE ';' RBRACE [';']

  127 statement: IF conditionControl LBRACE expressionsAndStatements RBRACE elseStatement .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 127 (statement)
    ADDR       reduce using rule 127 (statement)
    AFF        reduce using rule 127 (statement)
    BASICTYPE  reduce using rule 127 (statement)
    BOOLEAN    reduce using rule 127 (statement)
    BYTENUM    reduce using rule 127 (statement)
    DOUBLE     reduce using rule 127 (statement)
    DPROGRAM   reduce using rule 127 (statement)
    DSTACK     reduce using rule 127 (statement)
    DSTATE     reduce using rule 127 (statement)
    FLOAT      reduce using rule 127 (statement)
    FOR        reduce using rule 127 (statement)
    GOTO       reduce using rule 127 (statement)
    IDENT      reduce using rule 127 (statement)
    IF         reduce using rule 127 (statement)
    INFER      reduce using rule 127 (statement)
    INT        reduce using rule 127 (statement)
    LONG       reduce using rule 127 (statement)
    LPAREN     reduce using rule 127 (statement)
    NEW        reduce using rule 127 (statement)
    NOT        reduce using rule 127 (statement)
    RBRACE     reduce using rule 127 (statement)
    REM        reduce using rule 127 (statement)
    RETURN     reduce using rule 127 (statement)
    SFUNC      reduce using rule 127 (statement)
    SPACKAGE   reduce using rule 127 (statement)
    SSTRUCT    reduce using rule 127 (statement)
    STEP       reduce using rule 127 (statement)
    STRING     reduce using rule 127 (statement)
    TAG        reduce using rule 127 (statement)
    TSTEP      reduce using rule 127 (statement)
    VALUE      reduce using rule 127 (statement)
    VAR        reduce using rule 127 (statement)

state 353 // SFUNC IDENT LBRACE IF BOOLEAN LBRACE ';' RBRACE ELSE

  137 elseStatement: ELSE . LBRACE expressionsAndStatements RBRACE

    LBRACE  shift, and goto state 354

state 354 // SFUNC IDENT LBRACE IF BOOLEAN LBRACE ';' RBRACE ELSE LBRACE

  137 elseStatement: ELSE LBRACE . expressionsAndStatements RBRACE

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance                goto state 45
    argument                  goto state 50
    argumentsList             goto state 48
    assignExpression          goto state 40
    beginFor                  goto state 55
    debugging                 goto state 44
    expressionsAndStatements  goto state 355
    nonAssignExpression       goto state 39
    remover                   goto state 46
    selector                  goto state 42
    statement                 goto state 41
    stepping                  goto state 43

state 355 // SFUNC IDENT LBRACE IF BOOLEAN LBRACE ';' RBRACE ELSE LBRACE ';' [';']

  106 expressionsAndStatements: expressionsAndStatements . nonAssignExpression
  107 expressionsAndStatements: expressionsAndStatements . assignExpression
  108 expressionsAndStatements: expressionsAndStatements . statement
  109 expressionsAndStatements: expressionsAndStatements . selector
  110 expressionsAndStatements: expressionsAndStatements . stepping
  111 expressionsAndStatements: expressionsAndStatements . debugging
  112 expressionsAndStatements: expressionsAndStatements . affordance
  113 expressionsAndStatements: expressionsAndStatements . remover
  137 elseStatement: ELSE LBRACE expressionsAndStatements . RBRACE

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    RBRACE     shift, and goto state 356
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance           goto state 314
    argument             goto state 50
    argumentsList        goto state 48
    assignExpression     goto state 309
    beginFor             goto state 55
    debugging            goto state 313
    nonAssignExpression  goto state 308
    remover              goto state 315
    selector             goto state 311
    statement            goto state 310
    stepping             goto state 312

state 356 // SFUNC IDENT LBRACE IF BOOLEAN LBRACE ';' RBRACE ELSE LBRACE ';' RBRACE

  137 elseStatement: ELSE LBRACE expressionsAndStatements RBRACE .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 137 (elseStatement)
    ADDR       reduce using rule 137 (elseStatement)
    AFF        reduce using rule 137 (elseStatement)
    BASICTYPE  reduce using rule 137 (elseStatement)
    BOOLEAN    reduce using rule 137 (elseStatement)
    BYTENUM    reduce using rule 137 (elseStatement)
    DOUBLE     reduce using rule 137 (elseStatement)
    DPROGRAM   reduce using rule 137 (elseStatement)
    DSTACK     reduce using rule 137 (elseStatement)
    DSTATE     reduce using rule 137 (elseStatement)
    FLOAT      reduce using rule 137 (elseStatement)
    FOR        reduce using rule 137 (elseStatement)
    GOTO       reduce using rule 137 (elseStatement)
    IDENT      reduce using rule 137 (elseStatement)
    IF         reduce using rule 137 (elseStatement)
    INFER      reduce using rule 137 (elseStatement)
    INT        reduce using rule 137 (elseStatement)
    LONG       reduce using rule 137 (elseStatement)
    LPAREN     reduce using rule 137 (elseStatement)
    NEW        reduce using rule 137 (elseStatement)
    NOT        reduce using rule 137 (elseStatement)
    RBRACE     reduce using rule 137 (elseStatement)
    REM        reduce using rule 137 (elseStatement)
    RETURN     reduce using rule 137 (elseStatement)
    SFUNC      reduce using rule 137 (elseStatement)
    SPACKAGE   reduce using rule 137 (elseStatement)
    SSTRUCT    reduce using rule 137 (elseStatement)
    STEP       reduce using rule 137 (elseStatement)
    STRING     reduce using rule 137 (elseStatement)
    TAG        reduce using rule 137 (elseStatement)
    TSTEP      reduce using rule 137 (elseStatement)
    VALUE      reduce using rule 137 (elseStatement)
    VAR        reduce using rule 137 (elseStatement)

state 357 // SFUNC IDENT LBRACE GOTO IDENT

  126 statement: GOTO IDENT .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]  // assoc %right, prec 15

    ';'        reduce using rule 126 (statement)
    ADDR       reduce using rule 126 (statement)
    AFF        reduce using rule 126 (statement)
    BASICTYPE  reduce using rule 126 (statement)
    BOOLEAN    reduce using rule 126 (statement)
    BYTENUM    reduce using rule 126 (statement)
    DOUBLE     reduce using rule 126 (statement)
    DPROGRAM   reduce using rule 126 (statement)
    DSTACK     reduce using rule 126 (statement)
    DSTATE     reduce using rule 126 (statement)
    FLOAT      reduce using rule 126 (statement)
    FOR        reduce using rule 126 (statement)
    GOTO       reduce using rule 126 (statement)
    IDENT      reduce using rule 126 (statement)
    IF         reduce using rule 126 (statement)
    INFER      reduce using rule 126 (statement)
    INT        reduce using rule 126 (statement)
    LONG       reduce using rule 126 (statement)
    LPAREN     reduce using rule 126 (statement)
    NEW        reduce using rule 126 (statement)
    NOT        reduce using rule 126 (statement)
    RBRACE     reduce using rule 126 (statement)
    REM        reduce using rule 126 (statement)
    RETURN     reduce using rule 126 (statement)
    SFUNC      reduce using rule 126 (statement)
    SPACKAGE   reduce using rule 126 (statement)
    SSTRUCT    reduce using rule 126 (statement)
    STEP       reduce using rule 126 (statement)
    STRING     reduce using rule 126 (statement)
    TAG        reduce using rule 126 (statement)
    TSTEP      reduce using rule 126 (statement)
    VALUE      reduce using rule 126 (statement)
    VAR        reduce using rule 126 (statement)

state 358 // SFUNC IDENT LBRACE RETURN ';'

  123 returnArg: ';' .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 123 (returnArg)
    ADDR       reduce using rule 123 (returnArg)
    AFF        reduce using rule 123 (returnArg)
    BASICTYPE  reduce using rule 123 (returnArg)
    BOOLEAN    reduce using rule 123 (returnArg)
    BYTENUM    reduce using rule 123 (returnArg)
    DOUBLE     reduce using rule 123 (returnArg)
    DPROGRAM   reduce using rule 123 (returnArg)
    DSTACK     reduce using rule 123 (returnArg)
    DSTATE     reduce using rule 123 (returnArg)
    FLOAT      reduce using rule 123 (returnArg)
    FOR        reduce using rule 123 (returnArg)
    GOTO       reduce using rule 123 (returnArg)
    IDENT      reduce using rule 123 (returnArg)
    IF         reduce using rule 123 (returnArg)
    INFER      reduce using rule 123 (returnArg)
    INT        reduce using rule 123 (returnArg)
    LONG       reduce using rule 123 (returnArg)
    LPAREN     reduce using rule 123 (returnArg)
    NEW        reduce using rule 123 (returnArg)
    NOT        reduce using rule 123 (returnArg)
    RBRACE     reduce using rule 123 (returnArg)
    REM        reduce using rule 123 (returnArg)
    RETURN     reduce using rule 123 (returnArg)
    SFUNC      reduce using rule 123 (returnArg)
    SPACKAGE   reduce using rule 123 (returnArg)
    SSTRUCT    reduce using rule 123 (returnArg)
    STEP       reduce using rule 123 (returnArg)
    STRING     reduce using rule 123 (returnArg)
    TAG        reduce using rule 123 (returnArg)
    TSTEP      reduce using rule 123 (returnArg)
    VALUE      reduce using rule 123 (returnArg)
    VAR        reduce using rule 123 (returnArg)

state 359 // SFUNC IDENT LBRACE RETURN BOOLEAN [';']

  124 returnArg: argumentsList .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]
  285 argumentsList: argumentsList . COMMA argument
  286 argumentsList: argumentsList . COMMA nonAssignExpression
  287 argumentsList: argumentsList . COMMA ADDR argument
  288 argumentsList: argumentsList . COMMA VALUE argument
  289 argumentsList: argumentsList . COMMA VALUE nonAssignExpression

    ';'        reduce using rule 124 (returnArg)
    ADDR       reduce using rule 124 (returnArg)
    AFF        reduce using rule 124 (returnArg)
    BASICTYPE  reduce using rule 124 (returnArg)
    BOOLEAN    reduce using rule 124 (returnArg)
    BYTENUM    reduce using rule 124 (returnArg)
    COMMA      shift, and goto state 202
    DOUBLE     reduce using rule 124 (returnArg)
    DPROGRAM   reduce using rule 124 (returnArg)
    DSTACK     reduce using rule 124 (returnArg)
    DSTATE     reduce using rule 124 (returnArg)
    FLOAT      reduce using rule 124 (returnArg)
    FOR        reduce using rule 124 (returnArg)
    GOTO       reduce using rule 124 (returnArg)
    IDENT      reduce using rule 124 (returnArg)
    IF         reduce using rule 124 (returnArg)
    INFER      reduce using rule 124 (returnArg)
    INT        reduce using rule 124 (returnArg)
    LONG       reduce using rule 124 (returnArg)
    LPAREN     reduce using rule 124 (returnArg)
    NEW        reduce using rule 124 (returnArg)
    NOT        reduce using rule 124 (returnArg)
    RBRACE     reduce using rule 124 (returnArg)
    REM        reduce using rule 124 (returnArg)
    RETURN     reduce using rule 124 (returnArg)
    SFUNC      reduce using rule 124 (returnArg)
    SPACKAGE   reduce using rule 124 (returnArg)
    SSTRUCT    reduce using rule 124 (returnArg)
    STEP       reduce using rule 124 (returnArg)
    STRING     reduce using rule 124 (returnArg)
    TAG        reduce using rule 124 (returnArg)
    TSTEP      reduce using rule 124 (returnArg)
    VALUE      reduce using rule 124 (returnArg)
    VAR        reduce using rule 124 (returnArg)

state 360 // SFUNC IDENT LBRACE RETURN ';' [';']

  125 statement: RETURN returnArg .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]

    ';'        reduce using rule 125 (statement)
    ADDR       reduce using rule 125 (statement)
    AFF        reduce using rule 125 (statement)
    BASICTYPE  reduce using rule 125 (statement)
    BOOLEAN    reduce using rule 125 (statement)
    BYTENUM    reduce using rule 125 (statement)
    DOUBLE     reduce using rule 125 (statement)
    DPROGRAM   reduce using rule 125 (statement)
    DSTACK     reduce using rule 125 (statement)
    DSTATE     reduce using rule 125 (statement)
    FLOAT      reduce using rule 125 (statement)
    FOR        reduce using rule 125 (statement)
    GOTO       reduce using rule 125 (statement)
    IDENT      reduce using rule 125 (statement)
    IF         reduce using rule 125 (statement)
    INFER      reduce using rule 125 (statement)
    INT        reduce using rule 125 (statement)
    LONG       reduce using rule 125 (statement)
    LPAREN     reduce using rule 125 (statement)
    NEW        reduce using rule 125 (statement)
    NOT        reduce using rule 125 (statement)
    RBRACE     reduce using rule 125 (statement)
    REM        reduce using rule 125 (statement)
    RETURN     reduce using rule 125 (statement)
    SFUNC      reduce using rule 125 (statement)
    SPACKAGE   reduce using rule 125 (statement)
    SSTRUCT    reduce using rule 125 (statement)
    STEP       reduce using rule 125 (statement)
    STRING     reduce using rule 125 (statement)
    TAG        reduce using rule 125 (statement)
    TSTEP      reduce using rule 125 (statement)
    VALUE      reduce using rule 125 (statement)
    VAR        reduce using rule 125 (statement)

state 361 // SFUNC IDENT LBRACE BOOLEAN ASSIGN [ADDR]

  116 assignExpression: argumentsList assignOperator . argumentsList

    ADDR       shift, and goto state 69
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    FLOAT      shift, and goto state 62
    IDENT      shift, and goto state 49
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    STRING     shift, and goto state 65
    VALUE      shift, and goto state 70

    argument             goto state 50
    argumentsList        goto state 362
    nonAssignExpression  goto state 198

state 362 // SFUNC IDENT LBRACE BOOLEAN ASSIGN BOOLEAN [';']

  116 assignExpression: argumentsList assignOperator argumentsList .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LBRACE, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]
  285 argumentsList: argumentsList . COMMA argument
  286 argumentsList: argumentsList . COMMA nonAssignExpression
  287 argumentsList: argumentsList . COMMA ADDR argument
  288 argumentsList: argumentsList . COMMA VALUE argument
  289 argumentsList: argumentsList . COMMA VALUE nonAssignExpression

    ';'        reduce using rule 116 (assignExpression)
    ADDR       reduce using rule 116 (assignExpression)
    AFF        reduce using rule 116 (assignExpression)
    BASICTYPE  reduce using rule 116 (assignExpression)
    BOOLEAN    reduce using rule 116 (assignExpression)
    BYTENUM    reduce using rule 116 (assignExpression)
    COMMA      shift, and goto state 202
    DOUBLE     reduce using rule 116 (assignExpression)
    DPROGRAM   reduce using rule 116 (assignExpression)
    DSTACK     reduce using rule 116 (assignExpression)
    DSTATE     reduce using rule 116 (assignExpression)
    FLOAT      reduce using rule 116 (assignExpression)
    FOR        reduce using rule 116 (assignExpression)
    GOTO       reduce using rule 116 (assignExpression)
    IDENT      reduce using rule 116 (assignExpression)
    IF         reduce using rule 116 (assignExpression)
    INFER      reduce using rule 116 (assignExpression)
    INT        reduce using rule 116 (assignExpression)
    LBRACE     reduce using rule 116 (assignExpression)
    LONG       reduce using rule 116 (assignExpression)
    LPAREN     reduce using rule 116 (assignExpression)
    NEW        reduce using rule 116 (assignExpression)
    NOT        reduce using rule 116 (assignExpression)
    RBRACE     reduce using rule 116 (assignExpression)
    REM        reduce using rule 116 (assignExpression)
    RETURN     reduce using rule 116 (assignExpression)
    SFUNC      reduce using rule 116 (assignExpression)
    SPACKAGE   reduce using rule 116 (assignExpression)
    SSTRUCT    reduce using rule 116 (assignExpression)
    STEP       reduce using rule 116 (assignExpression)
    STRING     reduce using rule 116 (assignExpression)
    TAG        reduce using rule 116 (assignExpression)
    TSTEP      reduce using rule 116 (assignExpression)
    VALUE      reduce using rule 116 (assignExpression)
    VAR        reduce using rule 116 (assignExpression)

state 363 // SFUNC IDENT LBRACE VAR IDENT

  114 assignExpression: VAR IDENT . BASICTYPE definitionAssignment
  115 assignExpression: VAR IDENT . LBRACK RBRACK IDENT  // assoc %right, prec 15
  131 statement: VAR IDENT . IDENT  // assoc %right, prec 15

    BASICTYPE  shift, and goto state 324
    IDENT      shift, and goto state 364
    LBRACK     shift, and goto state 325

state 364 // SFUNC IDENT LBRACE VAR IDENT IDENT

  131 statement: VAR IDENT IDENT .  [';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, GOTO, IDENT, IF, INFER, INT, LONG, LPAREN, NEW, NOT, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, VALUE, VAR]  // assoc %right, prec 15

    ';'        reduce using rule 131 (statement)
    ADDR       reduce using rule 131 (statement)
    AFF        reduce using rule 131 (statement)
    BASICTYPE  reduce using rule 131 (statement)
    BOOLEAN    reduce using rule 131 (statement)
    BYTENUM    reduce using rule 131 (statement)
    DOUBLE     reduce using rule 131 (statement)
    DPROGRAM   reduce using rule 131 (statement)
    DSTACK     reduce using rule 131 (statement)
    DSTATE     reduce using rule 131 (statement)
    FLOAT      reduce using rule 131 (statement)
    FOR        reduce using rule 131 (statement)
    GOTO       reduce using rule 131 (statement)
    IDENT      reduce using rule 131 (statement)
    IF         reduce using rule 131 (statement)
    INFER      reduce using rule 131 (statement)
    INT        reduce using rule 131 (statement)
    LONG       reduce using rule 131 (statement)
    LPAREN     reduce using rule 131 (statement)
    NEW        reduce using rule 131 (statement)
    NOT        reduce using rule 131 (statement)
    RBRACE     reduce using rule 131 (statement)
    REM        reduce using rule 131 (statement)
    RETURN     reduce using rule 131 (statement)
    SFUNC      reduce using rule 131 (statement)
    SPACKAGE   reduce using rule 131 (statement)
    SSTRUCT    reduce using rule 131 (statement)
    STEP       reduce using rule 131 (statement)
    STRING     reduce using rule 131 (statement)
    TAG        reduce using rule 131 (statement)
    TSTEP      reduce using rule 131 (statement)
    VALUE      reduce using rule 131 (statement)
    VAR        reduce using rule 131 (statement)

state 365 // FUNC IDENT LPAREN RPAREN LBRACE ';' RBRACE

   96 functionStatements: LBRACE expressionsAndStatements RBRACE .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 96 (functionStatements)
    ';'        reduce using rule 96 (functionStatements)
    AFF        reduce using rule 96 (functionStatements)
    DPROGRAM   reduce using rule 96 (functionStatements)
    DSTACK     reduce using rule 96 (functionStatements)
    DSTATE     reduce using rule 96 (functionStatements)
    FUNC       reduce using rule 96 (functionStatements)
    IMPORT     reduce using rule 96 (functionStatements)
    PACKAGE    reduce using rule 96 (functionStatements)
    RBRACE     reduce using rule 96 (functionStatements)
    REM        reduce using rule 96 (functionStatements)
    SFUNC      reduce using rule 96 (functionStatements)
    SPACKAGE   reduce using rule 96 (functionStatements)
    SSTRUCT    reduce using rule 96 (functionStatements)
    STEP       reduce using rule 96 (functionStatements)
    TAG        reduce using rule 96 (functionStatements)
    TSTEP      reduce using rule 96 (functionStatements)
    TYPSTRUCT  reduce using rule 96 (functionStatements)
    VAR        reduce using rule 96 (functionStatements)

state 366 // FUNC IDENT LPAREN RPAREN LPAREN RPAREN LBRACE RBRACE [$end]

   90 functionDeclaration: FUNC IDENT functionParameters functionParameters functionStatements .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]  // assoc %right, prec 15

    $end       reduce using rule 90 (functionDeclaration)
    ';'        reduce using rule 90 (functionDeclaration)
    AFF        reduce using rule 90 (functionDeclaration)
    DPROGRAM   reduce using rule 90 (functionDeclaration)
    DSTACK     reduce using rule 90 (functionDeclaration)
    DSTATE     reduce using rule 90 (functionDeclaration)
    FUNC       reduce using rule 90 (functionDeclaration)
    IMPORT     reduce using rule 90 (functionDeclaration)
    PACKAGE    reduce using rule 90 (functionDeclaration)
    RBRACE     reduce using rule 90 (functionDeclaration)
    REM        reduce using rule 90 (functionDeclaration)
    SFUNC      reduce using rule 90 (functionDeclaration)
    SPACKAGE   reduce using rule 90 (functionDeclaration)
    SSTRUCT    reduce using rule 90 (functionDeclaration)
    STEP       reduce using rule 90 (functionDeclaration)
    TAG        reduce using rule 90 (functionDeclaration)
    TSTEP      reduce using rule 90 (functionDeclaration)
    TYPSTRUCT  reduce using rule 90 (functionDeclaration)
    VAR        reduce using rule 90 (functionDeclaration)

state 367 // FUNC LPAREN RPAREN IDENT

   87 functionDeclaration: FUNC functionParameters IDENT . functionParameters functionParameters functionStatements  // assoc %right, prec 15
   88 functionDeclaration: FUNC functionParameters IDENT . functionParameters functionStatements  // assoc %right, prec 15

    LPAREN  shift, and goto state 30

    functionParameters  goto state 368

state 368 // FUNC LPAREN RPAREN IDENT LPAREN RPAREN [LBRACE]

   87 functionDeclaration: FUNC functionParameters IDENT functionParameters . functionParameters functionStatements  // assoc %right, prec 15
   88 functionDeclaration: FUNC functionParameters IDENT functionParameters . functionStatements  // assoc %right, prec 15

    LBRACE  shift, and goto state 36
    LPAREN  shift, and goto state 30

    functionParameters  goto state 369
    functionStatements  goto state 370

state 369 // FUNC LPAREN RPAREN IDENT LPAREN RPAREN LPAREN RPAREN [LBRACE]

   87 functionDeclaration: FUNC functionParameters IDENT functionParameters functionParameters . functionStatements  // assoc %right, prec 15

    LBRACE  shift, and goto state 36

    functionStatements  goto state 371

state 370 // FUNC LPAREN RPAREN IDENT LPAREN RPAREN LBRACE RBRACE [$end]

   88 functionDeclaration: FUNC functionParameters IDENT functionParameters functionStatements .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]  // assoc %right, prec 15

    $end       reduce using rule 88 (functionDeclaration)
    ';'        reduce using rule 88 (functionDeclaration)
    AFF        reduce using rule 88 (functionDeclaration)
    DPROGRAM   reduce using rule 88 (functionDeclaration)
    DSTACK     reduce using rule 88 (functionDeclaration)
    DSTATE     reduce using rule 88 (functionDeclaration)
    FUNC       reduce using rule 88 (functionDeclaration)
    IMPORT     reduce using rule 88 (functionDeclaration)
    PACKAGE    reduce using rule 88 (functionDeclaration)
    RBRACE     reduce using rule 88 (functionDeclaration)
    REM        reduce using rule 88 (functionDeclaration)
    SFUNC      reduce using rule 88 (functionDeclaration)
    SPACKAGE   reduce using rule 88 (functionDeclaration)
    SSTRUCT    reduce using rule 88 (functionDeclaration)
    STEP       reduce using rule 88 (functionDeclaration)
    TAG        reduce using rule 88 (functionDeclaration)
    TSTEP      reduce using rule 88 (functionDeclaration)
    TYPSTRUCT  reduce using rule 88 (functionDeclaration)
    VAR        reduce using rule 88 (functionDeclaration)

state 371 // FUNC LPAREN RPAREN IDENT LPAREN RPAREN LPAREN RPAREN LBRACE RBRACE [$end]

   87 functionDeclaration: FUNC functionParameters IDENT functionParameters functionParameters functionStatements .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]  // assoc %right, prec 15

    $end       reduce using rule 87 (functionDeclaration)
    ';'        reduce using rule 87 (functionDeclaration)
    AFF        reduce using rule 87 (functionDeclaration)
    DPROGRAM   reduce using rule 87 (functionDeclaration)
    DSTACK     reduce using rule 87 (functionDeclaration)
    DSTATE     reduce using rule 87 (functionDeclaration)
    FUNC       reduce using rule 87 (functionDeclaration)
    IMPORT     reduce using rule 87 (functionDeclaration)
    PACKAGE    reduce using rule 87 (functionDeclaration)
    RBRACE     reduce using rule 87 (functionDeclaration)
    REM        reduce using rule 87 (functionDeclaration)
    SFUNC      reduce using rule 87 (functionDeclaration)
    SPACKAGE   reduce using rule 87 (functionDeclaration)
    SSTRUCT    reduce using rule 87 (functionDeclaration)
    STEP       reduce using rule 87 (functionDeclaration)
    TAG        reduce using rule 87 (functionDeclaration)
    TSTEP      reduce using rule 87 (functionDeclaration)
    TYPSTRUCT  reduce using rule 87 (functionDeclaration)
    VAR        reduce using rule 87 (functionDeclaration)

state 372 // FUNC LPAREN IDENT BASICTYPE [COMMA]

   85 functionParameters: LPAREN parameters . RPAREN
   95 parameters: parameters . COMMA parameter

    COMMA   shift, and goto state 381
    RPAREN  shift, and goto state 380

state 373 // FUNC LPAREN RPAREN

   86 functionParameters: LPAREN RPAREN .  [IDENT, LBRACE, LPAREN]

    IDENT   reduce using rule 86 (functionParameters)
    LBRACE  reduce using rule 86 (functionParameters)
    LPAREN  reduce using rule 86 (functionParameters)

state 374 // FUNC LPAREN IDENT

   91 parameter: IDENT . BASICTYPE
   92 parameter: IDENT . IDENT  // assoc %right, prec 15
   93 parameter: IDENT . MULT IDENT  // assoc %right, prec 15

    BASICTYPE  shift, and goto state 376
    IDENT      shift, and goto state 377
    MULT       shift, and goto state 378

state 375 // FUNC LPAREN IDENT BASICTYPE [COMMA]

   94 parameters: parameter .  [COMMA, RPAREN]

    COMMA   reduce using rule 94 (parameters)
    RPAREN  reduce using rule 94 (parameters)

state 376 // FUNC LPAREN IDENT BASICTYPE

   91 parameter: IDENT BASICTYPE .  [';', COMMA, DPROGRAM, DSTACK, DSTATE, IDENT, RBRACE, RPAREN]

    ';'       reduce using rule 91 (parameter)
    COMMA     reduce using rule 91 (parameter)
    DPROGRAM  reduce using rule 91 (parameter)
    DSTACK    reduce using rule 91 (parameter)
    DSTATE    reduce using rule 91 (parameter)
    IDENT     reduce using rule 91 (parameter)
    RBRACE    reduce using rule 91 (parameter)
    RPAREN    reduce using rule 91 (parameter)

state 377 // FUNC LPAREN IDENT IDENT

   92 parameter: IDENT IDENT .  [';', COMMA, DPROGRAM, DSTACK, DSTATE, IDENT, RBRACE, RPAREN]  // assoc %right, prec 15

    ';'       reduce using rule 92 (parameter)
    COMMA     reduce using rule 92 (parameter)
    DPROGRAM  reduce using rule 92 (parameter)
    DSTACK    reduce using rule 92 (parameter)
    DSTATE    reduce using rule 92 (parameter)
    IDENT     reduce using rule 92 (parameter)
    RBRACE    reduce using rule 92 (parameter)
    RPAREN    reduce using rule 92 (parameter)

state 378 // FUNC LPAREN IDENT MULT

   93 parameter: IDENT MULT . IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 379

state 379 // FUNC LPAREN IDENT MULT IDENT

   93 parameter: IDENT MULT IDENT .  [';', COMMA, DPROGRAM, DSTACK, DSTATE, IDENT, RBRACE, RPAREN]  // assoc %right, prec 15

    ';'       reduce using rule 93 (parameter)
    COMMA     reduce using rule 93 (parameter)
    DPROGRAM  reduce using rule 93 (parameter)
    DSTACK    reduce using rule 93 (parameter)
    DSTATE    reduce using rule 93 (parameter)
    IDENT     reduce using rule 93 (parameter)
    RBRACE    reduce using rule 93 (parameter)
    RPAREN    reduce using rule 93 (parameter)

state 380 // FUNC LPAREN IDENT BASICTYPE RPAREN

   85 functionParameters: LPAREN parameters RPAREN .  [IDENT, LBRACE, LPAREN]

    IDENT   reduce using rule 85 (functionParameters)
    LBRACE  reduce using rule 85 (functionParameters)
    LPAREN  reduce using rule 85 (functionParameters)

state 381 // FUNC LPAREN IDENT BASICTYPE COMMA

   95 parameters: parameters COMMA . parameter

    IDENT  shift, and goto state 374

    parameter  goto state 382

state 382 // FUNC LPAREN IDENT BASICTYPE COMMA IDENT BASICTYPE [COMMA]

   95 parameters: parameters COMMA parameter .  [COMMA, RPAREN]

    COMMA   reduce using rule 95 (parameters)
    RPAREN  reduce using rule 95 (parameters)

state 383 // TYPSTRUCT IDENT

   84 structDeclaration: TYPSTRUCT IDENT . $@1 STRUCT structFields
   83 $@1: .  [STRUCT]

    STRUCT  reduce using rule 83 ($@1)

    $@1  goto state 384

state 384 // TYPSTRUCT IDENT [STRUCT]

   84 structDeclaration: TYPSTRUCT IDENT $@1 . STRUCT structFields

    STRUCT  shift, and goto state 385

state 385 // TYPSTRUCT IDENT STRUCT

   84 structDeclaration: TYPSTRUCT IDENT $@1 STRUCT . structFields

    LBRACE  shift, and goto state 386

    structFields  goto state 387

state 386 // TYPSTRUCT IDENT STRUCT LBRACE

   81 structFields: LBRACE . fields RBRACE
   82 structFields: LBRACE . RBRACE

    ';'       shift, and goto state 389
    DPROGRAM  shift, and goto state 21
    DSTACK    shift, and goto state 20
    DSTATE    shift, and goto state 19
    IDENT     shift, and goto state 374
    RBRACE    shift, and goto state 392

    debugging  goto state 390
    fields     goto state 391
    parameter  goto state 388

state 387 // TYPSTRUCT IDENT STRUCT LBRACE RBRACE [$end]

   84 structDeclaration: TYPSTRUCT IDENT $@1 STRUCT structFields .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 84 (structDeclaration)
    ';'        reduce using rule 84 (structDeclaration)
    AFF        reduce using rule 84 (structDeclaration)
    DPROGRAM   reduce using rule 84 (structDeclaration)
    DSTACK     reduce using rule 84 (structDeclaration)
    DSTATE     reduce using rule 84 (structDeclaration)
    FUNC       reduce using rule 84 (structDeclaration)
    IMPORT     reduce using rule 84 (structDeclaration)
    PACKAGE    reduce using rule 84 (structDeclaration)
    RBRACE     reduce using rule 84 (structDeclaration)
    REM        reduce using rule 84 (structDeclaration)
    SFUNC      reduce using rule 84 (structDeclaration)
    SPACKAGE   reduce using rule 84 (structDeclaration)
    SSTRUCT    reduce using rule 84 (structDeclaration)
    STEP       reduce using rule 84 (structDeclaration)
    TAG        reduce using rule 84 (structDeclaration)
    TSTEP      reduce using rule 84 (structDeclaration)
    TYPSTRUCT  reduce using rule 84 (structDeclaration)
    VAR        reduce using rule 84 (structDeclaration)

state 388 // SSTRUCT IDENT LBRACE IDENT BASICTYPE [';']

   75 fields: parameter .  [';', DPROGRAM, DSTACK, DSTATE, IDENT, RBRACE]

    ';'       reduce using rule 75 (fields)
    DPROGRAM  reduce using rule 75 (fields)
    DSTACK    reduce using rule 75 (fields)
    DSTATE    reduce using rule 75 (fields)
    IDENT     reduce using rule 75 (fields)
    RBRACE    reduce using rule 75 (fields)

state 389 // SSTRUCT IDENT LBRACE ';'

   76 fields: ';' .  [';', DPROGRAM, DSTACK, DSTATE, IDENT, RBRACE]

    ';'       reduce using rule 76 (fields)
    DPROGRAM  reduce using rule 76 (fields)
    DSTACK    reduce using rule 76 (fields)
    DSTATE    reduce using rule 76 (fields)
    IDENT     reduce using rule 76 (fields)
    RBRACE    reduce using rule 76 (fields)

state 390 // SSTRUCT IDENT LBRACE DPROGRAM [';']

   77 fields: debugging .  [';', DPROGRAM, DSTACK, DSTATE, IDENT, RBRACE]

    ';'       reduce using rule 77 (fields)
    DPROGRAM  reduce using rule 77 (fields)
    DSTACK    reduce using rule 77 (fields)
    DSTATE    reduce using rule 77 (fields)
    IDENT     reduce using rule 77 (fields)
    RBRACE    reduce using rule 77 (fields)

state 391 // TYPSTRUCT IDENT STRUCT LBRACE ';' [';']

   78 fields: fields . parameter
   79 fields: fields . ';'
   80 fields: fields . debugging
   81 structFields: LBRACE fields . RBRACE

    ';'       shift, and goto state 394
    DPROGRAM  shift, and goto state 21
    DSTACK    shift, and goto state 20
    DSTATE    shift, and goto state 19
    IDENT     shift, and goto state 374
    RBRACE    shift, and goto state 396

    debugging  goto state 395
    parameter  goto state 393

state 392 // TYPSTRUCT IDENT STRUCT LBRACE RBRACE

   82 structFields: LBRACE RBRACE .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 82 (structFields)
    ';'        reduce using rule 82 (structFields)
    AFF        reduce using rule 82 (structFields)
    DPROGRAM   reduce using rule 82 (structFields)
    DSTACK     reduce using rule 82 (structFields)
    DSTATE     reduce using rule 82 (structFields)
    FUNC       reduce using rule 82 (structFields)
    IMPORT     reduce using rule 82 (structFields)
    PACKAGE    reduce using rule 82 (structFields)
    RBRACE     reduce using rule 82 (structFields)
    REM        reduce using rule 82 (structFields)
    SFUNC      reduce using rule 82 (structFields)
    SPACKAGE   reduce using rule 82 (structFields)
    SSTRUCT    reduce using rule 82 (structFields)
    STEP       reduce using rule 82 (structFields)
    TAG        reduce using rule 82 (structFields)
    TSTEP      reduce using rule 82 (structFields)
    TYPSTRUCT  reduce using rule 82 (structFields)
    VAR        reduce using rule 82 (structFields)

state 393 // SSTRUCT IDENT LBRACE ';' IDENT BASICTYPE [';']

   78 fields: fields parameter .  [';', DPROGRAM, DSTACK, DSTATE, IDENT, RBRACE]

    ';'       reduce using rule 78 (fields)
    DPROGRAM  reduce using rule 78 (fields)
    DSTACK    reduce using rule 78 (fields)
    DSTATE    reduce using rule 78 (fields)
    IDENT     reduce using rule 78 (fields)
    RBRACE    reduce using rule 78 (fields)

state 394 // SSTRUCT IDENT LBRACE ';' ';'

   79 fields: fields ';' .  [';', DPROGRAM, DSTACK, DSTATE, IDENT, RBRACE]

    ';'       reduce using rule 79 (fields)
    DPROGRAM  reduce using rule 79 (fields)
    DSTACK    reduce using rule 79 (fields)
    DSTATE    reduce using rule 79 (fields)
    IDENT     reduce using rule 79 (fields)
    RBRACE    reduce using rule 79 (fields)

state 395 // SSTRUCT IDENT LBRACE ';' DPROGRAM [';']

   80 fields: fields debugging .  [';', DPROGRAM, DSTACK, DSTATE, IDENT, RBRACE]

    ';'       reduce using rule 80 (fields)
    DPROGRAM  reduce using rule 80 (fields)
    DSTACK    reduce using rule 80 (fields)
    DSTATE    reduce using rule 80 (fields)
    IDENT     reduce using rule 80 (fields)
    RBRACE    reduce using rule 80 (fields)

state 396 // TYPSTRUCT IDENT STRUCT LBRACE ';' RBRACE

   81 structFields: LBRACE fields RBRACE .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 81 (structFields)
    ';'        reduce using rule 81 (structFields)
    AFF        reduce using rule 81 (structFields)
    DPROGRAM   reduce using rule 81 (structFields)
    DSTACK     reduce using rule 81 (structFields)
    DSTATE     reduce using rule 81 (structFields)
    FUNC       reduce using rule 81 (structFields)
    IMPORT     reduce using rule 81 (structFields)
    PACKAGE    reduce using rule 81 (structFields)
    RBRACE     reduce using rule 81 (structFields)
    REM        reduce using rule 81 (structFields)
    SFUNC      reduce using rule 81 (structFields)
    SPACKAGE   reduce using rule 81 (structFields)
    SSTRUCT    reduce using rule 81 (structFields)
    STEP       reduce using rule 81 (structFields)
    TAG        reduce using rule 81 (structFields)
    TSTEP      reduce using rule 81 (structFields)
    TYPSTRUCT  reduce using rule 81 (structFields)
    VAR        reduce using rule 81 (structFields)

state 397 // VAR IDENT

   73 definitionDeclaration: VAR IDENT . BASICTYPE definitionAssignment
   74 definitionDeclaration: VAR IDENT . IDENT  // assoc %right, prec 15

    BASICTYPE  shift, and goto state 398
    IDENT      shift, and goto state 399

state 398 // VAR IDENT BASICTYPE

   73 definitionDeclaration: VAR IDENT BASICTYPE . definitionAssignment
   69 definitionAssignment: .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end          reduce using rule 69 (definitionAssignment)
    ';'           reduce using rule 69 (definitionAssignment)
    AFF           reduce using rule 69 (definitionAssignment)
    ASSIGN        shift, and goto state 328
    BITANDEQ      shift, and goto state 338
    BITOREQ       shift, and goto state 340
    BITXOREQ      shift, and goto state 339
    CASSIGN       shift, and goto state 329
    DIVEQ         shift, and goto state 333
    DPROGRAM      reduce using rule 69 (definitionAssignment)
    DSTACK        reduce using rule 69 (definitionAssignment)
    DSTATE        reduce using rule 69 (definitionAssignment)
    EXPEQ         shift, and goto state 335
    FUNC          reduce using rule 69 (definitionAssignment)
    IMPORT        reduce using rule 69 (definitionAssignment)
    LEFTSHIFTEQ   shift, and goto state 336
    MINUSEQ       shift, and goto state 331
    MULTEQ        shift, and goto state 332
    PACKAGE       reduce using rule 69 (definitionAssignment)
    PLUSEQ        shift, and goto state 330
    RBRACE        reduce using rule 69 (definitionAssignment)
    REM           reduce using rule 69 (definitionAssignment)
    REMAINDEREQ   shift, and goto state 334
    RIGHTSHIFTEQ  shift, and goto state 337
    SFUNC         reduce using rule 69 (definitionAssignment)
    SPACKAGE      reduce using rule 69 (definitionAssignment)
    SSTRUCT       reduce using rule 69 (definitionAssignment)
    STEP          reduce using rule 69 (definitionAssignment)
    TAG           reduce using rule 69 (definitionAssignment)
    TSTEP         reduce using rule 69 (definitionAssignment)
    TYPSTRUCT     reduce using rule 69 (definitionAssignment)
    VAR           reduce using rule 69 (definitionAssignment)

    assignOperator        goto state 341
    definitionAssignment  goto state 400

state 399 // VAR IDENT IDENT

   74 definitionDeclaration: VAR IDENT IDENT .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]  // assoc %right, prec 15

    $end       reduce using rule 74 (definitionDeclaration)
    ';'        reduce using rule 74 (definitionDeclaration)
    AFF        reduce using rule 74 (definitionDeclaration)
    DPROGRAM   reduce using rule 74 (definitionDeclaration)
    DSTACK     reduce using rule 74 (definitionDeclaration)
    DSTATE     reduce using rule 74 (definitionDeclaration)
    FUNC       reduce using rule 74 (definitionDeclaration)
    IMPORT     reduce using rule 74 (definitionDeclaration)
    PACKAGE    reduce using rule 74 (definitionDeclaration)
    RBRACE     reduce using rule 74 (definitionDeclaration)
    REM        reduce using rule 74 (definitionDeclaration)
    SFUNC      reduce using rule 74 (definitionDeclaration)
    SPACKAGE   reduce using rule 74 (definitionDeclaration)
    SSTRUCT    reduce using rule 74 (definitionDeclaration)
    STEP       reduce using rule 74 (definitionDeclaration)
    TAG        reduce using rule 74 (definitionDeclaration)
    TSTEP      reduce using rule 74 (definitionDeclaration)
    TYPSTRUCT  reduce using rule 74 (definitionDeclaration)
    VAR        reduce using rule 74 (definitionDeclaration)

state 400 // VAR IDENT BASICTYPE [$end]

   73 definitionDeclaration: VAR IDENT BASICTYPE definitionAssignment .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 73 (definitionDeclaration)
    ';'        reduce using rule 73 (definitionDeclaration)
    AFF        reduce using rule 73 (definitionDeclaration)
    DPROGRAM   reduce using rule 73 (definitionDeclaration)
    DSTACK     reduce using rule 73 (definitionDeclaration)
    DSTATE     reduce using rule 73 (definitionDeclaration)
    FUNC       reduce using rule 73 (definitionDeclaration)
    IMPORT     reduce using rule 73 (definitionDeclaration)
    PACKAGE    reduce using rule 73 (definitionDeclaration)
    RBRACE     reduce using rule 73 (definitionDeclaration)
    REM        reduce using rule 73 (definitionDeclaration)
    SFUNC      reduce using rule 73 (definitionDeclaration)
    SPACKAGE   reduce using rule 73 (definitionDeclaration)
    SSTRUCT    reduce using rule 73 (definitionDeclaration)
    STEP       reduce using rule 73 (definitionDeclaration)
    TAG        reduce using rule 73 (definitionDeclaration)
    TSTEP      reduce using rule 73 (definitionDeclaration)
    TYPSTRUCT  reduce using rule 73 (definitionDeclaration)
    VAR        reduce using rule 73 (definitionDeclaration)

state 401 // PACKAGE IDENT

   68 packageDeclaration: PACKAGE IDENT .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]  // assoc %right, prec 15

    $end       reduce using rule 68 (packageDeclaration)
    ';'        reduce using rule 68 (packageDeclaration)
    AFF        reduce using rule 68 (packageDeclaration)
    DPROGRAM   reduce using rule 68 (packageDeclaration)
    DSTACK     reduce using rule 68 (packageDeclaration)
    DSTATE     reduce using rule 68 (packageDeclaration)
    FUNC       reduce using rule 68 (packageDeclaration)
    IMPORT     reduce using rule 68 (packageDeclaration)
    PACKAGE    reduce using rule 68 (packageDeclaration)
    RBRACE     reduce using rule 68 (packageDeclaration)
    REM        reduce using rule 68 (packageDeclaration)
    SFUNC      reduce using rule 68 (packageDeclaration)
    SPACKAGE   reduce using rule 68 (packageDeclaration)
    SSTRUCT    reduce using rule 68 (packageDeclaration)
    STEP       reduce using rule 68 (packageDeclaration)
    TAG        reduce using rule 68 (packageDeclaration)
    TSTEP      reduce using rule 68 (packageDeclaration)
    TYPSTRUCT  reduce using rule 68 (packageDeclaration)
    VAR        reduce using rule 68 (packageDeclaration)

state 402 // SSTRUCT IDENT

   54 selector: SSTRUCT IDENT . selectorFields  // assoc %right, prec 15
   50 selectorFields: .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 50 (selectorFields)
    ';'        reduce using rule 50 (selectorFields)
    ADDR       reduce using rule 50 (selectorFields)
    AFF        reduce using rule 50 (selectorFields)
    BASICTYPE  reduce using rule 50 (selectorFields)
    BOOLEAN    reduce using rule 50 (selectorFields)
    BYTENUM    reduce using rule 50 (selectorFields)
    DOUBLE     reduce using rule 50 (selectorFields)
    DPROGRAM   reduce using rule 50 (selectorFields)
    DSTACK     reduce using rule 50 (selectorFields)
    DSTATE     reduce using rule 50 (selectorFields)
    FLOAT      reduce using rule 50 (selectorFields)
    FOR        reduce using rule 50 (selectorFields)
    FUNC       reduce using rule 50 (selectorFields)
    GOTO       reduce using rule 50 (selectorFields)
    IDENT      reduce using rule 50 (selectorFields)
    IF         reduce using rule 50 (selectorFields)
    IMPORT     reduce using rule 50 (selectorFields)
    INFER      reduce using rule 50 (selectorFields)
    INT        reduce using rule 50 (selectorFields)
    LBRACE     shift, and goto state 403
    LONG       reduce using rule 50 (selectorFields)
    LPAREN     reduce using rule 50 (selectorFields)
    NEW        reduce using rule 50 (selectorFields)
    NOT        reduce using rule 50 (selectorFields)
    PACKAGE    reduce using rule 50 (selectorFields)
    RBRACE     reduce using rule 50 (selectorFields)
    REM        reduce using rule 50 (selectorFields)
    RETURN     reduce using rule 50 (selectorFields)
    SFUNC      reduce using rule 50 (selectorFields)
    SPACKAGE   reduce using rule 50 (selectorFields)
    SSTRUCT    reduce using rule 50 (selectorFields)
    STEP       reduce using rule 50 (selectorFields)
    STRING     reduce using rule 50 (selectorFields)
    TAG        reduce using rule 50 (selectorFields)
    TSTEP      reduce using rule 50 (selectorFields)
    TYPSTRUCT  reduce using rule 50 (selectorFields)
    VALUE      reduce using rule 50 (selectorFields)
    VAR        reduce using rule 50 (selectorFields)

    selectorFields  goto state 404

state 403 // SSTRUCT IDENT LBRACE

   51 selectorFields: LBRACE . fields RBRACE

    ';'       shift, and goto state 389
    DPROGRAM  shift, and goto state 21
    DSTACK    shift, and goto state 20
    DSTATE    shift, and goto state 19
    IDENT     shift, and goto state 374

    debugging  goto state 390
    fields     goto state 405
    parameter  goto state 388

state 404 // SSTRUCT IDENT [$end]

   54 selector: SSTRUCT IDENT selectorFields .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15

    $end       reduce using rule 54 (selector)
    ';'        reduce using rule 54 (selector)
    ADDR       reduce using rule 54 (selector)
    AFF        reduce using rule 54 (selector)
    BASICTYPE  reduce using rule 54 (selector)
    BOOLEAN    reduce using rule 54 (selector)
    BYTENUM    reduce using rule 54 (selector)
    DOUBLE     reduce using rule 54 (selector)
    DPROGRAM   reduce using rule 54 (selector)
    DSTACK     reduce using rule 54 (selector)
    DSTATE     reduce using rule 54 (selector)
    FLOAT      reduce using rule 54 (selector)
    FOR        reduce using rule 54 (selector)
    FUNC       reduce using rule 54 (selector)
    GOTO       reduce using rule 54 (selector)
    IDENT      reduce using rule 54 (selector)
    IF         reduce using rule 54 (selector)
    IMPORT     reduce using rule 54 (selector)
    INFER      reduce using rule 54 (selector)
    INT        reduce using rule 54 (selector)
    LONG       reduce using rule 54 (selector)
    LPAREN     reduce using rule 54 (selector)
    NEW        reduce using rule 54 (selector)
    NOT        reduce using rule 54 (selector)
    PACKAGE    reduce using rule 54 (selector)
    RBRACE     reduce using rule 54 (selector)
    REM        reduce using rule 54 (selector)
    RETURN     reduce using rule 54 (selector)
    SFUNC      reduce using rule 54 (selector)
    SPACKAGE   reduce using rule 54 (selector)
    SSTRUCT    reduce using rule 54 (selector)
    STEP       reduce using rule 54 (selector)
    STRING     reduce using rule 54 (selector)
    TAG        reduce using rule 54 (selector)
    TSTEP      reduce using rule 54 (selector)
    TYPSTRUCT  reduce using rule 54 (selector)
    VALUE      reduce using rule 54 (selector)
    VAR        reduce using rule 54 (selector)

state 405 // SSTRUCT IDENT LBRACE ';' [';']

   51 selectorFields: LBRACE fields . RBRACE
   78 fields: fields . parameter
   79 fields: fields . ';'
   80 fields: fields . debugging

    ';'       shift, and goto state 394
    DPROGRAM  shift, and goto state 21
    DSTACK    shift, and goto state 20
    DSTATE    shift, and goto state 19
    IDENT     shift, and goto state 374
    RBRACE    shift, and goto state 406

    debugging  goto state 395
    parameter  goto state 393

state 406 // SSTRUCT IDENT LBRACE ';' RBRACE

   51 selectorFields: LBRACE fields RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 51 (selectorFields)
    ';'        reduce using rule 51 (selectorFields)
    ADDR       reduce using rule 51 (selectorFields)
    AFF        reduce using rule 51 (selectorFields)
    BASICTYPE  reduce using rule 51 (selectorFields)
    BOOLEAN    reduce using rule 51 (selectorFields)
    BYTENUM    reduce using rule 51 (selectorFields)
    DOUBLE     reduce using rule 51 (selectorFields)
    DPROGRAM   reduce using rule 51 (selectorFields)
    DSTACK     reduce using rule 51 (selectorFields)
    DSTATE     reduce using rule 51 (selectorFields)
    FLOAT      reduce using rule 51 (selectorFields)
    FOR        reduce using rule 51 (selectorFields)
    FUNC       reduce using rule 51 (selectorFields)
    GOTO       reduce using rule 51 (selectorFields)
    IDENT      reduce using rule 51 (selectorFields)
    IF         reduce using rule 51 (selectorFields)
    IMPORT     reduce using rule 51 (selectorFields)
    INFER      reduce using rule 51 (selectorFields)
    INT        reduce using rule 51 (selectorFields)
    LONG       reduce using rule 51 (selectorFields)
    LPAREN     reduce using rule 51 (selectorFields)
    NEW        reduce using rule 51 (selectorFields)
    NOT        reduce using rule 51 (selectorFields)
    PACKAGE    reduce using rule 51 (selectorFields)
    RBRACE     reduce using rule 51 (selectorFields)
    REM        reduce using rule 51 (selectorFields)
    RETURN     reduce using rule 51 (selectorFields)
    SFUNC      reduce using rule 51 (selectorFields)
    SPACKAGE   reduce using rule 51 (selectorFields)
    SSTRUCT    reduce using rule 51 (selectorFields)
    STEP       reduce using rule 51 (selectorFields)
    STRING     reduce using rule 51 (selectorFields)
    TAG        reduce using rule 51 (selectorFields)
    TSTEP      reduce using rule 51 (selectorFields)
    TYPSTRUCT  reduce using rule 51 (selectorFields)
    VALUE      reduce using rule 51 (selectorFields)
    VAR        reduce using rule 51 (selectorFields)

state 407 // SFUNC IDENT

   53 selector: SFUNC IDENT . selectorExpressionsAndStatements  // assoc %right, prec 15
   48 selectorExpressionsAndStatements: .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 48 (selectorExpressionsAndStatements)
    ';'        reduce using rule 48 (selectorExpressionsAndStatements)
    ADDR       reduce using rule 48 (selectorExpressionsAndStatements)
    AFF        reduce using rule 48 (selectorExpressionsAndStatements)
    BASICTYPE  reduce using rule 48 (selectorExpressionsAndStatements)
    BOOLEAN    reduce using rule 48 (selectorExpressionsAndStatements)
    BYTENUM    reduce using rule 48 (selectorExpressionsAndStatements)
    DOUBLE     reduce using rule 48 (selectorExpressionsAndStatements)
    DPROGRAM   reduce using rule 48 (selectorExpressionsAndStatements)
    DSTACK     reduce using rule 48 (selectorExpressionsAndStatements)
    DSTATE     reduce using rule 48 (selectorExpressionsAndStatements)
    FLOAT      reduce using rule 48 (selectorExpressionsAndStatements)
    FOR        reduce using rule 48 (selectorExpressionsAndStatements)
    FUNC       reduce using rule 48 (selectorExpressionsAndStatements)
    GOTO       reduce using rule 48 (selectorExpressionsAndStatements)
    IDENT      reduce using rule 48 (selectorExpressionsAndStatements)
    IF         reduce using rule 48 (selectorExpressionsAndStatements)
    IMPORT     reduce using rule 48 (selectorExpressionsAndStatements)
    INFER      reduce using rule 48 (selectorExpressionsAndStatements)
    INT        reduce using rule 48 (selectorExpressionsAndStatements)
    LBRACE     shift, and goto state 408
    LONG       reduce using rule 48 (selectorExpressionsAndStatements)
    LPAREN     reduce using rule 48 (selectorExpressionsAndStatements)
    NEW        reduce using rule 48 (selectorExpressionsAndStatements)
    NOT        reduce using rule 48 (selectorExpressionsAndStatements)
    PACKAGE    reduce using rule 48 (selectorExpressionsAndStatements)
    RBRACE     reduce using rule 48 (selectorExpressionsAndStatements)
    REM        reduce using rule 48 (selectorExpressionsAndStatements)
    RETURN     reduce using rule 48 (selectorExpressionsAndStatements)
    SFUNC      reduce using rule 48 (selectorExpressionsAndStatements)
    SPACKAGE   reduce using rule 48 (selectorExpressionsAndStatements)
    SSTRUCT    reduce using rule 48 (selectorExpressionsAndStatements)
    STEP       reduce using rule 48 (selectorExpressionsAndStatements)
    STRING     reduce using rule 48 (selectorExpressionsAndStatements)
    TAG        reduce using rule 48 (selectorExpressionsAndStatements)
    TSTEP      reduce using rule 48 (selectorExpressionsAndStatements)
    TYPSTRUCT  reduce using rule 48 (selectorExpressionsAndStatements)
    VALUE      reduce using rule 48 (selectorExpressionsAndStatements)
    VAR        reduce using rule 48 (selectorExpressionsAndStatements)

    selectorExpressionsAndStatements  goto state 409

state 408 // SFUNC IDENT LBRACE

   49 selectorExpressionsAndStatements: LBRACE . expressionsAndStatements RBRACE

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance                goto state 45
    argument                  goto state 50
    argumentsList             goto state 48
    assignExpression          goto state 40
    beginFor                  goto state 55
    debugging                 goto state 44
    expressionsAndStatements  goto state 410
    nonAssignExpression       goto state 39
    remover                   goto state 46
    selector                  goto state 42
    statement                 goto state 41
    stepping                  goto state 43

state 409 // SFUNC IDENT [$end]

   53 selector: SFUNC IDENT selectorExpressionsAndStatements .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15

    $end       reduce using rule 53 (selector)
    ';'        reduce using rule 53 (selector)
    ADDR       reduce using rule 53 (selector)
    AFF        reduce using rule 53 (selector)
    BASICTYPE  reduce using rule 53 (selector)
    BOOLEAN    reduce using rule 53 (selector)
    BYTENUM    reduce using rule 53 (selector)
    DOUBLE     reduce using rule 53 (selector)
    DPROGRAM   reduce using rule 53 (selector)
    DSTACK     reduce using rule 53 (selector)
    DSTATE     reduce using rule 53 (selector)
    FLOAT      reduce using rule 53 (selector)
    FOR        reduce using rule 53 (selector)
    FUNC       reduce using rule 53 (selector)
    GOTO       reduce using rule 53 (selector)
    IDENT      reduce using rule 53 (selector)
    IF         reduce using rule 53 (selector)
    IMPORT     reduce using rule 53 (selector)
    INFER      reduce using rule 53 (selector)
    INT        reduce using rule 53 (selector)
    LONG       reduce using rule 53 (selector)
    LPAREN     reduce using rule 53 (selector)
    NEW        reduce using rule 53 (selector)
    NOT        reduce using rule 53 (selector)
    PACKAGE    reduce using rule 53 (selector)
    RBRACE     reduce using rule 53 (selector)
    REM        reduce using rule 53 (selector)
    RETURN     reduce using rule 53 (selector)
    SFUNC      reduce using rule 53 (selector)
    SPACKAGE   reduce using rule 53 (selector)
    SSTRUCT    reduce using rule 53 (selector)
    STEP       reduce using rule 53 (selector)
    STRING     reduce using rule 53 (selector)
    TAG        reduce using rule 53 (selector)
    TSTEP      reduce using rule 53 (selector)
    TYPSTRUCT  reduce using rule 53 (selector)
    VALUE      reduce using rule 53 (selector)
    VAR        reduce using rule 53 (selector)

state 410 // SFUNC IDENT LBRACE ';' [';']

   49 selectorExpressionsAndStatements: LBRACE expressionsAndStatements . RBRACE
  106 expressionsAndStatements: expressionsAndStatements . nonAssignExpression
  107 expressionsAndStatements: expressionsAndStatements . assignExpression
  108 expressionsAndStatements: expressionsAndStatements . statement
  109 expressionsAndStatements: expressionsAndStatements . selector
  110 expressionsAndStatements: expressionsAndStatements . stepping
  111 expressionsAndStatements: expressionsAndStatements . debugging
  112 expressionsAndStatements: expressionsAndStatements . affordance
  113 expressionsAndStatements: expressionsAndStatements . remover

    ';'        shift, and goto state 56
    ADDR       shift, and goto state 69
    AFF        shift, and goto state 16
    BASICTYPE  shift, and goto state 68
    BOOLEAN    shift, and goto state 64
    BYTENUM    shift, and goto state 59
    DOUBLE     shift, and goto state 63
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FLOAT      shift, and goto state 62
    FOR        shift, and goto state 51
    GOTO       shift, and goto state 53
    IDENT      shift, and goto state 49
    IF         shift, and goto state 54
    INFER      shift, and goto state 67
    INT        shift, and goto state 60
    LONG       shift, and goto state 61
    LPAREN     shift, and goto state 58
    NEW        shift, and goto state 66
    NOT        shift, and goto state 57
    RBRACE     shift, and goto state 411
    REM        shift, and goto state 22
    RETURN     shift, and goto state 52
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    STRING     shift, and goto state 65
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    VALUE      shift, and goto state 70
    VAR        shift, and goto state 47

    affordance           goto state 314
    argument             goto state 50
    argumentsList        goto state 48
    assignExpression     goto state 309
    beginFor             goto state 55
    debugging            goto state 313
    nonAssignExpression  goto state 308
    remover              goto state 315
    selector             goto state 311
    statement            goto state 310
    stepping             goto state 312

state 411 // SFUNC IDENT LBRACE ';' RBRACE

   49 selectorExpressionsAndStatements: LBRACE expressionsAndStatements RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 49 (selectorExpressionsAndStatements)
    ';'        reduce using rule 49 (selectorExpressionsAndStatements)
    ADDR       reduce using rule 49 (selectorExpressionsAndStatements)
    AFF        reduce using rule 49 (selectorExpressionsAndStatements)
    BASICTYPE  reduce using rule 49 (selectorExpressionsAndStatements)
    BOOLEAN    reduce using rule 49 (selectorExpressionsAndStatements)
    BYTENUM    reduce using rule 49 (selectorExpressionsAndStatements)
    DOUBLE     reduce using rule 49 (selectorExpressionsAndStatements)
    DPROGRAM   reduce using rule 49 (selectorExpressionsAndStatements)
    DSTACK     reduce using rule 49 (selectorExpressionsAndStatements)
    DSTATE     reduce using rule 49 (selectorExpressionsAndStatements)
    FLOAT      reduce using rule 49 (selectorExpressionsAndStatements)
    FOR        reduce using rule 49 (selectorExpressionsAndStatements)
    FUNC       reduce using rule 49 (selectorExpressionsAndStatements)
    GOTO       reduce using rule 49 (selectorExpressionsAndStatements)
    IDENT      reduce using rule 49 (selectorExpressionsAndStatements)
    IF         reduce using rule 49 (selectorExpressionsAndStatements)
    IMPORT     reduce using rule 49 (selectorExpressionsAndStatements)
    INFER      reduce using rule 49 (selectorExpressionsAndStatements)
    INT        reduce using rule 49 (selectorExpressionsAndStatements)
    LONG       reduce using rule 49 (selectorExpressionsAndStatements)
    LPAREN     reduce using rule 49 (selectorExpressionsAndStatements)
    NEW        reduce using rule 49 (selectorExpressionsAndStatements)
    NOT        reduce using rule 49 (selectorExpressionsAndStatements)
    PACKAGE    reduce using rule 49 (selectorExpressionsAndStatements)
    RBRACE     reduce using rule 49 (selectorExpressionsAndStatements)
    REM        reduce using rule 49 (selectorExpressionsAndStatements)
    RETURN     reduce using rule 49 (selectorExpressionsAndStatements)
    SFUNC      reduce using rule 49 (selectorExpressionsAndStatements)
    SPACKAGE   reduce using rule 49 (selectorExpressionsAndStatements)
    SSTRUCT    reduce using rule 49 (selectorExpressionsAndStatements)
    STEP       reduce using rule 49 (selectorExpressionsAndStatements)
    STRING     reduce using rule 49 (selectorExpressionsAndStatements)
    TAG        reduce using rule 49 (selectorExpressionsAndStatements)
    TSTEP      reduce using rule 49 (selectorExpressionsAndStatements)
    TYPSTRUCT  reduce using rule 49 (selectorExpressionsAndStatements)
    VALUE      reduce using rule 49 (selectorExpressionsAndStatements)
    VAR        reduce using rule 49 (selectorExpressionsAndStatements)

state 412 // SPACKAGE IDENT

   52 selector: SPACKAGE IDENT . selectorLines  // assoc %right, prec 15
   46 selectorLines: .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 46 (selectorLines)
    ';'        reduce using rule 46 (selectorLines)
    ADDR       reduce using rule 46 (selectorLines)
    AFF        reduce using rule 46 (selectorLines)
    BASICTYPE  reduce using rule 46 (selectorLines)
    BOOLEAN    reduce using rule 46 (selectorLines)
    BYTENUM    reduce using rule 46 (selectorLines)
    DOUBLE     reduce using rule 46 (selectorLines)
    DPROGRAM   reduce using rule 46 (selectorLines)
    DSTACK     reduce using rule 46 (selectorLines)
    DSTATE     reduce using rule 46 (selectorLines)
    FLOAT      reduce using rule 46 (selectorLines)
    FOR        reduce using rule 46 (selectorLines)
    FUNC       reduce using rule 46 (selectorLines)
    GOTO       reduce using rule 46 (selectorLines)
    IDENT      reduce using rule 46 (selectorLines)
    IF         reduce using rule 46 (selectorLines)
    IMPORT     reduce using rule 46 (selectorLines)
    INFER      reduce using rule 46 (selectorLines)
    INT        reduce using rule 46 (selectorLines)
    LBRACE     shift, and goto state 413
    LONG       reduce using rule 46 (selectorLines)
    LPAREN     reduce using rule 46 (selectorLines)
    NEW        reduce using rule 46 (selectorLines)
    NOT        reduce using rule 46 (selectorLines)
    PACKAGE    reduce using rule 46 (selectorLines)
    RBRACE     reduce using rule 46 (selectorLines)
    REM        reduce using rule 46 (selectorLines)
    RETURN     reduce using rule 46 (selectorLines)
    SFUNC      reduce using rule 46 (selectorLines)
    SPACKAGE   reduce using rule 46 (selectorLines)
    SSTRUCT    reduce using rule 46 (selectorLines)
    STEP       reduce using rule 46 (selectorLines)
    STRING     reduce using rule 46 (selectorLines)
    TAG        reduce using rule 46 (selectorLines)
    TSTEP      reduce using rule 46 (selectorLines)
    TYPSTRUCT  reduce using rule 46 (selectorLines)
    VALUE      reduce using rule 46 (selectorLines)
    VAR        reduce using rule 46 (selectorLines)

    selectorLines  goto state 414

state 413 // SPACKAGE IDENT LBRACE

   47 selectorLines: LBRACE . lines RBRACE
    1 lines: .  [';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    ';'        reduce using rule 1 (lines)
    AFF        reduce using rule 1 (lines)
    DPROGRAM   reduce using rule 1 (lines)
    DSTACK     reduce using rule 1 (lines)
    DSTATE     reduce using rule 1 (lines)
    FUNC       reduce using rule 1 (lines)
    IMPORT     reduce using rule 1 (lines)
    PACKAGE    reduce using rule 1 (lines)
    RBRACE     reduce using rule 1 (lines)
    REM        reduce using rule 1 (lines)
    SFUNC      reduce using rule 1 (lines)
    SPACKAGE   reduce using rule 1 (lines)
    SSTRUCT    reduce using rule 1 (lines)
    STEP       reduce using rule 1 (lines)
    TAG        reduce using rule 1 (lines)
    TSTEP      reduce using rule 1 (lines)
    TYPSTRUCT  reduce using rule 1 (lines)
    VAR        reduce using rule 1 (lines)

    lines  goto state 415

state 414 // SPACKAGE IDENT [$end]

   52 selector: SPACKAGE IDENT selectorLines .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15

    $end       reduce using rule 52 (selector)
    ';'        reduce using rule 52 (selector)
    ADDR       reduce using rule 52 (selector)
    AFF        reduce using rule 52 (selector)
    BASICTYPE  reduce using rule 52 (selector)
    BOOLEAN    reduce using rule 52 (selector)
    BYTENUM    reduce using rule 52 (selector)
    DOUBLE     reduce using rule 52 (selector)
    DPROGRAM   reduce using rule 52 (selector)
    DSTACK     reduce using rule 52 (selector)
    DSTATE     reduce using rule 52 (selector)
    FLOAT      reduce using rule 52 (selector)
    FOR        reduce using rule 52 (selector)
    FUNC       reduce using rule 52 (selector)
    GOTO       reduce using rule 52 (selector)
    IDENT      reduce using rule 52 (selector)
    IF         reduce using rule 52 (selector)
    IMPORT     reduce using rule 52 (selector)
    INFER      reduce using rule 52 (selector)
    INT        reduce using rule 52 (selector)
    LONG       reduce using rule 52 (selector)
    LPAREN     reduce using rule 52 (selector)
    NEW        reduce using rule 52 (selector)
    NOT        reduce using rule 52 (selector)
    PACKAGE    reduce using rule 52 (selector)
    RBRACE     reduce using rule 52 (selector)
    REM        reduce using rule 52 (selector)
    RETURN     reduce using rule 52 (selector)
    SFUNC      reduce using rule 52 (selector)
    SPACKAGE   reduce using rule 52 (selector)
    SSTRUCT    reduce using rule 52 (selector)
    STEP       reduce using rule 52 (selector)
    STRING     reduce using rule 52 (selector)
    TAG        reduce using rule 52 (selector)
    TSTEP      reduce using rule 52 (selector)
    TYPSTRUCT  reduce using rule 52 (selector)
    VALUE      reduce using rule 52 (selector)
    VAR        reduce using rule 52 (selector)

state 415 // SPACKAGE IDENT LBRACE [';']

    2 lines: lines . line
    3 lines: lines . ';'
   47 selectorLines: LBRACE lines . RBRACE

    ';'        shift, and goto state 3
    AFF        shift, and goto state 16
    DPROGRAM   shift, and goto state 21
    DSTACK     shift, and goto state 20
    DSTATE     shift, and goto state 19
    FUNC       shift, and goto state 29
    IMPORT     shift, and goto state 14
    PACKAGE    shift, and goto state 26
    RBRACE     shift, and goto state 416
    REM        shift, and goto state 22
    SFUNC      shift, and goto state 24
    SPACKAGE   shift, and goto state 23
    SSTRUCT    shift, and goto state 25
    STEP       shift, and goto state 18
    TAG        shift, and goto state 15
    TSTEP      shift, and goto state 17
    TYPSTRUCT  shift, and goto state 28
    VAR        shift, and goto state 27

    affordance             goto state 12
    debugging              goto state 11
    definitionDeclaration  goto state 4
    functionDeclaration    goto state 8
    importDeclaration      goto state 7
    line                   goto state 2
    packageDeclaration     goto state 6
    remover                goto state 13
    selector               goto state 9
    stepping               goto state 10
    structDeclaration      goto state 5

state 416 // SPACKAGE IDENT LBRACE RBRACE

   47 selectorLines: LBRACE lines RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 47 (selectorLines)
    ';'        reduce using rule 47 (selectorLines)
    ADDR       reduce using rule 47 (selectorLines)
    AFF        reduce using rule 47 (selectorLines)
    BASICTYPE  reduce using rule 47 (selectorLines)
    BOOLEAN    reduce using rule 47 (selectorLines)
    BYTENUM    reduce using rule 47 (selectorLines)
    DOUBLE     reduce using rule 47 (selectorLines)
    DPROGRAM   reduce using rule 47 (selectorLines)
    DSTACK     reduce using rule 47 (selectorLines)
    DSTATE     reduce using rule 47 (selectorLines)
    FLOAT      reduce using rule 47 (selectorLines)
    FOR        reduce using rule 47 (selectorLines)
    FUNC       reduce using rule 47 (selectorLines)
    GOTO       reduce using rule 47 (selectorLines)
    IDENT      reduce using rule 47 (selectorLines)
    IF         reduce using rule 47 (selectorLines)
    IMPORT     reduce using rule 47 (selectorLines)
    INFER      reduce using rule 47 (selectorLines)
    INT        reduce using rule 47 (selectorLines)
    LONG       reduce using rule 47 (selectorLines)
    LPAREN     reduce using rule 47 (selectorLines)
    NEW        reduce using rule 47 (selectorLines)
    NOT        reduce using rule 47 (selectorLines)
    PACKAGE    reduce using rule 47 (selectorLines)
    RBRACE     reduce using rule 47 (selectorLines)
    REM        reduce using rule 47 (selectorLines)
    RETURN     reduce using rule 47 (selectorLines)
    SFUNC      reduce using rule 47 (selectorLines)
    SPACKAGE   reduce using rule 47 (selectorLines)
    SSTRUCT    reduce using rule 47 (selectorLines)
    STEP       reduce using rule 47 (selectorLines)
    STRING     reduce using rule 47 (selectorLines)
    TAG        reduce using rule 47 (selectorLines)
    TSTEP      reduce using rule 47 (selectorLines)
    TYPSTRUCT  reduce using rule 47 (selectorLines)
    VALUE      reduce using rule 47 (selectorLines)
    VAR        reduce using rule 47 (selectorLines)

state 417 // REM FUNC

   37 remover: REM FUNC . IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 442

state 418 // REM PACKAGE

   38 remover: REM PACKAGE . IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 441

state 419 // REM DEF

   39 remover: REM DEF . IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 440

state 420 // REM STRUCT

   40 remover: REM STRUCT . IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 439

state 421 // REM IMPORT

   41 remover: REM IMPORT . STRING

    STRING  shift, and goto state 438

state 422 // REM EXPR

   42 remover: REM EXPR . IDENT FUNC IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 435

state 423 // REM FIELD

   43 remover: REM FIELD . IDENT STRUCT IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 432

state 424 // REM INPUT

   44 remover: REM INPUT . IDENT FUNC IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 429

state 425 // REM OUTPUT

   45 remover: REM OUTPUT . IDENT FUNC IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 426

state 426 // REM OUTPUT IDENT

   45 remover: REM OUTPUT IDENT . FUNC IDENT  // assoc %right, prec 15

    FUNC  shift, and goto state 427

state 427 // REM OUTPUT IDENT FUNC

   45 remover: REM OUTPUT IDENT FUNC . IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 428

state 428 // REM OUTPUT IDENT FUNC IDENT

   45 remover: REM OUTPUT IDENT FUNC IDENT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15

    $end       reduce using rule 45 (remover)
    ';'        reduce using rule 45 (remover)
    ADDR       reduce using rule 45 (remover)
    AFF        reduce using rule 45 (remover)
    BASICTYPE  reduce using rule 45 (remover)
    BOOLEAN    reduce using rule 45 (remover)
    BYTENUM    reduce using rule 45 (remover)
    DOUBLE     reduce using rule 45 (remover)
    DPROGRAM   reduce using rule 45 (remover)
    DSTACK     reduce using rule 45 (remover)
    DSTATE     reduce using rule 45 (remover)
    FLOAT      reduce using rule 45 (remover)
    FOR        reduce using rule 45 (remover)
    FUNC       reduce using rule 45 (remover)
    GOTO       reduce using rule 45 (remover)
    IDENT      reduce using rule 45 (remover)
    IF         reduce using rule 45 (remover)
    IMPORT     reduce using rule 45 (remover)
    INFER      reduce using rule 45 (remover)
    INT        reduce using rule 45 (remover)
    LONG       reduce using rule 45 (remover)
    LPAREN     reduce using rule 45 (remover)
    NEW        reduce using rule 45 (remover)
    NOT        reduce using rule 45 (remover)
    PACKAGE    reduce using rule 45 (remover)
    RBRACE     reduce using rule 45 (remover)
    REM        reduce using rule 45 (remover)
    RETURN     reduce using rule 45 (remover)
    SFUNC      reduce using rule 45 (remover)
    SPACKAGE   reduce using rule 45 (remover)
    SSTRUCT    reduce using rule 45 (remover)
    STEP       reduce using rule 45 (remover)
    STRING     reduce using rule 45 (remover)
    TAG        reduce using rule 45 (remover)
    TSTEP      reduce using rule 45 (remover)
    TYPSTRUCT  reduce using rule 45 (remover)
    VALUE      reduce using rule 45 (remover)
    VAR        reduce using rule 45 (remover)

state 429 // REM INPUT IDENT

   44 remover: REM INPUT IDENT . FUNC IDENT  // assoc %right, prec 15

    FUNC  shift, and goto state 430

state 430 // REM INPUT IDENT FUNC

   44 remover: REM INPUT IDENT FUNC . IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 431

state 431 // REM INPUT IDENT FUNC IDENT

   44 remover: REM INPUT IDENT FUNC IDENT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15

    $end       reduce using rule 44 (remover)
    ';'        reduce using rule 44 (remover)
    ADDR       reduce using rule 44 (remover)
    AFF        reduce using rule 44 (remover)
    BASICTYPE  reduce using rule 44 (remover)
    BOOLEAN    reduce using rule 44 (remover)
    BYTENUM    reduce using rule 44 (remover)
    DOUBLE     reduce using rule 44 (remover)
    DPROGRAM   reduce using rule 44 (remover)
    DSTACK     reduce using rule 44 (remover)
    DSTATE     reduce using rule 44 (remover)
    FLOAT      reduce using rule 44 (remover)
    FOR        reduce using rule 44 (remover)
    FUNC       reduce using rule 44 (remover)
    GOTO       reduce using rule 44 (remover)
    IDENT      reduce using rule 44 (remover)
    IF         reduce using rule 44 (remover)
    IMPORT     reduce using rule 44 (remover)
    INFER      reduce using rule 44 (remover)
    INT        reduce using rule 44 (remover)
    LONG       reduce using rule 44 (remover)
    LPAREN     reduce using rule 44 (remover)
    NEW        reduce using rule 44 (remover)
    NOT        reduce using rule 44 (remover)
    PACKAGE    reduce using rule 44 (remover)
    RBRACE     reduce using rule 44 (remover)
    REM        reduce using rule 44 (remover)
    RETURN     reduce using rule 44 (remover)
    SFUNC      reduce using rule 44 (remover)
    SPACKAGE   reduce using rule 44 (remover)
    SSTRUCT    reduce using rule 44 (remover)
    STEP       reduce using rule 44 (remover)
    STRING     reduce using rule 44 (remover)
    TAG        reduce using rule 44 (remover)
    TSTEP      reduce using rule 44 (remover)
    TYPSTRUCT  reduce using rule 44 (remover)
    VALUE      reduce using rule 44 (remover)
    VAR        reduce using rule 44 (remover)

state 432 // REM FIELD IDENT

   43 remover: REM FIELD IDENT . STRUCT IDENT  // assoc %right, prec 15

    STRUCT  shift, and goto state 433

state 433 // REM FIELD IDENT STRUCT

   43 remover: REM FIELD IDENT STRUCT . IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 434

state 434 // REM FIELD IDENT STRUCT IDENT

   43 remover: REM FIELD IDENT STRUCT IDENT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15

    $end       reduce using rule 43 (remover)
    ';'        reduce using rule 43 (remover)
    ADDR       reduce using rule 43 (remover)
    AFF        reduce using rule 43 (remover)
    BASICTYPE  reduce using rule 43 (remover)
    BOOLEAN    reduce using rule 43 (remover)
    BYTENUM    reduce using rule 43 (remover)
    DOUBLE     reduce using rule 43 (remover)
    DPROGRAM   reduce using rule 43 (remover)
    DSTACK     reduce using rule 43 (remover)
    DSTATE     reduce using rule 43 (remover)
    FLOAT      reduce using rule 43 (remover)
    FOR        reduce using rule 43 (remover)
    FUNC       reduce using rule 43 (remover)
    GOTO       reduce using rule 43 (remover)
    IDENT      reduce using rule 43 (remover)
    IF         reduce using rule 43 (remover)
    IMPORT     reduce using rule 43 (remover)
    INFER      reduce using rule 43 (remover)
    INT        reduce using rule 43 (remover)
    LONG       reduce using rule 43 (remover)
    LPAREN     reduce using rule 43 (remover)
    NEW        reduce using rule 43 (remover)
    NOT        reduce using rule 43 (remover)
    PACKAGE    reduce using rule 43 (remover)
    RBRACE     reduce using rule 43 (remover)
    REM        reduce using rule 43 (remover)
    RETURN     reduce using rule 43 (remover)
    SFUNC      reduce using rule 43 (remover)
    SPACKAGE   reduce using rule 43 (remover)
    SSTRUCT    reduce using rule 43 (remover)
    STEP       reduce using rule 43 (remover)
    STRING     reduce using rule 43 (remover)
    TAG        reduce using rule 43 (remover)
    TSTEP      reduce using rule 43 (remover)
    TYPSTRUCT  reduce using rule 43 (remover)
    VALUE      reduce using rule 43 (remover)
    VAR        reduce using rule 43 (remover)

state 435 // REM EXPR IDENT

   42 remover: REM EXPR IDENT . FUNC IDENT  // assoc %right, prec 15

    FUNC  shift, and goto state 436

state 436 // REM EXPR IDENT FUNC

   42 remover: REM EXPR IDENT FUNC . IDENT  // assoc %right, prec 15

    IDENT  shift, and goto state 437

state 437 // REM EXPR IDENT FUNC IDENT

   42 remover: REM EXPR IDENT FUNC IDENT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15

    $end       reduce using rule 42 (remover)
    ';'        reduce using rule 42 (remover)
    ADDR       reduce using rule 42 (remover)
    AFF        reduce using rule 42 (remover)
    BASICTYPE  reduce using rule 42 (remover)
    BOOLEAN    reduce using rule 42 (remover)
    BYTENUM    reduce using rule 42 (remover)
    DOUBLE     reduce using rule 42 (remover)
    DPROGRAM   reduce using rule 42 (remover)
    DSTACK     reduce using rule 42 (remover)
    DSTATE     reduce using rule 42 (remover)
    FLOAT      reduce using rule 42 (remover)
    FOR        reduce using rule 42 (remover)
    FUNC       reduce using rule 42 (remover)
    GOTO       reduce using rule 42 (remover)
    IDENT      reduce using rule 42 (remover)
    IF         reduce using rule 42 (remover)
    IMPORT     reduce using rule 42 (remover)
    INFER      reduce using rule 42 (remover)
    INT        reduce using rule 42 (remover)
    LONG       reduce using rule 42 (remover)
    LPAREN     reduce using rule 42 (remover)
    NEW        reduce using rule 42 (remover)
    NOT        reduce using rule 42 (remover)
    PACKAGE    reduce using rule 42 (remover)
    RBRACE     reduce using rule 42 (remover)
    REM        reduce using rule 42 (remover)
    RETURN     reduce using rule 42 (remover)
    SFUNC      reduce using rule 42 (remover)
    SPACKAGE   reduce using rule 42 (remover)
    SSTRUCT    reduce using rule 42 (remover)
    STEP       reduce using rule 42 (remover)
    STRING     reduce using rule 42 (remover)
    TAG        reduce using rule 42 (remover)
    TSTEP      reduce using rule 42 (remover)
    TYPSTRUCT  reduce using rule 42 (remover)
    VALUE      reduce using rule 42 (remover)
    VAR        reduce using rule 42 (remover)

state 438 // REM IMPORT STRING

   41 remover: REM IMPORT STRING .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 41 (remover)
    ';'        reduce using rule 41 (remover)
    ADDR       reduce using rule 41 (remover)
    AFF        reduce using rule 41 (remover)
    BASICTYPE  reduce using rule 41 (remover)
    BOOLEAN    reduce using rule 41 (remover)
    BYTENUM    reduce using rule 41 (remover)
    DOUBLE     reduce using rule 41 (remover)
    DPROGRAM   reduce using rule 41 (remover)
    DSTACK     reduce using rule 41 (remover)
    DSTATE     reduce using rule 41 (remover)
    FLOAT      reduce using rule 41 (remover)
    FOR        reduce using rule 41 (remover)
    FUNC       reduce using rule 41 (remover)
    GOTO       reduce using rule 41 (remover)
    IDENT      reduce using rule 41 (remover)
    IF         reduce using rule 41 (remover)
    IMPORT     reduce using rule 41 (remover)
    INFER      reduce using rule 41 (remover)
    INT        reduce using rule 41 (remover)
    LONG       reduce using rule 41 (remover)
    LPAREN     reduce using rule 41 (remover)
    NEW        reduce using rule 41 (remover)
    NOT        reduce using rule 41 (remover)
    PACKAGE    reduce using rule 41 (remover)
    RBRACE     reduce using rule 41 (remover)
    REM        reduce using rule 41 (remover)
    RETURN     reduce using rule 41 (remover)
    SFUNC      reduce using rule 41 (remover)
    SPACKAGE   reduce using rule 41 (remover)
    SSTRUCT    reduce using rule 41 (remover)
    STEP       reduce using rule 41 (remover)
    STRING     reduce using rule 41 (remover)
    TAG        reduce using rule 41 (remover)
    TSTEP      reduce using rule 41 (remover)
    TYPSTRUCT  reduce using rule 41 (remover)
    VALUE      reduce using rule 41 (remover)
    VAR        reduce using rule 41 (remover)

state 439 // REM STRUCT IDENT

   40 remover: REM STRUCT IDENT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15

    $end       reduce using rule 40 (remover)
    ';'        reduce using rule 40 (remover)
    ADDR       reduce using rule 40 (remover)
    AFF        reduce using rule 40 (remover)
    BASICTYPE  reduce using rule 40 (remover)
    BOOLEAN    reduce using rule 40 (remover)
    BYTENUM    reduce using rule 40 (remover)
    DOUBLE     reduce using rule 40 (remover)
    DPROGRAM   reduce using rule 40 (remover)
    DSTACK     reduce using rule 40 (remover)
    DSTATE     reduce using rule 40 (remover)
    FLOAT      reduce using rule 40 (remover)
    FOR        reduce using rule 40 (remover)
    FUNC       reduce using rule 40 (remover)
    GOTO       reduce using rule 40 (remover)
    IDENT      reduce using rule 40 (remover)
    IF         reduce using rule 40 (remover)
    IMPORT     reduce using rule 40 (remover)
    INFER      reduce using rule 40 (remover)
    INT        reduce using rule 40 (remover)
    LONG       reduce using rule 40 (remover)
    LPAREN     reduce using rule 40 (remover)
    NEW        reduce using rule 40 (remover)
    NOT        reduce using rule 40 (remover)
    PACKAGE    reduce using rule 40 (remover)
    RBRACE     reduce using rule 40 (remover)
    REM        reduce using rule 40 (remover)
    RETURN     reduce using rule 40 (remover)
    SFUNC      reduce using rule 40 (remover)
    SPACKAGE   reduce using rule 40 (remover)
    SSTRUCT    reduce using rule 40 (remover)
    STEP       reduce using rule 40 (remover)
    STRING     reduce using rule 40 (remover)
    TAG        reduce using rule 40 (remover)
    TSTEP      reduce using rule 40 (remover)
    TYPSTRUCT  reduce using rule 40 (remover)
    VALUE      reduce using rule 40 (remover)
    VAR        reduce using rule 40 (remover)

state 440 // REM DEF IDENT

   39 remover: REM DEF IDENT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15

    $end       reduce using rule 39 (remover)
    ';'        reduce using rule 39 (remover)
    ADDR       reduce using rule 39 (remover)
    AFF        reduce using rule 39 (remover)
    BASICTYPE  reduce using rule 39 (remover)
    BOOLEAN    reduce using rule 39 (remover)
    BYTENUM    reduce using rule 39 (remover)
    DOUBLE     reduce using rule 39 (remover)
    DPROGRAM   reduce using rule 39 (remover)
    DSTACK     reduce using rule 39 (remover)
    DSTATE     reduce using rule 39 (remover)
    FLOAT      reduce using rule 39 (remover)
    FOR        reduce using rule 39 (remover)
    FUNC       reduce using rule 39 (remover)
    GOTO       reduce using rule 39 (remover)
    IDENT      reduce using rule 39 (remover)
    IF         reduce using rule 39 (remover)
    IMPORT     reduce using rule 39 (remover)
    INFER      reduce using rule 39 (remover)
    INT        reduce using rule 39 (remover)
    LONG       reduce using rule 39 (remover)
    LPAREN     reduce using rule 39 (remover)
    NEW        reduce using rule 39 (remover)
    NOT        reduce using rule 39 (remover)
    PACKAGE    reduce using rule 39 (remover)
    RBRACE     reduce using rule 39 (remover)
    REM        reduce using rule 39 (remover)
    RETURN     reduce using rule 39 (remover)
    SFUNC      reduce using rule 39 (remover)
    SPACKAGE   reduce using rule 39 (remover)
    SSTRUCT    reduce using rule 39 (remover)
    STEP       reduce using rule 39 (remover)
    STRING     reduce using rule 39 (remover)
    TAG        reduce using rule 39 (remover)
    TSTEP      reduce using rule 39 (remover)
    TYPSTRUCT  reduce using rule 39 (remover)
    VALUE      reduce using rule 39 (remover)
    VAR        reduce using rule 39 (remover)

state 441 // REM PACKAGE IDENT

   38 remover: REM PACKAGE IDENT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15

    $end       reduce using rule 38 (remover)
    ';'        reduce using rule 38 (remover)
    ADDR       reduce using rule 38 (remover)
    AFF        reduce using rule 38 (remover)
    BASICTYPE  reduce using rule 38 (remover)
    BOOLEAN    reduce using rule 38 (remover)
    BYTENUM    reduce using rule 38 (remover)
    DOUBLE     reduce using rule 38 (remover)
    DPROGRAM   reduce using rule 38 (remover)
    DSTACK     reduce using rule 38 (remover)
    DSTATE     reduce using rule 38 (remover)
    FLOAT      reduce using rule 38 (remover)
    FOR        reduce using rule 38 (remover)
    FUNC       reduce using rule 38 (remover)
    GOTO       reduce using rule 38 (remover)
    IDENT      reduce using rule 38 (remover)
    IF         reduce using rule 38 (remover)
    IMPORT     reduce using rule 38 (remover)
    INFER      reduce using rule 38 (remover)
    INT        reduce using rule 38 (remover)
    LONG       reduce using rule 38 (remover)
    LPAREN     reduce using rule 38 (remover)
    NEW        reduce using rule 38 (remover)
    NOT        reduce using rule 38 (remover)
    PACKAGE    reduce using rule 38 (remover)
    RBRACE     reduce using rule 38 (remover)
    REM        reduce using rule 38 (remover)
    RETURN     reduce using rule 38 (remover)
    SFUNC      reduce using rule 38 (remover)
    SPACKAGE   reduce using rule 38 (remover)
    SSTRUCT    reduce using rule 38 (remover)
    STEP       reduce using rule 38 (remover)
    STRING     reduce using rule 38 (remover)
    TAG        reduce using rule 38 (remover)
    TSTEP      reduce using rule 38 (remover)
    TYPSTRUCT  reduce using rule 38 (remover)
    VALUE      reduce using rule 38 (remover)
    VAR        reduce using rule 38 (remover)

state 442 // REM FUNC IDENT

   37 remover: REM FUNC IDENT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15

    $end       reduce using rule 37 (remover)
    ';'        reduce using rule 37 (remover)
    ADDR       reduce using rule 37 (remover)
    AFF        reduce using rule 37 (remover)
    BASICTYPE  reduce using rule 37 (remover)
    BOOLEAN    reduce using rule 37 (remover)
    BYTENUM    reduce using rule 37 (remover)
    DOUBLE     reduce using rule 37 (remover)
    DPROGRAM   reduce using rule 37 (remover)
    DSTACK     reduce using rule 37 (remover)
    DSTATE     reduce using rule 37 (remover)
    FLOAT      reduce using rule 37 (remover)
    FOR        reduce using rule 37 (remover)
    FUNC       reduce using rule 37 (remover)
    GOTO       reduce using rule 37 (remover)
    IDENT      reduce using rule 37 (remover)
    IF         reduce using rule 37 (remover)
    IMPORT     reduce using rule 37 (remover)
    INFER      reduce using rule 37 (remover)
    INT        reduce using rule 37 (remover)
    LONG       reduce using rule 37 (remover)
    LPAREN     reduce using rule 37 (remover)
    NEW        reduce using rule 37 (remover)
    NOT        reduce using rule 37 (remover)
    PACKAGE    reduce using rule 37 (remover)
    RBRACE     reduce using rule 37 (remover)
    REM        reduce using rule 37 (remover)
    RETURN     reduce using rule 37 (remover)
    SFUNC      reduce using rule 37 (remover)
    SPACKAGE   reduce using rule 37 (remover)
    SSTRUCT    reduce using rule 37 (remover)
    STEP       reduce using rule 37 (remover)
    STRING     reduce using rule 37 (remover)
    TAG        reduce using rule 37 (remover)
    TSTEP      reduce using rule 37 (remover)
    TYPSTRUCT  reduce using rule 37 (remover)
    VALUE      reduce using rule 37 (remover)
    VAR        reduce using rule 37 (remover)

state 443 // STEP INT

   33 stepping: STEP INT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 33 (stepping)
    ';'        reduce using rule 33 (stepping)
    ADDR       reduce using rule 33 (stepping)
    AFF        reduce using rule 33 (stepping)
    BASICTYPE  reduce using rule 33 (stepping)
    BOOLEAN    reduce using rule 33 (stepping)
    BYTENUM    reduce using rule 33 (stepping)
    DOUBLE     reduce using rule 33 (stepping)
    DPROGRAM   reduce using rule 33 (stepping)
    DSTACK     reduce using rule 33 (stepping)
    DSTATE     reduce using rule 33 (stepping)
    FLOAT      reduce using rule 33 (stepping)
    FOR        reduce using rule 33 (stepping)
    FUNC       reduce using rule 33 (stepping)
    GOTO       reduce using rule 33 (stepping)
    IDENT      reduce using rule 33 (stepping)
    IF         reduce using rule 33 (stepping)
    IMPORT     reduce using rule 33 (stepping)
    INFER      reduce using rule 33 (stepping)
    INT        reduce using rule 33 (stepping)
    LONG       reduce using rule 33 (stepping)
    LPAREN     reduce using rule 33 (stepping)
    NEW        reduce using rule 33 (stepping)
    NOT        reduce using rule 33 (stepping)
    PACKAGE    reduce using rule 33 (stepping)
    RBRACE     reduce using rule 33 (stepping)
    REM        reduce using rule 33 (stepping)
    RETURN     reduce using rule 33 (stepping)
    SFUNC      reduce using rule 33 (stepping)
    SPACKAGE   reduce using rule 33 (stepping)
    SSTRUCT    reduce using rule 33 (stepping)
    STEP       reduce using rule 33 (stepping)
    STRING     reduce using rule 33 (stepping)
    TAG        reduce using rule 33 (stepping)
    TSTEP      reduce using rule 33 (stepping)
    TYPSTRUCT  reduce using rule 33 (stepping)
    VALUE      reduce using rule 33 (stepping)
    VAR        reduce using rule 33 (stepping)

state 444 // TSTEP INT

   32 stepping: TSTEP INT . INT

    INT  shift, and goto state 445

state 445 // TSTEP INT INT

   32 stepping: TSTEP INT INT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 32 (stepping)
    ';'        reduce using rule 32 (stepping)
    ADDR       reduce using rule 32 (stepping)
    AFF        reduce using rule 32 (stepping)
    BASICTYPE  reduce using rule 32 (stepping)
    BOOLEAN    reduce using rule 32 (stepping)
    BYTENUM    reduce using rule 32 (stepping)
    DOUBLE     reduce using rule 32 (stepping)
    DPROGRAM   reduce using rule 32 (stepping)
    DSTACK     reduce using rule 32 (stepping)
    DSTATE     reduce using rule 32 (stepping)
    FLOAT      reduce using rule 32 (stepping)
    FOR        reduce using rule 32 (stepping)
    FUNC       reduce using rule 32 (stepping)
    GOTO       reduce using rule 32 (stepping)
    IDENT      reduce using rule 32 (stepping)
    IF         reduce using rule 32 (stepping)
    IMPORT     reduce using rule 32 (stepping)
    INFER      reduce using rule 32 (stepping)
    INT        reduce using rule 32 (stepping)
    LONG       reduce using rule 32 (stepping)
    LPAREN     reduce using rule 32 (stepping)
    NEW        reduce using rule 32 (stepping)
    NOT        reduce using rule 32 (stepping)
    PACKAGE    reduce using rule 32 (stepping)
    RBRACE     reduce using rule 32 (stepping)
    REM        reduce using rule 32 (stepping)
    RETURN     reduce using rule 32 (stepping)
    SFUNC      reduce using rule 32 (stepping)
    SPACKAGE   reduce using rule 32 (stepping)
    SSTRUCT    reduce using rule 32 (stepping)
    STEP       reduce using rule 32 (stepping)
    STRING     reduce using rule 32 (stepping)
    TAG        reduce using rule 32 (stepping)
    TSTEP      reduce using rule 32 (stepping)
    TYPSTRUCT  reduce using rule 32 (stepping)
    VALUE      reduce using rule 32 (stepping)
    VAR        reduce using rule 32 (stepping)

state 446 // AFF FUNC

   16 affordance: AFF FUNC . IDENT  // assoc %right, prec 15
   17 affordance: AFF FUNC . IDENT LBRACE INT RBRACE
   18 affordance: AFF FUNC . IDENT LBRACE STRING RBRACE
   19 affordance: AFF FUNC . IDENT LBRACE STRING INT RBRACE

    IDENT  shift, and goto state 474

state 447 // AFF PACKAGE

   20 affordance: AFF PACKAGE . IDENT  // assoc %right, prec 15
   21 affordance: AFF PACKAGE . IDENT LBRACE INT RBRACE
   22 affordance: AFF PACKAGE . IDENT LBRACE STRING RBRACE
   23 affordance: AFF PACKAGE . IDENT LBRACE STRING INT RBRACE

    IDENT  shift, and goto state 466

state 448 // AFF STRUCT

   24 affordance: AFF STRUCT . IDENT  // assoc %right, prec 15
   25 affordance: AFF STRUCT . IDENT LBRACE INT RBRACE
   26 affordance: AFF STRUCT . IDENT LBRACE STRING RBRACE
   27 affordance: AFF STRUCT . IDENT LBRACE STRING INT RBRACE

    IDENT  shift, and goto state 458

state 449 // AFF EXPR

   28 affordance: AFF EXPR . IDENT  // assoc %right, prec 15
   29 affordance: AFF EXPR . IDENT LBRACE INT RBRACE
   30 affordance: AFF EXPR . IDENT LBRACE STRING RBRACE
   31 affordance: AFF EXPR . IDENT LBRACE STRING INT RBRACE

    IDENT  shift, and goto state 450

state 450 // AFF EXPR IDENT

   28 affordance: AFF EXPR IDENT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15
   29 affordance: AFF EXPR IDENT . LBRACE INT RBRACE
   30 affordance: AFF EXPR IDENT . LBRACE STRING RBRACE
   31 affordance: AFF EXPR IDENT . LBRACE STRING INT RBRACE

    $end       reduce using rule 28 (affordance)
    ';'        reduce using rule 28 (affordance)
    ADDR       reduce using rule 28 (affordance)
    AFF        reduce using rule 28 (affordance)
    BASICTYPE  reduce using rule 28 (affordance)
    BOOLEAN    reduce using rule 28 (affordance)
    BYTENUM    reduce using rule 28 (affordance)
    DOUBLE     reduce using rule 28 (affordance)
    DPROGRAM   reduce using rule 28 (affordance)
    DSTACK     reduce using rule 28 (affordance)
    DSTATE     reduce using rule 28 (affordance)
    FLOAT      reduce using rule 28 (affordance)
    FOR        reduce using rule 28 (affordance)
    FUNC       reduce using rule 28 (affordance)
    GOTO       reduce using rule 28 (affordance)
    IDENT      reduce using rule 28 (affordance)
    IF         reduce using rule 28 (affordance)
    IMPORT     reduce using rule 28 (affordance)
    INFER      reduce using rule 28 (affordance)
    INT        reduce using rule 28 (affordance)
    LBRACE     shift, and goto state 451
    LONG       reduce using rule 28 (affordance)
    LPAREN     reduce using rule 28 (affordance)
    NEW        reduce using rule 28 (affordance)
    NOT        reduce using rule 28 (affordance)
    PACKAGE    reduce using rule 28 (affordance)
    RBRACE     reduce using rule 28 (affordance)
    REM        reduce using rule 28 (affordance)
    RETURN     reduce using rule 28 (affordance)
    SFUNC      reduce using rule 28 (affordance)
    SPACKAGE   reduce using rule 28 (affordance)
    SSTRUCT    reduce using rule 28 (affordance)
    STEP       reduce using rule 28 (affordance)
    STRING     reduce using rule 28 (affordance)
    TAG        reduce using rule 28 (affordance)
    TSTEP      reduce using rule 28 (affordance)
    TYPSTRUCT  reduce using rule 28 (affordance)
    VALUE      reduce using rule 28 (affordance)
    VAR        reduce using rule 28 (affordance)

state 451 // AFF EXPR IDENT LBRACE

   29 affordance: AFF EXPR IDENT LBRACE . INT RBRACE
   30 affordance: AFF EXPR IDENT LBRACE . STRING RBRACE
   31 affordance: AFF EXPR IDENT LBRACE . STRING INT RBRACE

    INT     shift, and goto state 452
    STRING  shift, and goto state 453

state 452 // AFF EXPR IDENT LBRACE INT

   29 affordance: AFF EXPR IDENT LBRACE INT . RBRACE

    RBRACE  shift, and goto state 457

state 453 // AFF EXPR IDENT LBRACE STRING

   30 affordance: AFF EXPR IDENT LBRACE STRING . RBRACE
   31 affordance: AFF EXPR IDENT LBRACE STRING . INT RBRACE

    INT     shift, and goto state 455
    RBRACE  shift, and goto state 454

state 454 // AFF EXPR IDENT LBRACE STRING RBRACE

   30 affordance: AFF EXPR IDENT LBRACE STRING RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 30 (affordance)
    ';'        reduce using rule 30 (affordance)
    ADDR       reduce using rule 30 (affordance)
    AFF        reduce using rule 30 (affordance)
    BASICTYPE  reduce using rule 30 (affordance)
    BOOLEAN    reduce using rule 30 (affordance)
    BYTENUM    reduce using rule 30 (affordance)
    DOUBLE     reduce using rule 30 (affordance)
    DPROGRAM   reduce using rule 30 (affordance)
    DSTACK     reduce using rule 30 (affordance)
    DSTATE     reduce using rule 30 (affordance)
    FLOAT      reduce using rule 30 (affordance)
    FOR        reduce using rule 30 (affordance)
    FUNC       reduce using rule 30 (affordance)
    GOTO       reduce using rule 30 (affordance)
    IDENT      reduce using rule 30 (affordance)
    IF         reduce using rule 30 (affordance)
    IMPORT     reduce using rule 30 (affordance)
    INFER      reduce using rule 30 (affordance)
    INT        reduce using rule 30 (affordance)
    LONG       reduce using rule 30 (affordance)
    LPAREN     reduce using rule 30 (affordance)
    NEW        reduce using rule 30 (affordance)
    NOT        reduce using rule 30 (affordance)
    PACKAGE    reduce using rule 30 (affordance)
    RBRACE     reduce using rule 30 (affordance)
    REM        reduce using rule 30 (affordance)
    RETURN     reduce using rule 30 (affordance)
    SFUNC      reduce using rule 30 (affordance)
    SPACKAGE   reduce using rule 30 (affordance)
    SSTRUCT    reduce using rule 30 (affordance)
    STEP       reduce using rule 30 (affordance)
    STRING     reduce using rule 30 (affordance)
    TAG        reduce using rule 30 (affordance)
    TSTEP      reduce using rule 30 (affordance)
    TYPSTRUCT  reduce using rule 30 (affordance)
    VALUE      reduce using rule 30 (affordance)
    VAR        reduce using rule 30 (affordance)

state 455 // AFF EXPR IDENT LBRACE STRING INT

   31 affordance: AFF EXPR IDENT LBRACE STRING INT . RBRACE

    RBRACE  shift, and goto state 456

state 456 // AFF EXPR IDENT LBRACE STRING INT RBRACE

   31 affordance: AFF EXPR IDENT LBRACE STRING INT RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 31 (affordance)
    ';'        reduce using rule 31 (affordance)
    ADDR       reduce using rule 31 (affordance)
    AFF        reduce using rule 31 (affordance)
    BASICTYPE  reduce using rule 31 (affordance)
    BOOLEAN    reduce using rule 31 (affordance)
    BYTENUM    reduce using rule 31 (affordance)
    DOUBLE     reduce using rule 31 (affordance)
    DPROGRAM   reduce using rule 31 (affordance)
    DSTACK     reduce using rule 31 (affordance)
    DSTATE     reduce using rule 31 (affordance)
    FLOAT      reduce using rule 31 (affordance)
    FOR        reduce using rule 31 (affordance)
    FUNC       reduce using rule 31 (affordance)
    GOTO       reduce using rule 31 (affordance)
    IDENT      reduce using rule 31 (affordance)
    IF         reduce using rule 31 (affordance)
    IMPORT     reduce using rule 31 (affordance)
    INFER      reduce using rule 31 (affordance)
    INT        reduce using rule 31 (affordance)
    LONG       reduce using rule 31 (affordance)
    LPAREN     reduce using rule 31 (affordance)
    NEW        reduce using rule 31 (affordance)
    NOT        reduce using rule 31 (affordance)
    PACKAGE    reduce using rule 31 (affordance)
    RBRACE     reduce using rule 31 (affordance)
    REM        reduce using rule 31 (affordance)
    RETURN     reduce using rule 31 (affordance)
    SFUNC      reduce using rule 31 (affordance)
    SPACKAGE   reduce using rule 31 (affordance)
    SSTRUCT    reduce using rule 31 (affordance)
    STEP       reduce using rule 31 (affordance)
    STRING     reduce using rule 31 (affordance)
    TAG        reduce using rule 31 (affordance)
    TSTEP      reduce using rule 31 (affordance)
    TYPSTRUCT  reduce using rule 31 (affordance)
    VALUE      reduce using rule 31 (affordance)
    VAR        reduce using rule 31 (affordance)

state 457 // AFF EXPR IDENT LBRACE INT RBRACE

   29 affordance: AFF EXPR IDENT LBRACE INT RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 29 (affordance)
    ';'        reduce using rule 29 (affordance)
    ADDR       reduce using rule 29 (affordance)
    AFF        reduce using rule 29 (affordance)
    BASICTYPE  reduce using rule 29 (affordance)
    BOOLEAN    reduce using rule 29 (affordance)
    BYTENUM    reduce using rule 29 (affordance)
    DOUBLE     reduce using rule 29 (affordance)
    DPROGRAM   reduce using rule 29 (affordance)
    DSTACK     reduce using rule 29 (affordance)
    DSTATE     reduce using rule 29 (affordance)
    FLOAT      reduce using rule 29 (affordance)
    FOR        reduce using rule 29 (affordance)
    FUNC       reduce using rule 29 (affordance)
    GOTO       reduce using rule 29 (affordance)
    IDENT      reduce using rule 29 (affordance)
    IF         reduce using rule 29 (affordance)
    IMPORT     reduce using rule 29 (affordance)
    INFER      reduce using rule 29 (affordance)
    INT        reduce using rule 29 (affordance)
    LONG       reduce using rule 29 (affordance)
    LPAREN     reduce using rule 29 (affordance)
    NEW        reduce using rule 29 (affordance)
    NOT        reduce using rule 29 (affordance)
    PACKAGE    reduce using rule 29 (affordance)
    RBRACE     reduce using rule 29 (affordance)
    REM        reduce using rule 29 (affordance)
    RETURN     reduce using rule 29 (affordance)
    SFUNC      reduce using rule 29 (affordance)
    SPACKAGE   reduce using rule 29 (affordance)
    SSTRUCT    reduce using rule 29 (affordance)
    STEP       reduce using rule 29 (affordance)
    STRING     reduce using rule 29 (affordance)
    TAG        reduce using rule 29 (affordance)
    TSTEP      reduce using rule 29 (affordance)
    TYPSTRUCT  reduce using rule 29 (affordance)
    VALUE      reduce using rule 29 (affordance)
    VAR        reduce using rule 29 (affordance)

state 458 // AFF STRUCT IDENT

   24 affordance: AFF STRUCT IDENT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15
   25 affordance: AFF STRUCT IDENT . LBRACE INT RBRACE
   26 affordance: AFF STRUCT IDENT . LBRACE STRING RBRACE
   27 affordance: AFF STRUCT IDENT . LBRACE STRING INT RBRACE

    $end       reduce using rule 24 (affordance)
    ';'        reduce using rule 24 (affordance)
    ADDR       reduce using rule 24 (affordance)
    AFF        reduce using rule 24 (affordance)
    BASICTYPE  reduce using rule 24 (affordance)
    BOOLEAN    reduce using rule 24 (affordance)
    BYTENUM    reduce using rule 24 (affordance)
    DOUBLE     reduce using rule 24 (affordance)
    DPROGRAM   reduce using rule 24 (affordance)
    DSTACK     reduce using rule 24 (affordance)
    DSTATE     reduce using rule 24 (affordance)
    FLOAT      reduce using rule 24 (affordance)
    FOR        reduce using rule 24 (affordance)
    FUNC       reduce using rule 24 (affordance)
    GOTO       reduce using rule 24 (affordance)
    IDENT      reduce using rule 24 (affordance)
    IF         reduce using rule 24 (affordance)
    IMPORT     reduce using rule 24 (affordance)
    INFER      reduce using rule 24 (affordance)
    INT        reduce using rule 24 (affordance)
    LBRACE     shift, and goto state 459
    LONG       reduce using rule 24 (affordance)
    LPAREN     reduce using rule 24 (affordance)
    NEW        reduce using rule 24 (affordance)
    NOT        reduce using rule 24 (affordance)
    PACKAGE    reduce using rule 24 (affordance)
    RBRACE     reduce using rule 24 (affordance)
    REM        reduce using rule 24 (affordance)
    RETURN     reduce using rule 24 (affordance)
    SFUNC      reduce using rule 24 (affordance)
    SPACKAGE   reduce using rule 24 (affordance)
    SSTRUCT    reduce using rule 24 (affordance)
    STEP       reduce using rule 24 (affordance)
    STRING     reduce using rule 24 (affordance)
    TAG        reduce using rule 24 (affordance)
    TSTEP      reduce using rule 24 (affordance)
    TYPSTRUCT  reduce using rule 24 (affordance)
    VALUE      reduce using rule 24 (affordance)
    VAR        reduce using rule 24 (affordance)

state 459 // AFF STRUCT IDENT LBRACE

   25 affordance: AFF STRUCT IDENT LBRACE . INT RBRACE
   26 affordance: AFF STRUCT IDENT LBRACE . STRING RBRACE
   27 affordance: AFF STRUCT IDENT LBRACE . STRING INT RBRACE

    INT     shift, and goto state 460
    STRING  shift, and goto state 461

state 460 // AFF STRUCT IDENT LBRACE INT

   25 affordance: AFF STRUCT IDENT LBRACE INT . RBRACE

    RBRACE  shift, and goto state 465

state 461 // AFF STRUCT IDENT LBRACE STRING

   26 affordance: AFF STRUCT IDENT LBRACE STRING . RBRACE
   27 affordance: AFF STRUCT IDENT LBRACE STRING . INT RBRACE

    INT     shift, and goto state 463
    RBRACE  shift, and goto state 462

state 462 // AFF STRUCT IDENT LBRACE STRING RBRACE

   26 affordance: AFF STRUCT IDENT LBRACE STRING RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 26 (affordance)
    ';'        reduce using rule 26 (affordance)
    ADDR       reduce using rule 26 (affordance)
    AFF        reduce using rule 26 (affordance)
    BASICTYPE  reduce using rule 26 (affordance)
    BOOLEAN    reduce using rule 26 (affordance)
    BYTENUM    reduce using rule 26 (affordance)
    DOUBLE     reduce using rule 26 (affordance)
    DPROGRAM   reduce using rule 26 (affordance)
    DSTACK     reduce using rule 26 (affordance)
    DSTATE     reduce using rule 26 (affordance)
    FLOAT      reduce using rule 26 (affordance)
    FOR        reduce using rule 26 (affordance)
    FUNC       reduce using rule 26 (affordance)
    GOTO       reduce using rule 26 (affordance)
    IDENT      reduce using rule 26 (affordance)
    IF         reduce using rule 26 (affordance)
    IMPORT     reduce using rule 26 (affordance)
    INFER      reduce using rule 26 (affordance)
    INT        reduce using rule 26 (affordance)
    LONG       reduce using rule 26 (affordance)
    LPAREN     reduce using rule 26 (affordance)
    NEW        reduce using rule 26 (affordance)
    NOT        reduce using rule 26 (affordance)
    PACKAGE    reduce using rule 26 (affordance)
    RBRACE     reduce using rule 26 (affordance)
    REM        reduce using rule 26 (affordance)
    RETURN     reduce using rule 26 (affordance)
    SFUNC      reduce using rule 26 (affordance)
    SPACKAGE   reduce using rule 26 (affordance)
    SSTRUCT    reduce using rule 26 (affordance)
    STEP       reduce using rule 26 (affordance)
    STRING     reduce using rule 26 (affordance)
    TAG        reduce using rule 26 (affordance)
    TSTEP      reduce using rule 26 (affordance)
    TYPSTRUCT  reduce using rule 26 (affordance)
    VALUE      reduce using rule 26 (affordance)
    VAR        reduce using rule 26 (affordance)

state 463 // AFF STRUCT IDENT LBRACE STRING INT

   27 affordance: AFF STRUCT IDENT LBRACE STRING INT . RBRACE

    RBRACE  shift, and goto state 464

state 464 // AFF STRUCT IDENT LBRACE STRING INT RBRACE

   27 affordance: AFF STRUCT IDENT LBRACE STRING INT RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 27 (affordance)
    ';'        reduce using rule 27 (affordance)
    ADDR       reduce using rule 27 (affordance)
    AFF        reduce using rule 27 (affordance)
    BASICTYPE  reduce using rule 27 (affordance)
    BOOLEAN    reduce using rule 27 (affordance)
    BYTENUM    reduce using rule 27 (affordance)
    DOUBLE     reduce using rule 27 (affordance)
    DPROGRAM   reduce using rule 27 (affordance)
    DSTACK     reduce using rule 27 (affordance)
    DSTATE     reduce using rule 27 (affordance)
    FLOAT      reduce using rule 27 (affordance)
    FOR        reduce using rule 27 (affordance)
    FUNC       reduce using rule 27 (affordance)
    GOTO       reduce using rule 27 (affordance)
    IDENT      reduce using rule 27 (affordance)
    IF         reduce using rule 27 (affordance)
    IMPORT     reduce using rule 27 (affordance)
    INFER      reduce using rule 27 (affordance)
    INT        reduce using rule 27 (affordance)
    LONG       reduce using rule 27 (affordance)
    LPAREN     reduce using rule 27 (affordance)
    NEW        reduce using rule 27 (affordance)
    NOT        reduce using rule 27 (affordance)
    PACKAGE    reduce using rule 27 (affordance)
    RBRACE     reduce using rule 27 (affordance)
    REM        reduce using rule 27 (affordance)
    RETURN     reduce using rule 27 (affordance)
    SFUNC      reduce using rule 27 (affordance)
    SPACKAGE   reduce using rule 27 (affordance)
    SSTRUCT    reduce using rule 27 (affordance)
    STEP       reduce using rule 27 (affordance)
    STRING     reduce using rule 27 (affordance)
    TAG        reduce using rule 27 (affordance)
    TSTEP      reduce using rule 27 (affordance)
    TYPSTRUCT  reduce using rule 27 (affordance)
    VALUE      reduce using rule 27 (affordance)
    VAR        reduce using rule 27 (affordance)

state 465 // AFF STRUCT IDENT LBRACE INT RBRACE

   25 affordance: AFF STRUCT IDENT LBRACE INT RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 25 (affordance)
    ';'        reduce using rule 25 (affordance)
    ADDR       reduce using rule 25 (affordance)
    AFF        reduce using rule 25 (affordance)
    BASICTYPE  reduce using rule 25 (affordance)
    BOOLEAN    reduce using rule 25 (affordance)
    BYTENUM    reduce using rule 25 (affordance)
    DOUBLE     reduce using rule 25 (affordance)
    DPROGRAM   reduce using rule 25 (affordance)
    DSTACK     reduce using rule 25 (affordance)
    DSTATE     reduce using rule 25 (affordance)
    FLOAT      reduce using rule 25 (affordance)
    FOR        reduce using rule 25 (affordance)
    FUNC       reduce using rule 25 (affordance)
    GOTO       reduce using rule 25 (affordance)
    IDENT      reduce using rule 25 (affordance)
    IF         reduce using rule 25 (affordance)
    IMPORT     reduce using rule 25 (affordance)
    INFER      reduce using rule 25 (affordance)
    INT        reduce using rule 25 (affordance)
    LONG       reduce using rule 25 (affordance)
    LPAREN     reduce using rule 25 (affordance)
    NEW        reduce using rule 25 (affordance)
    NOT        reduce using rule 25 (affordance)
    PACKAGE    reduce using rule 25 (affordance)
    RBRACE     reduce using rule 25 (affordance)
    REM        reduce using rule 25 (affordance)
    RETURN     reduce using rule 25 (affordance)
    SFUNC      reduce using rule 25 (affordance)
    SPACKAGE   reduce using rule 25 (affordance)
    SSTRUCT    reduce using rule 25 (affordance)
    STEP       reduce using rule 25 (affordance)
    STRING     reduce using rule 25 (affordance)
    TAG        reduce using rule 25 (affordance)
    TSTEP      reduce using rule 25 (affordance)
    TYPSTRUCT  reduce using rule 25 (affordance)
    VALUE      reduce using rule 25 (affordance)
    VAR        reduce using rule 25 (affordance)

state 466 // AFF PACKAGE IDENT

   20 affordance: AFF PACKAGE IDENT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15
   21 affordance: AFF PACKAGE IDENT . LBRACE INT RBRACE
   22 affordance: AFF PACKAGE IDENT . LBRACE STRING RBRACE
   23 affordance: AFF PACKAGE IDENT . LBRACE STRING INT RBRACE

    $end       reduce using rule 20 (affordance)
    ';'        reduce using rule 20 (affordance)
    ADDR       reduce using rule 20 (affordance)
    AFF        reduce using rule 20 (affordance)
    BASICTYPE  reduce using rule 20 (affordance)
    BOOLEAN    reduce using rule 20 (affordance)
    BYTENUM    reduce using rule 20 (affordance)
    DOUBLE     reduce using rule 20 (affordance)
    DPROGRAM   reduce using rule 20 (affordance)
    DSTACK     reduce using rule 20 (affordance)
    DSTATE     reduce using rule 20 (affordance)
    FLOAT      reduce using rule 20 (affordance)
    FOR        reduce using rule 20 (affordance)
    FUNC       reduce using rule 20 (affordance)
    GOTO       reduce using rule 20 (affordance)
    IDENT      reduce using rule 20 (affordance)
    IF         reduce using rule 20 (affordance)
    IMPORT     reduce using rule 20 (affordance)
    INFER      reduce using rule 20 (affordance)
    INT        reduce using rule 20 (affordance)
    LBRACE     shift, and goto state 467
    LONG       reduce using rule 20 (affordance)
    LPAREN     reduce using rule 20 (affordance)
    NEW        reduce using rule 20 (affordance)
    NOT        reduce using rule 20 (affordance)
    PACKAGE    reduce using rule 20 (affordance)
    RBRACE     reduce using rule 20 (affordance)
    REM        reduce using rule 20 (affordance)
    RETURN     reduce using rule 20 (affordance)
    SFUNC      reduce using rule 20 (affordance)
    SPACKAGE   reduce using rule 20 (affordance)
    SSTRUCT    reduce using rule 20 (affordance)
    STEP       reduce using rule 20 (affordance)
    STRING     reduce using rule 20 (affordance)
    TAG        reduce using rule 20 (affordance)
    TSTEP      reduce using rule 20 (affordance)
    TYPSTRUCT  reduce using rule 20 (affordance)
    VALUE      reduce using rule 20 (affordance)
    VAR        reduce using rule 20 (affordance)

state 467 // AFF PACKAGE IDENT LBRACE

   21 affordance: AFF PACKAGE IDENT LBRACE . INT RBRACE
   22 affordance: AFF PACKAGE IDENT LBRACE . STRING RBRACE
   23 affordance: AFF PACKAGE IDENT LBRACE . STRING INT RBRACE

    INT     shift, and goto state 468
    STRING  shift, and goto state 469

state 468 // AFF PACKAGE IDENT LBRACE INT

   21 affordance: AFF PACKAGE IDENT LBRACE INT . RBRACE

    RBRACE  shift, and goto state 473

state 469 // AFF PACKAGE IDENT LBRACE STRING

   22 affordance: AFF PACKAGE IDENT LBRACE STRING . RBRACE
   23 affordance: AFF PACKAGE IDENT LBRACE STRING . INT RBRACE

    INT     shift, and goto state 471
    RBRACE  shift, and goto state 470

state 470 // AFF PACKAGE IDENT LBRACE STRING RBRACE

   22 affordance: AFF PACKAGE IDENT LBRACE STRING RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 22 (affordance)
    ';'        reduce using rule 22 (affordance)
    ADDR       reduce using rule 22 (affordance)
    AFF        reduce using rule 22 (affordance)
    BASICTYPE  reduce using rule 22 (affordance)
    BOOLEAN    reduce using rule 22 (affordance)
    BYTENUM    reduce using rule 22 (affordance)
    DOUBLE     reduce using rule 22 (affordance)
    DPROGRAM   reduce using rule 22 (affordance)
    DSTACK     reduce using rule 22 (affordance)
    DSTATE     reduce using rule 22 (affordance)
    FLOAT      reduce using rule 22 (affordance)
    FOR        reduce using rule 22 (affordance)
    FUNC       reduce using rule 22 (affordance)
    GOTO       reduce using rule 22 (affordance)
    IDENT      reduce using rule 22 (affordance)
    IF         reduce using rule 22 (affordance)
    IMPORT     reduce using rule 22 (affordance)
    INFER      reduce using rule 22 (affordance)
    INT        reduce using rule 22 (affordance)
    LONG       reduce using rule 22 (affordance)
    LPAREN     reduce using rule 22 (affordance)
    NEW        reduce using rule 22 (affordance)
    NOT        reduce using rule 22 (affordance)
    PACKAGE    reduce using rule 22 (affordance)
    RBRACE     reduce using rule 22 (affordance)
    REM        reduce using rule 22 (affordance)
    RETURN     reduce using rule 22 (affordance)
    SFUNC      reduce using rule 22 (affordance)
    SPACKAGE   reduce using rule 22 (affordance)
    SSTRUCT    reduce using rule 22 (affordance)
    STEP       reduce using rule 22 (affordance)
    STRING     reduce using rule 22 (affordance)
    TAG        reduce using rule 22 (affordance)
    TSTEP      reduce using rule 22 (affordance)
    TYPSTRUCT  reduce using rule 22 (affordance)
    VALUE      reduce using rule 22 (affordance)
    VAR        reduce using rule 22 (affordance)

state 471 // AFF PACKAGE IDENT LBRACE STRING INT

   23 affordance: AFF PACKAGE IDENT LBRACE STRING INT . RBRACE

    RBRACE  shift, and goto state 472

state 472 // AFF PACKAGE IDENT LBRACE STRING INT RBRACE

   23 affordance: AFF PACKAGE IDENT LBRACE STRING INT RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 23 (affordance)
    ';'        reduce using rule 23 (affordance)
    ADDR       reduce using rule 23 (affordance)
    AFF        reduce using rule 23 (affordance)
    BASICTYPE  reduce using rule 23 (affordance)
    BOOLEAN    reduce using rule 23 (affordance)
    BYTENUM    reduce using rule 23 (affordance)
    DOUBLE     reduce using rule 23 (affordance)
    DPROGRAM   reduce using rule 23 (affordance)
    DSTACK     reduce using rule 23 (affordance)
    DSTATE     reduce using rule 23 (affordance)
    FLOAT      reduce using rule 23 (affordance)
    FOR        reduce using rule 23 (affordance)
    FUNC       reduce using rule 23 (affordance)
    GOTO       reduce using rule 23 (affordance)
    IDENT      reduce using rule 23 (affordance)
    IF         reduce using rule 23 (affordance)
    IMPORT     reduce using rule 23 (affordance)
    INFER      reduce using rule 23 (affordance)
    INT        reduce using rule 23 (affordance)
    LONG       reduce using rule 23 (affordance)
    LPAREN     reduce using rule 23 (affordance)
    NEW        reduce using rule 23 (affordance)
    NOT        reduce using rule 23 (affordance)
    PACKAGE    reduce using rule 23 (affordance)
    RBRACE     reduce using rule 23 (affordance)
    REM        reduce using rule 23 (affordance)
    RETURN     reduce using rule 23 (affordance)
    SFUNC      reduce using rule 23 (affordance)
    SPACKAGE   reduce using rule 23 (affordance)
    SSTRUCT    reduce using rule 23 (affordance)
    STEP       reduce using rule 23 (affordance)
    STRING     reduce using rule 23 (affordance)
    TAG        reduce using rule 23 (affordance)
    TSTEP      reduce using rule 23 (affordance)
    TYPSTRUCT  reduce using rule 23 (affordance)
    VALUE      reduce using rule 23 (affordance)
    VAR        reduce using rule 23 (affordance)

state 473 // AFF PACKAGE IDENT LBRACE INT RBRACE

   21 affordance: AFF PACKAGE IDENT LBRACE INT RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 21 (affordance)
    ';'        reduce using rule 21 (affordance)
    ADDR       reduce using rule 21 (affordance)
    AFF        reduce using rule 21 (affordance)
    BASICTYPE  reduce using rule 21 (affordance)
    BOOLEAN    reduce using rule 21 (affordance)
    BYTENUM    reduce using rule 21 (affordance)
    DOUBLE     reduce using rule 21 (affordance)
    DPROGRAM   reduce using rule 21 (affordance)
    DSTACK     reduce using rule 21 (affordance)
    DSTATE     reduce using rule 21 (affordance)
    FLOAT      reduce using rule 21 (affordance)
    FOR        reduce using rule 21 (affordance)
    FUNC       reduce using rule 21 (affordance)
    GOTO       reduce using rule 21 (affordance)
    IDENT      reduce using rule 21 (affordance)
    IF         reduce using rule 21 (affordance)
    IMPORT     reduce using rule 21 (affordance)
    INFER      reduce using rule 21 (affordance)
    INT        reduce using rule 21 (affordance)
    LONG       reduce using rule 21 (affordance)
    LPAREN     reduce using rule 21 (affordance)
    NEW        reduce using rule 21 (affordance)
    NOT        reduce using rule 21 (affordance)
    PACKAGE    reduce using rule 21 (affordance)
    RBRACE     reduce using rule 21 (affordance)
    REM        reduce using rule 21 (affordance)
    RETURN     reduce using rule 21 (affordance)
    SFUNC      reduce using rule 21 (affordance)
    SPACKAGE   reduce using rule 21 (affordance)
    SSTRUCT    reduce using rule 21 (affordance)
    STEP       reduce using rule 21 (affordance)
    STRING     reduce using rule 21 (affordance)
    TAG        reduce using rule 21 (affordance)
    TSTEP      reduce using rule 21 (affordance)
    TYPSTRUCT  reduce using rule 21 (affordance)
    VALUE      reduce using rule 21 (affordance)
    VAR        reduce using rule 21 (affordance)

state 474 // AFF FUNC IDENT

   16 affordance: AFF FUNC IDENT .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]  // assoc %right, prec 15
   17 affordance: AFF FUNC IDENT . LBRACE INT RBRACE
   18 affordance: AFF FUNC IDENT . LBRACE STRING RBRACE
   19 affordance: AFF FUNC IDENT . LBRACE STRING INT RBRACE

    $end       reduce using rule 16 (affordance)
    ';'        reduce using rule 16 (affordance)
    ADDR       reduce using rule 16 (affordance)
    AFF        reduce using rule 16 (affordance)
    BASICTYPE  reduce using rule 16 (affordance)
    BOOLEAN    reduce using rule 16 (affordance)
    BYTENUM    reduce using rule 16 (affordance)
    DOUBLE     reduce using rule 16 (affordance)
    DPROGRAM   reduce using rule 16 (affordance)
    DSTACK     reduce using rule 16 (affordance)
    DSTATE     reduce using rule 16 (affordance)
    FLOAT      reduce using rule 16 (affordance)
    FOR        reduce using rule 16 (affordance)
    FUNC       reduce using rule 16 (affordance)
    GOTO       reduce using rule 16 (affordance)
    IDENT      reduce using rule 16 (affordance)
    IF         reduce using rule 16 (affordance)
    IMPORT     reduce using rule 16 (affordance)
    INFER      reduce using rule 16 (affordance)
    INT        reduce using rule 16 (affordance)
    LBRACE     shift, and goto state 475
    LONG       reduce using rule 16 (affordance)
    LPAREN     reduce using rule 16 (affordance)
    NEW        reduce using rule 16 (affordance)
    NOT        reduce using rule 16 (affordance)
    PACKAGE    reduce using rule 16 (affordance)
    RBRACE     reduce using rule 16 (affordance)
    REM        reduce using rule 16 (affordance)
    RETURN     reduce using rule 16 (affordance)
    SFUNC      reduce using rule 16 (affordance)
    SPACKAGE   reduce using rule 16 (affordance)
    SSTRUCT    reduce using rule 16 (affordance)
    STEP       reduce using rule 16 (affordance)
    STRING     reduce using rule 16 (affordance)
    TAG        reduce using rule 16 (affordance)
    TSTEP      reduce using rule 16 (affordance)
    TYPSTRUCT  reduce using rule 16 (affordance)
    VALUE      reduce using rule 16 (affordance)
    VAR        reduce using rule 16 (affordance)

state 475 // AFF FUNC IDENT LBRACE

   17 affordance: AFF FUNC IDENT LBRACE . INT RBRACE
   18 affordance: AFF FUNC IDENT LBRACE . STRING RBRACE
   19 affordance: AFF FUNC IDENT LBRACE . STRING INT RBRACE

    INT     shift, and goto state 476
    STRING  shift, and goto state 477

state 476 // AFF FUNC IDENT LBRACE INT

   17 affordance: AFF FUNC IDENT LBRACE INT . RBRACE

    RBRACE  shift, and goto state 481

state 477 // AFF FUNC IDENT LBRACE STRING

   18 affordance: AFF FUNC IDENT LBRACE STRING . RBRACE
   19 affordance: AFF FUNC IDENT LBRACE STRING . INT RBRACE

    INT     shift, and goto state 479
    RBRACE  shift, and goto state 478

state 478 // AFF FUNC IDENT LBRACE STRING RBRACE

   18 affordance: AFF FUNC IDENT LBRACE STRING RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 18 (affordance)
    ';'        reduce using rule 18 (affordance)
    ADDR       reduce using rule 18 (affordance)
    AFF        reduce using rule 18 (affordance)
    BASICTYPE  reduce using rule 18 (affordance)
    BOOLEAN    reduce using rule 18 (affordance)
    BYTENUM    reduce using rule 18 (affordance)
    DOUBLE     reduce using rule 18 (affordance)
    DPROGRAM   reduce using rule 18 (affordance)
    DSTACK     reduce using rule 18 (affordance)
    DSTATE     reduce using rule 18 (affordance)
    FLOAT      reduce using rule 18 (affordance)
    FOR        reduce using rule 18 (affordance)
    FUNC       reduce using rule 18 (affordance)
    GOTO       reduce using rule 18 (affordance)
    IDENT      reduce using rule 18 (affordance)
    IF         reduce using rule 18 (affordance)
    IMPORT     reduce using rule 18 (affordance)
    INFER      reduce using rule 18 (affordance)
    INT        reduce using rule 18 (affordance)
    LONG       reduce using rule 18 (affordance)
    LPAREN     reduce using rule 18 (affordance)
    NEW        reduce using rule 18 (affordance)
    NOT        reduce using rule 18 (affordance)
    PACKAGE    reduce using rule 18 (affordance)
    RBRACE     reduce using rule 18 (affordance)
    REM        reduce using rule 18 (affordance)
    RETURN     reduce using rule 18 (affordance)
    SFUNC      reduce using rule 18 (affordance)
    SPACKAGE   reduce using rule 18 (affordance)
    SSTRUCT    reduce using rule 18 (affordance)
    STEP       reduce using rule 18 (affordance)
    STRING     reduce using rule 18 (affordance)
    TAG        reduce using rule 18 (affordance)
    TSTEP      reduce using rule 18 (affordance)
    TYPSTRUCT  reduce using rule 18 (affordance)
    VALUE      reduce using rule 18 (affordance)
    VAR        reduce using rule 18 (affordance)

state 479 // AFF FUNC IDENT LBRACE STRING INT

   19 affordance: AFF FUNC IDENT LBRACE STRING INT . RBRACE

    RBRACE  shift, and goto state 480

state 480 // AFF FUNC IDENT LBRACE STRING INT RBRACE

   19 affordance: AFF FUNC IDENT LBRACE STRING INT RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 19 (affordance)
    ';'        reduce using rule 19 (affordance)
    ADDR       reduce using rule 19 (affordance)
    AFF        reduce using rule 19 (affordance)
    BASICTYPE  reduce using rule 19 (affordance)
    BOOLEAN    reduce using rule 19 (affordance)
    BYTENUM    reduce using rule 19 (affordance)
    DOUBLE     reduce using rule 19 (affordance)
    DPROGRAM   reduce using rule 19 (affordance)
    DSTACK     reduce using rule 19 (affordance)
    DSTATE     reduce using rule 19 (affordance)
    FLOAT      reduce using rule 19 (affordance)
    FOR        reduce using rule 19 (affordance)
    FUNC       reduce using rule 19 (affordance)
    GOTO       reduce using rule 19 (affordance)
    IDENT      reduce using rule 19 (affordance)
    IF         reduce using rule 19 (affordance)
    IMPORT     reduce using rule 19 (affordance)
    INFER      reduce using rule 19 (affordance)
    INT        reduce using rule 19 (affordance)
    LONG       reduce using rule 19 (affordance)
    LPAREN     reduce using rule 19 (affordance)
    NEW        reduce using rule 19 (affordance)
    NOT        reduce using rule 19 (affordance)
    PACKAGE    reduce using rule 19 (affordance)
    RBRACE     reduce using rule 19 (affordance)
    REM        reduce using rule 19 (affordance)
    RETURN     reduce using rule 19 (affordance)
    SFUNC      reduce using rule 19 (affordance)
    SPACKAGE   reduce using rule 19 (affordance)
    SSTRUCT    reduce using rule 19 (affordance)
    STEP       reduce using rule 19 (affordance)
    STRING     reduce using rule 19 (affordance)
    TAG        reduce using rule 19 (affordance)
    TSTEP      reduce using rule 19 (affordance)
    TYPSTRUCT  reduce using rule 19 (affordance)
    VALUE      reduce using rule 19 (affordance)
    VAR        reduce using rule 19 (affordance)

state 481 // AFF FUNC IDENT LBRACE INT RBRACE

   17 affordance: AFF FUNC IDENT LBRACE INT RBRACE .  [$end, ';', ADDR, AFF, BASICTYPE, BOOLEAN, BYTENUM, DOUBLE, DPROGRAM, DSTACK, DSTATE, FLOAT, FOR, FUNC, GOTO, IDENT, IF, IMPORT, INFER, INT, LONG, LPAREN, NEW, NOT, PACKAGE, RBRACE, REM, RETURN, SFUNC, SPACKAGE, SSTRUCT, STEP, STRING, TAG, TSTEP, TYPSTRUCT, VALUE, VAR]

    $end       reduce using rule 17 (affordance)
    ';'        reduce using rule 17 (affordance)
    ADDR       reduce using rule 17 (affordance)
    AFF        reduce using rule 17 (affordance)
    BASICTYPE  reduce using rule 17 (affordance)
    BOOLEAN    reduce using rule 17 (affordance)
    BYTENUM    reduce using rule 17 (affordance)
    DOUBLE     reduce using rule 17 (affordance)
    DPROGRAM   reduce using rule 17 (affordance)
    DSTACK     reduce using rule 17 (affordance)
    DSTATE     reduce using rule 17 (affordance)
    FLOAT      reduce using rule 17 (affordance)
    FOR        reduce using rule 17 (affordance)
    FUNC       reduce using rule 17 (affordance)
    GOTO       reduce using rule 17 (affordance)
    IDENT      reduce using rule 17 (affordance)
    IF         reduce using rule 17 (affordance)
    IMPORT     reduce using rule 17 (affordance)
    INFER      reduce using rule 17 (affordance)
    INT        reduce using rule 17 (affordance)
    LONG       reduce using rule 17 (affordance)
    LPAREN     reduce using rule 17 (affordance)
    NEW        reduce using rule 17 (affordance)
    NOT        reduce using rule 17 (affordance)
    PACKAGE    reduce using rule 17 (affordance)
    RBRACE     reduce using rule 17 (affordance)
    REM        reduce using rule 17 (affordance)
    RETURN     reduce using rule 17 (affordance)
    SFUNC      reduce using rule 17 (affordance)
    SPACKAGE   reduce using rule 17 (affordance)
    SSTRUCT    reduce using rule 17 (affordance)
    STEP       reduce using rule 17 (affordance)
    STRING     reduce using rule 17 (affordance)
    TAG        reduce using rule 17 (affordance)
    TSTEP      reduce using rule 17 (affordance)
    TYPSTRUCT  reduce using rule 17 (affordance)
    VALUE      reduce using rule 17 (affordance)
    VAR        reduce using rule 17 (affordance)

state 482 // IMPORT STRING

   14 importDeclaration: IMPORT STRING .  [$end, ';', AFF, DPROGRAM, DSTACK, DSTATE, FUNC, IMPORT, PACKAGE, RBRACE, REM, SFUNC, SPACKAGE, SSTRUCT, STEP, TAG, TSTEP, TYPSTRUCT, VAR]

    $end       reduce using rule 14 (importDeclaration)
    ';'        reduce using rule 14 (importDeclaration)
    AFF        reduce using rule 14 (importDeclaration)
    DPROGRAM   reduce using rule 14 (importDeclaration)
    DSTACK     reduce using rule 14 (importDeclaration)
    DSTATE     reduce using rule 14 (importDeclaration)
    FUNC       reduce using rule 14 (importDeclaration)
    IMPORT     reduce using rule 14 (importDeclaration)
    PACKAGE    reduce using rule 14 (importDeclaration)
    RBRACE     reduce using rule 14 (importDeclaration)
    REM        reduce using rule 14 (importDeclaration)
    SFUNC      reduce using rule 14 (importDeclaration)
    SPACKAGE   reduce using rule 14 (importDeclaration)
    SSTRUCT    reduce using rule 14 (importDeclaration)
    STEP       reduce using rule 14 (importDeclaration)
    TAG        reduce using rule 14 (importDeclaration)
    TSTEP      reduce using rule 14 (importDeclaration)
    TYPSTRUCT  reduce using rule 14 (importDeclaration)
    VAR        reduce using rule 14 (importDeclaration)

