package ccInput        // "input" must be reserved?  got errors until I renamed this

import "glfw"

import "main"
import "entity"
import "game"



var currMouseX f64
var currMouseY f64

// key codes 
// 		developer quick exit 
var GLFW_KEY_5         i32 = 53
//		shooting
var GLFW_KEY_SPACE     i32 = 32
//		escape to menu
var GLFW_KEY_ESCAPE    i32 = 256
var GLFW_KEY_ENTER     i32 = 257
var GLFW_KEY_TAB       i32 = 258
var GLFW_KEY_BACKSPACE i32 = 259
// 		directional keys 
var	GLFW_KEY_A         i32 = 65
var	GLFW_KEY_D         i32 = 68
var	GLFW_KEY_W         i32 = 87
var	GLFW_KEY_S         i32 = 83

// cached values 
// 		move direction 
var moveLeft  bool
var moveRight bool
var moveUp    bool
var moveDown  bool
//		buttons 
var prevMouseX f64
var prevMouseY f64



func Init() () {
	prevMouseX = 0.0D - 7.0D
	prevMouseY = 0.0D - 7.0D

	glfw.SetKeyCallback("window", "onKeyEvent")
	glfw.SetMouseButtonCallback("window", "onMouseButtonEvent")
	glfw.SetCursorPosCallback("window", "onCursorPosEvent")
}


func Update() () {
	// snake motion input status 
	moveLeft  = keyIsDown(GLFW_KEY_A)
	moveRight = keyIsDown(GLFW_KEY_D)
	moveUp    = keyIsDown(GLFW_KEY_W)
	moveDown  = keyIsDown(GLFW_KEY_S)
	SetSnakeVelocity()
}


// mouse buttons 
var LeftMouseButtonDown bool // cache status 
func onMouseButtonEvent(window str, button i32, action i32, mods i32) () {
	if action == /* Release */ 0 {
		if  button == glfw.MouseButtonLeft {
			LeftMouseButtonDown = false
		}
	} else {
		// do nothing if action == Repeat 

		if action == /* Press */ 1 {
			LeftMouseButtonDown = true

			if game.Mode >= game.MODE_Playing {
				entity.Shoot(0)
			} else { // must be in menu 
				btn := game.GetTextOnButtonThatPointerIsOn()
				str.print(btn)

				if btn == "Play" {
					game.SetMode(game.MODE_Playing)
					glfw.SetInputMode("window", glfw.Cursor, glfw.CursorDisabled)
				} else { // FIXME when CX gets switches 
					if btn == "Options" {
						game.SetOptionsMenu()
					} 
					
					if btn == "Quit" {
						glfw.SetShouldClose("window", glfw.True)
					}
					
					if btn == game.MenuItemBack {
						game.SetMainMenu()
					}
				}
			}
		}
	}
}



// mouse position

func onCursorPosEvent(window str, x f64, y f64) () {
	currMouseX = x
	currMouseY = y

	// if not the 1st time (when delta would have no meaning) 
	if prevMouseX >= 0.0D && // event values never negative 
		prevMouseY >= 0.0D { //	

		if game.Mode >= game.MODE_Playing {
			deltaX := x - prevMouseX
			deltaY := y - prevMouseY
			// invert from pixel to world aligned space 
			// (value increases going up the screen)
			deltaY = 0.0D - deltaY 

			//a := str.concat("cursor event delta ---- x ", f64.str(deltaX))
			//b := str.concat(", y "                      , f64.str(deltaY))
			//str.print(str.concat(a, b))

			game.SetSnakeAimAndSize(
				f64.f32(deltaX),
				f64.f32(deltaY))
		} else { // must be in menu 
			game.SetIdOfButtonThatPointerIsOn(x, y)

			// respond to mouse buttons 
			if game.Mode == game.MODE_OptionsMenu && LeftMouseButtonDown {
				t := game.GetTextOnButtonThatPointerIsOn()

				if t == game.AnalogControlsSensitivityXText {
					fx := f64.f32(x) / i32.f32(game.ScreenNumPixelsWide)
					fx *= (game.WindowExtentX * 2.0)
					str.print("fraction")
					/* from left edge */ 
					offset := game.WindowExtentX - game.LongestCurrMExtent 
					fx -= offset
					fx /= (game.LongestCurrMExtent * 2.0)

					if fx > 1.0 {
						fx = 1.0
					}

					if fx < 0.0 {
						fx = 0.0
					}

					f32.print(fx)

					game.SetAnalogControlsSensitivityX(fx)
					//f32.print(game.WindowExtentX)
				}

				if t == game.AnalogControlsSensitivityYText {
					str.print("hovering over sens y")
					f64.print(y)
				}
			}

		}
	}
	
	prevMouseX = x
	prevMouseY = y
}



// keys

func onKeyEvent(window str, key i32, scancode i32, action i32, mods i32) () {
	// action == 0, release 
	// action == 1, press 
	// action == 2, is an autorepeat event, generated by keys that are held longer than a second

	if /* not a repeat */ action != 2 {
		if /* press */ action == 1 {
			if key == GLFW_KEY_SPACE {
				entity.Shoot(0)
			}	

			if key == GLFW_KEY_5 {
				glfw.SetShouldClose("window", glfw.True)
			}

			if key == GLFW_KEY_ESCAPE || 
				key == GLFW_KEY_ENTER ||
				key == GLFW_KEY_TAB || 
				key == GLFW_KEY_BACKSPACE {

				game.SetMode(game.MODE_OptionsMenu)
				glfw.SetInputMode("window", glfw.Cursor, glfw.CursorNormal)
			}
		}
	}
}


func keyIsDown(key i32) (out bool) {
	// GetKey() never gives a "repeat" action (only gives 0 & 1)

	if glfw.GetKey("window", key) == 1 {
		return true
	}

	return false
}


func SetSnakeVelocity() () {
	// horizontal 

	if moveLeft {
		entity.ForceNegativeVelocityAndBloomIt(0, true)
	} else {
		if moveRight {
			entity.ForcePositiveVelocityAndBloomIt(0, true)
		} else {
			entity.SlowDownInAxis(0, true)
		}
	}
	


	// vertical 

	if moveDown {
		entity.ForceNegativeVelocityAndBloomIt(0, false)
	} else {
		if moveUp {
			entity.ForcePositiveVelocityAndBloomIt(0, false)
		} else {
			entity.SlowDownInAxis(0, false)
		}
	}
}

