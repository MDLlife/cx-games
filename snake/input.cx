package ccInput        // "input" must be reserved?  got errors until I renamed this

import "glfw"

import "main"
import "entity"
import "game"



var GLFW_KEY_5     i32 = 53
var GLFW_KEY_SPACE i32 = 32

// directional keys 
var	GLFW_KEY_A i32 = 65
var	GLFW_KEY_D i32 = 68
var	GLFW_KEY_W i32 = 87
var	GLFW_KEY_S i32 = 83

// move direction 
var moveLeft bool
var moveRight bool
var moveUp bool
var moveDown bool



func Init() () {
	glfw.SetInputMode("window", glfw.Cursor, glfw.CursorDisabled)
	glfw.SetKeyCallback("window", "onKeyEvent")
	glfw.SetMouseButtonCallback("window", "onMouseButtonEvent")
	glfw.SetCursorPosCallback("window", "onCursorPosEvent")
}



// mouse buttons 

func onMouseButtonEvent(window str, key i32, action i32, mods i32) () {
	if action == /* Press */ 1 {
		entity.Shoot(0)
	}
}



// mouse position

var prevMouseX f64
var prevMouseY f64
func onCursorPosEvent(window str, x f64, y f64) () {
	//x, y := glfw.GetCursorPos("window")
	//str.print("mouse cursor at:")

	if prevMouseX != 0.0D && prevMouseY != 0.0D {
		deltaX := x - prevMouseX
		deltaY := y - prevMouseY
		game.AdjustSnakeAimAndSize(
			deltaX * 1.4D, 
			deltaY / 6.0D)
	}
	
	prevMouseX = x
	prevMouseY = y
}



// keys

func onKeyEvent(window str, key i32, scancode i32, action i32, mods i32) () {
	//action == 2, is an autorepeat event, generated for keys that are held longer than a second

	if key == GLFW_KEY_5 {
		glfw.SetShouldClose("window", true)
	}



	if /* not a repeat */ action != 2 {
		// shoot 

		if key == GLFW_KEY_SPACE && action == 1 {
			entity.Shoot(0)
		}



		// snake tail motion 

		if key == GLFW_KEY_A {
			moveLeft = getMoveStatus(action, key)
		}

		if key == GLFW_KEY_D {
			moveRight = getMoveStatus(action, key)
		}

		if key == GLFW_KEY_W {
			moveUp = getMoveStatus(action, key)
		}

		if key == GLFW_KEY_S {
			moveDown = getMoveStatus(action, key)
		}
	}
}


func getMoveStatus(action i32, key i32) (out bool) {
	if /* release */ action == 0 {
		return false
	} else {
		return true
	}
}






func SetSnakeVelocity() () {
	// horizontal 

	if moveLeft {
		entity.ForceNegativeVelocityAndBloomIt(0, true)
	} else {
		if moveRight {
			entity.ForcePositiveVelocityAndBloomIt(0, true)
		} else {
			entity.SlowDownInAxis(0, true)
		}
	}
	


	// vertical 

	if moveDown {
		entity.ForceNegativeVelocityAndBloomIt(0, false)
	} else {
		if moveUp {
			entity.ForcePositiveVelocityAndBloomIt(0, false)
		} else {
			entity.SlowDownInAxis(0, false)
		}
	}
}
