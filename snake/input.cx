package ccInput        // "input" must be reserved?  got errors until I renamed this

import "main"
import "entity"
import "game"



var GLFW_KEY_5     i32 = 53
var GLFW_KEY_SPACE i32 = 32

var	GLFW_KEY_A i32 = 65
var	GLFW_KEY_D i32 = 68
var	GLFW_KEY_W i32 = 87
var	GLFW_KEY_S i32 = 83

var	GLFW_KEY_I i32 = 73
var GLFW_KEY_J i32 = 74
var GLFW_KEY_K i32 = 75
var GLFW_KEY_L i32 = 76

var headMoveLeft bool
var headMoveRight bool
var headMoveUp bool
var headMoveDown bool

var tailMoveLeft bool
var tailMoveRight bool
var tailMoveUp bool
var tailMoveDown bool



func OnKeyEvent (window str, key i32, scancode i32, action i32, mods i32) () {
	//action == 2, is an autorepeat event, generated for keys that are held longer than a second

	if key == GLFW_KEY_5 {
		glfw.SetShouldClose("window", true)
	}



	if /* not repeat */ action != 2 {
		// shoot 

		if key == GLFW_KEY_SPACE && action == 1 {
			main.Shoot()
		}



		// snake tail motion 

		if key == GLFW_KEY_A {
			tailMoveLeft = ccInput.GetMoveStatus(action, key)
		}

		if key == GLFW_KEY_D {
			tailMoveRight = ccInput.GetMoveStatus(action, key)
		}

		if key == GLFW_KEY_W {
			tailMoveUp = ccInput.GetMoveStatus(action, key)
		}

		if key == GLFW_KEY_S {
			tailMoveDown = ccInput.GetMoveStatus(action, key)
		}



		// snake head motion 

		if key == GLFW_KEY_J {
			headMoveLeft = ccInput.GetMoveStatus(action, key)
		}

		if key == GLFW_KEY_L {
			headMoveRight = ccInput.GetMoveStatus(action, key)
		}

		if key == GLFW_KEY_I {
			headMoveUp = ccInput.GetMoveStatus(action, key)
		}

		if key == GLFW_KEY_K {
			headMoveDown = ccInput.GetMoveStatus(action, key)
		}
	}
}


func GetMoveStatus(action i32, key i32) (out bool) {
	if /* release */ action == 0 {
		return false
	} else {
		return true
	}
}
























// mouse

var prevMouseX f64
var prevMouseY f64
func OnCursorPosEvent(window str, x f64, y f64) () {
	//x, y := glfw.GetCursorPos("window")
	//str.print("mouse cursor at:")

	deltaX := x - prevMouseX
	deltaY := y - prevMouseY
	game.AdjustSnakeAimAndSize(deltaX, deltaY)
	prevMouseX = x
	prevMouseY = y
}
