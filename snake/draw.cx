package draw

import "gl"
//import "glfw"
import "gltext"

import "entity"
import "game"



var dubPi f32



func Init() () {
	dubPi = 2.0 * 3.141592654
	str.print("--- draw.Init()")
	setupFonts()
}


func All() () {
	Snake()
	Entities()
	Text()
}


func Entities() () {
	// skipping 0 (reserved for player entity), which has it's own draw func. 
	// for now, all else are spheres 
	for i := 1; i < []f32.len(entity.X); i++ {
		//BELOW LINE *SHOULD* WORK but can't seem to write to bool arrays 
		//if []bool.read(entity.Dead, i) == false {
		
		if entity.IsAlive(i) {
			Sphere(
				[]f32.read(entity.X, i), 
				[]f32.read(entity.Y, i), 
				[]f32.read(entity.Rad, i),
				[]f32.read(entity.Red, i), 
				[]f32.read(entity.Green, i), 
				[]f32.read(entity.Blue, i))
		}
	}
}


func Sphere(x f32, y f32, radius f32, red f32, green f32, blue f32) () {
	gl.Begin(gl.POLYGON)
	gl.Color3f(red, green, blue)

	for i := 0; i < 20; i++ {
		finalX := x + radius * f32.cos(i32.f32(i) * dubPi / 20.0)
		finalY := y + radius * f32.sin(i32.f32(i) * dubPi / 20.0)

		gl.Vertex2f(finalX, finalY)
	}

	gl.End()
}


func Snake() () {
	// start with tip of tail (drawn at minimum size), 
	// plot out the remaining spheres.
	// overlap them by approximately half their radius.
	// (+) resize them as we go towards head. 
	
	pasl := 0.0 // progress along snake length 
	mp /* max progress */ := f64.f32(game.CurrSnakeExtent) * 2.0
	
	// offset from center 
	xOff := f64.f32(game.CurrSnakeExtent * f64.cos(game.CurrSnakeAim))
	yOff := f64.f32(game.CurrSnakeExtent * f64.sin(game.CurrSnakeAim)) 
	


	// body sections

	tX := []f32.read(entity.X, 0) - xOff
	tY := []f32.read(entity.Y, 0) - yOff
	cr := /* current */ game.TailRadius



	// head

	hX := []f32.read(entity.X, 0) + xOff
	hY := []f32.read(entity.Y, 0) + yOff
	
	// deltas/offsets from tail 
	hOffX := hX - tX 
	hOffY := hY - tY
	radiusDelta := game.HeadRadius - cr

	Sphere(hX, hY, game.HeadRadius, 0.0, 0.0, 1.0)
	


	// draw body 

	for pasl <= mp {
		fsp /* fractional sample point */ := pasl / mp

		Sphere(
			tX + fsp * hOffX, 
			tY + fsp * hOffY, 
			/* 0.005 */ cr, 
			1.0, 1.0, 1.0)

		cr += fsp * radiusDelta


		pasl += cr


	}
}


func Text() () {
	//gl.Color4f(0.5, 0.3, 0.8, 1.0)
	//gltext.Printf("Roboto100", 0.0, 0.0, "Hello World")
	
	EntityText([]f32.read(entity.X, 0), []f32.read(entity.Y, 0), 0.0, 0.0, "mouse + W A S D      5")
}


func EntityText(x f32, y f32, offsetX f32, offsetY f32, s str) () {
	// text space positions 
	midX := i32.f32(game.Width)  / 2.0
	midY := i32.f32(game.Height) / 2.0
	dfc /* distance from center */ := x / game.ScreenBoundsRight
	x := offsetX + midX + midX * dfc
	y := offsetY + i32.f32(game.Height) - (y - game.ScreenBounds.Bottom) * midY

	gl.Color4f(0.8, 0.0, 0.8, 1.0)
	gltext.Printf("Roboto50", x, y, s)
}



// private 

func setupFonts() () {
	wd := os.GetWorkingDirectory()
	fontFile := str.concat(wd, "fonts/roboto-light.ttf")

	os.Open(fontFile)
	gltext.LoadTrueType("Roboto100", fontFile, 100, 32, 127, gltext.LeftToRight)
	os.Close(fontFile)
	
	os.Open(fontFile)
	gltext.LoadTrueType("Roboto50", fontFile, 50, 32, 127, gltext.LeftToRight)
	os.Close(fontFile)

	gl.Enable(gl.DEPTH_TEST)
	gl.DepthFunc(gl.LESS)
	gl.ClearColor(0.1, 0.1, 0.1, 0.0)
}
