package draw

// common  
import "gl"
import "gltext"

// game 
import "entity"
import "game"



// path colors (each node dims/brightens from prior color) 
var red     f32
var green   f32
var blue    f32
var dimming bool



func Init() () {
	setupFonts()
	str.print("--- draw.Init()")
}


func All() () {
	/* test circles 
	
	x, y := game.GetPosOfPerfectRadiusVisualizer()
	Circle(x, y, 0.07, 1.0, 0.0, 0.0)	

	x, y := game.GetPosOfBoxyDistanceVisualizer()
	Circle(x, y, 0.07, 0.0, 1.0, 0.0)	
	
	*/

	// // draw big debug missile in middle of screen, ignoring "camera" pos 
	//[]f32.write(entity.X, 1, 0.0)
	//[]f32.write(entity.Y, 1, 0.0)
	//cameraIgnoringPolygon(1, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0)

	/* draw */ //circlesAtPathEdgePoints()
	/* draw */ menuMaybe()
	/* draw */ Snake()
	/* draw */ Entities()
	/* draw */ path()
	/* draw */ eventText()
	/* draw */ maybeHelpText()
	
	//EntityAttachedText([]f32.read(entity.X, 0), []f32.read(entity.Y, 0), 0.0, 0.0, s) // ...moves with player 
}


func circlesAtPathEdgePoints() () {
	rad := 0.01

	id := 0 // of node 

	// 1st string all lefts together 
	for game.PathNodeExists(id) {
		lX, lY := game.GetLeftVertexFor(id)
		Circle(lX, lY, rad, 0.8, 0.8, 0.8)
		id++
	}



	id--

	// now string all rights together, going from tip of tail, back to root/head 
	for game.PathNodeExists(id) {
		rX, rY := game.GetRightVertexFor(id)
		Circle(rX, rY, rad, 0.8, 0.8, 0.8)
		id--
	}
}


func path() () {
	red   = 0.2
	green = 0.4
	blue  = 0.7
	dimming = false

	// player pos 
	pX := []f32.read(entity.X, 0)
	pY := []f32.read(entity.Y, 0)

	id := 0 // of node 
	for game.PathNodeExists(id) {
		//str.print("path node:")
		//i32.print(id)

		gl.Begin(gl.POLYGON)
		gl.Color3f(red, green, blue)

		// near & far points/vertices 
		nLX, nLY, 
		nRX, nRY,
		fLX, fLY, 
		fRX, fRY := game.Get4NodeVertices(id)
		gl.Vertex2f(nLX - pX, nLY - pY)	
		gl.Vertex2f(nRX - pX, nRY - pY)	
		gl.Vertex2f(fLX - pX, fLY - pY)	
		gl.Vertex2f(fRX - pX, fRY - pY)

		gl.End()

		setNodeColor()
		id++
	}
}


func setNodeColor() () {
	ccd /* color channel delta */ := 0.05
	if dimming {
		ccd = 0.0 - ccd
	}

	red   += ccd
	green += ccd

	// maybe toggle dimming/brightening flag 
	if dimming {
		if red < 0.0 && green < 0.0 {
			dimming = false
		}
	} else {
		if red > 1.0 && green > 1.0 {
			dimming = true
		}
	}
}


func Entities() () {
	// skipping 0 (reserved for player entity), which has it's own draw func. 

	for i := 1; i < []f32.len(entity.X); i++ {
		if entity.IsAlive(i) {
			Polygon(
				i, 
				[]f32.read(entity.X, i),
				[]f32.read(entity.Y, i),
				[]f32.read(entity.Rad, i),
				[]f32.read(entity.Red, i), 
				[]f32.read(entity.Green, i), 
				[]f32.read(entity.Blue, i))
		}
	}
}


func cameraIgnoringPolygon(id i32, x f32, y f32, radius f32, red f32, green f32, blue f32) () {
	gl.Begin(gl.POLYGON)
	gl.Color3f(red, green, blue)
	
	num   := []i32.read(entity.NumVertices,        id)
	start := []i32.read(entity.IndexToFirstVertex, id)

	for i := start; i < start + num; i++ {
		xx := radius * []f32.read(entity.VertexSoupX, i)
		yy := radius * []f32.read(entity.VertexSoupY, i)		

		gl.Vertex2f(xx, yy)
	}

	gl.End()
}


func Polygon(entityId i32, x f32, y f32, radius f32, red f32, green f32, blue f32) () {
	// base "camera" on player/snake 
	x -= []f32.read(entity.X, entity.SnakeId)
	y -= []f32.read(entity.Y, entity.SnakeId)

	gl.Begin(gl.POLYGON)
	gl.Color3f(red, green, blue)
	
	start := []i32.read(entity.IndexToFirstVertex, entityId)
	num   := []i32.read(entity.NumVertices,        entityId)
	
	//str.print("start & num")
	//i32.print(start)
	//i32.print(num)

	for i := start; i < start + num; i++ { // i == vertex id 
		gl.Vertex2f(
			x + []f32.read(entity.VertexSoupX, i), 
			y + []f32.read(entity.VertexSoupY, i))
	}

	gl.End()
}


func Rect(top f32, right f32, bottom f32, left f32, red f32, green f32, blue f32) () {
	gl.Begin(gl.POLYGON)

	gl.Color3f(red, green, blue)
	
	gl.Vertex2f(right, top)	
	gl.Vertex2f(right, bottom)

	div := 3.0 // horizontal gradient divisor 
	gl.Color3f(red/div, green/div, blue/div)

	gl.Vertex2f(left,  bottom)
	gl.Vertex2f(left,  top)

	gl.End()
}


func Circle(x f32, y f32, radius f32, red f32, green f32, blue f32) () {
	gl.Begin(gl.POLYGON)
	gl.Color3f(red, green, blue)

	
	for i := 0; i < game.NumCircleLUTPoints; i++ {
		gl.Vertex2f(
			x + radius * []f32.read(game.CirclePointsX, i),
			y + radius * []f32.read(game.CirclePointsY, i))
	}

	gl.End()
}


func aimedYetDecimatedCircleApproximation(
	step i32, // the stride thru indices (decimates game.NumCircleLUTPoints, for lower resolution) 
	x f32, 
	y f32, 
	radius f32, 
	angle f32, 
	red f32, green f32, blue f32) () {

	//
	//
	// potentially could add no vertices  



	gl.Begin(gl.POLYGON)
	gl.Color3f(red, green, blue)

	// insane number (goes outside of valid index range, requires sanitizing)
	startIdx := 0
	if game.CirclePointsAngleIncrement > 0.0 {
		startIdx = f32.i32(angle / game.CirclePointsAngleIncrement)
	}

	// (FIXME if perfection is needed later... should "round" instead of
	// effectively "floor"ing, which means subtracting half a radian grain?) 
	max := game.NumCircleLUTPoints + startIdx

	for i := startIdx; i < max; i += step {
		si := i // sane index 

		for si >= game.NumCircleLUTPoints {
			si -= game.NumCircleLUTPoints
		}

		gl.Vertex2f(
			x + radius * []f32.read(game.CirclePointsX, si),
			y + radius * []f32.read(game.CirclePointsY, si))
	}

	gl.End()
}


func Triangle(x f32, y f32, radius f32, angle f32, red f32, green f32, blue f32) () {
	gl.Begin(gl.POLYGON)
	gl.Color3f(red, green, blue)

	aX := radius * f32.sin(angle)
	aY := radius * f32.cos(angle)
	bX := radius * f32.sin(angle + game.ThirdOf360)
	bY := radius * f32.cos(angle + game.ThirdOf360)
	cX := radius * f32.sin(angle + game.TwoThirdsOf360)
	cY := radius * f32.cos(angle + game.TwoThirdsOf360)

	gl.Vertex2f(x + aX, y + aY)
	gl.Vertex2f(x + bX, y + bY)
	gl.Vertex2f(x + cX, y + cY)

	gl.End()
}


func Snake() () {
	sin := f32.sin(game.CurrSnakeAim)
	cos := f32.cos(game.CurrSnakeAim) 

	// head/tail deltas (from center of snake) 
	xOff := game.CurrSnakeExtent * sin
	yOff := game.CurrSnakeExtent * cos
	
	// center pos 
	cX := 0.0 // []f32.read(entity.X, entity.SnakeId)
	cY := 0.0 // []f32.read(entity.Y, entity.SnakeId)

	// tail pos 
	tX := cX - xOff
	tY := cY - yOff

	// head pos 
	hX := cX + xOff
	hY := cY + yOff
	


	entity.SetupChainFromAToB(
		// tail 
		tX, 
		tY, 
		game.TailRadius, 

		// head 
		hX, 
		hY, 
		game.HeadRadius,

		true)

	// draw head 
	//Circle(entity.BX, entity.BY, game.HeadRadius, 0.0, 0.0, 1.0)
	Triangle(entity.BX, entity.BY, game.HeadRadius, game.CurrSnakeAim, 0.0, 0.0, 1.0)

	drawDirectionalInputIndicators(sin, cos)

	// draw rotation (center hinge) point 
	Circle(cX, cY, game.HeadRadius / 3.0, 0.0, 0.0, 1.0)



	// draw most segments of snake's body 

	for entity.ChainProgress <= entity.ChainLength {
		// fraction towards destination 
		ftd := entity.ChainProgress / entity.ChainLength
		
		// current radius 
		cRad := game.TailRadius + ftd * entity.DelRad

		aimedYetDecimatedCircleApproximation(
			5,
			tX + ftd * entity.DelX, 
			tY + ftd * entity.DelY, 
			cRad, 
			game.CurrSnakeAim,
			0.0, 0.0, 0.0)

		entity.AdvanceChainProgressBy(cRad)
	}
}


func eventText() () { // .... @ top of screen 
	if game.EventTextTimeFadeStarts != 0.0 && // (text has expiry set &...) 
		game.EventTextIntensity > 0.0 {       // (...still has some color intensity) 

		gl.Color4f(
			game.EventTextIntensity, 
			0.0, //game.EventTextIntensity, // now magenta (was white) 
			game.EventTextIntensity, 
			1.0)

		CcText(
			game.EventTextX,
			game.EventTextY, 
			game.EventText)

		//gltext.Printf("Roboto100", 0.0, 0.0, "Hello World")
	}
}


func maybeHelpText() () {
	if game.Mode >= game.MODE_Playing {
		s := "mouse + W A S D"
		f := 0.4
		gl.Color4f(f, f, f, 1.0)
		
		CcText(
			game.ScreenCenterXInGltextSpace * 0.75, // FIXME when text measure exposed  
			i32.f32(game.ScreenNumPixelsHigh) - game.TextHeight, 
			s)
	}
}


func CcText(x f32, y f32, text str) () {
	gltext.Printf("Roboto50", x, y - game.TextOffset, text)
}


func EntityAttachedText(x f32, y f32, offsetX f32, offsetY f32, s str) () {
	// dynamic text space positions 
	midX := i32.f32(game.ScreenNumPixelsWide) / 2.0
	midY := i32.f32(game.ScreenNumPixelsHigh) / 2.0
	dfc /* distance from center */ := x / game.ScreenBoundsRight
	x := offsetX + midX + midX * dfc
	y := offsetY + i32.f32(game.ScreenNumPixelsHigh) - (y - game.ScreenBounds.Bottom) * midY

	gl.Color4f(0.8, 0.0, 0.8, 1.0)
	CcText(x, y, s)
}



// private 

func setupFonts() () {
	wd := os.GetWorkingDirectory()
	fontFile := str.concat(wd, "fonts/roboto-light.ttf")

	os.Open(fontFile)
	gltext.LoadTrueType("Roboto100", fontFile, 100, 32, 127, gltext.LeftToRight)
	os.Close(fontFile)
	
	os.Open(fontFile)
	gltext.LoadTrueType("Roboto50", fontFile, f32.i32(game.TextHeight), 32, 127, gltext.LeftToRight)
	os.Close(fontFile)

	gl.Enable(gl.DEPTH_TEST)
	gl.DepthFunc(gl.LESS)
	gl.ClearColor(0.1, 0.1, 0.1, 0.0)
}


func drawDirectionalInputIndicators(sin f32, cos f32) () {
	ie /* indicator extent */ := game.HeadRadius / 4.0
	rfc /* radius from center (of head) */ := ie + game.HeadRadius
	hoX /* head offset */ := sin * rfc
	hoY /* head offset */ := cos * rfc
	
	// shrink 
	ci := game.GetShrinkIntensity()
	Triangle(
		entity.BX - hoX, 
		entity.BY - hoY, 
		ie, 
		game.CurrSnakeAim + game.Pi,
		ci, 0.0, 1.0)
	
	// grow 
	ci = game.GetGrowIntensity()
	Triangle(
		entity.BX + hoX, 
		entity.BY + hoY, 
		ie, 
		game.CurrSnakeAim,
		ci, 0.0, 1.0)

	// rotate negative 
	qqX, qqY := game.RotateAroundOrigin(
		hoX,
		hoY,
		game.HalfPi)

	ci = game.GetAimDecreaseIntensity()
	Triangle(
		entity.BX + qqX, 
		entity.BY + qqY, 
		ie, 
		game.CurrSnakeAim - game.HalfPi,
		ci, 0.0, 1.0)

	// rotate positive 
	qqX, qqY = game.RotateAroundOrigin(
		hoX,
		hoY,
		0.0 - game.HalfPi)
	
	ci = game.GetAimIncreaseIntensity()
	Triangle(
		entity.BX + qqX, 
		entity.BY + qqY, 
		ie, 
		game.CurrSnakeAim + game.HalfPi,
		ci, 0.0, 1.0)
}


func menuMaybe() () {
	if game.Mode < game.MODE_Playing {
		if game.Mode == game.MODE_OptionsMenu {
			menuRects(true)
		}

		menuRects(false)

		// text 
		y := game.DeltaFromTop

		for i := 0; i < []str.len(game.ButtonNames); i++ {
			if i == game.MenuHighlightId {
				gl.Color4f(0.0, 0.0, 1.0, 1.0)
			} else { 
				gl.Color4f(1.0, 1.0, 1.0, 1.0)
			}

			CcText(
				game.DeltaFromLeftEdge,
				y, 
				[]str.read(game.ButtonNames, i))	

			y += game.TextHeight
		}
	}
}


func menuRects(sliders bool) () {
	y := i32.f32([]str.len(game.ButtonNames)) * game.TextHeight * game.ScreenPixelSpan / 2.0
	hei := game.TextHeight * game.ScreenPixelSpan
	f := 0.5
	extent := game.LongestCurrMExtent

	// modify to a thin bar width 
	if sliders {
		extent = game.SliderHandleExtentX
	}

	// button background rects 
	for i := 0; i < []str.len(game.ButtonNames); i++ {
		t := y       // top
		b := y - hei // bottom 
		l := 0.0 - extent
		r := extent

		if sliders {
			if i <= 1 {
				valueWid := game.LongestCurrMExtent * 2.0 - extent * 2.0

				if i == 0 {
					valueWid *= game.AnalogControlsSensitivityAim
				} else {
					valueWid *= game.AnalogControlsSensitivitySpeed
				}

				l = 0.0 - game.LongestCurrMExtent + extent
				l += valueWid
				r = l + extent
				l -= extent
				/* draw */ Rect(t, r, b, l, 1.0, 1.0, 1.0)
								
				t -= extent * 3.2
				b += extent * 3.2
				l = 0.0 - game.LongestCurrMExtent 
				r = l + valueWid

				/* draw */ Rect(t, r, b, l, 1.0, 1.0, 1.0)
			}
		} else { // normal menu item background 
			if i == game.MenuHighlightId {
				/* draw */ Rect(t, r, b, l, 0.6, 0.6, 1.0)
			} else { 
				/* draw */ Rect(t, r, b, l, f, f, f)
			}
		}

		y -= hei
	}
}



// DELETE THIS DEPRECATED FUNC AFTER EXAMINING HOW WEIRD IT BEHAVES 
// d = default color, h = highlighted 
func setMenuItemColor(i i32, 
	dR f32, dG f32, dB f32, 
	hR f32, hG f32, hB f32) () {

	if i == game.MenuHighlightId {
		dR = hR
		dG = hG
		dB = hB
	}

	str.print(str.concat("i: ", i32.str(i)))
	str.print(i32.str(game.MenuHighlightId))

	gl.Color4f(dR, dG, dB, 1.0)
}