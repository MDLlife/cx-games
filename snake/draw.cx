package draw

// common  
import "gl"
import "gltext"

// game 
import "entity"
import "game"



var dubPi f32



func Init() () {
	dubPi = 2.0 * 3.141592654
	str.print("--- draw.Init()")
	setupFonts()
}


func All() () {
	//x, y := game.GetPosOfRotTest()
	//Sphere(x, y, 0.07, 1.0, 0.0, 0.0)

	Snake()
	Entities()
	Text()
}


func Entities() () {
	// skipping 0 (reserved for player entity), which has it's own draw func. 
	// for now, all else are spheres 
	for i := 1; i < []f32.len(entity.X); i++ {
		if entity.IsAlive(i) {
			Sphere(
				[]f32.read(entity.X, i), 
				[]f32.read(entity.Y, i), 
				[]f32.read(entity.Rad, i),
				[]f32.read(entity.Red, i), 
				[]f32.read(entity.Green, i), 
				[]f32.read(entity.Blue, i))
		}
	}
}


func Sphere(x f32, y f32, radius f32, red f32, green f32, blue f32) () {
	gl.Begin(gl.POLYGON)
	gl.Color3f(red, green, blue)

	for i := 0; i < 20; i++ {
		finalX := x + radius * f32.cos(i32.f32(i) * dubPi / 20.0)
		finalY := y + radius * f32.sin(i32.f32(i) * dubPi / 20.0)

		gl.Vertex2f(finalX, finalY)
	}

	gl.End()
}


func Snake() () {
	sin := f32.sin(game.CurrSnakeAim)
	cos := f32.cos(game.CurrSnakeAim) 

	// head/tail deltas (from center of snake) 
	xOff := game.CurrSnakeExtent * sin
	yOff := game.CurrSnakeExtent * cos
	
	// center pos 
	cX := []f32.read(entity.X, entity.SnakeId)
	cY := []f32.read(entity.Y, entity.SnakeId)

	// tail pos 
	tX := cX - xOff
	tY := cY - yOff

	// head pos 
	hX := cX + xOff
	hY := cY + yOff
	


	entity.SetupChainFromAToB(
		// tail 
		tX, 
		tY, 
		game.TailRadius, 

		// head 
		hX, 
		hY, 
		game.HeadRadius,

		true)

	// draw head 
	Sphere(entity.BX, entity.BY, game.HeadRadius, 0.0, 0.0, 1.0)










	// draw indicators

	ie /* ind extent */ := game.HeadRadius / 4.0
	rfc /* radius from center of head */ := ie + game.HeadRadius
	hoX /* head offset */ := sin * rfc
	hoY /* head offset */ := cos * rfc
	
	// shrink   
	ci := game.GetShrinkColorIntensity()
	Sphere(
		entity.BX - hoX, 
		entity.BY - hoY, 
		ie, 
		0.0, ci, 1.0)
	
	// grow   
	ci = game.GetGrowColorIntensity()
	Sphere(
		entity.BX + hoX, 
		entity.BY + hoY, 
		ie, 
		0.0, ci, 1.0)

	// rotate negative   
	qqX, qqY := game.RotatePositionByAngle(
		hoX,
		hoY,
		0.0 - dubPi/4.0)

	ci = game.GetRotateNegativelyColorIntensity()
	Sphere(
		entity.BX + qqX, 
		entity.BY + qqY, 
		ie, 
		0.0, ci, 1.0)

	// rotate positive   
	qqX, qqY = game.RotatePositionByAngle(
		hoX,
		hoY,
		dubPi/4.0)
	
	ci = game.GetRotatePositivelyColorIntensity()
	Sphere(
		entity.BX + qqX, 
		entity.BY + qqY, 
		ie, 
		0.0, ci, 1.0)








	// draw rotation center  
	Sphere(
		cX, 
		cY, 
		game.HeadRadius/3.0, 
		0.0, 0.0, 1.0)



	// draw body 

	for entity.ChainProgress <= entity.ChainLength {
		// fraction towards destination 
		ftd := entity.ChainProgress / entity.ChainLength
		
		// current radius 
		cRad := game.TailRadius + ftd * entity.DelRad

		Sphere(
			tX + ftd * entity.DelX, 
			tY + ftd * entity.DelY, 
			cRad, 
			1.0, 1.0, 1.0)

		entity.AdvanceChainProgressBy(cRad)
	}
}


func Text() () {
	//gl.Color4f(0.5, 0.3, 0.8, 1.0)
	//gltext.Printf("Roboto100", 0.0, 0.0, "Hello World")
	
	EntityPinnedText([]f32.read(entity.X, 0), []f32.read(entity.Y, 0), 0.0, 0.0, "swirl mouse + W A S D      5")
}


func EntityPinnedText(x f32, y f32, offsetX f32, offsetY f32, s str) () {
	// text space positions 
	midX := i32.f32(game.Width)  / 2.0
	midY := i32.f32(game.Height) / 2.0
	dfc /* distance from center */ := x / game.ScreenBoundsRight
	x := offsetX + midX + midX * dfc
	y := offsetY + i32.f32(game.Height) - (y - game.ScreenBounds.Bottom) * midY

	gl.Color4f(0.8, 0.0, 0.8, 1.0)
	gltext.Printf("Roboto50", x, y, s)
}



// private 

func setupFonts() () {
	wd := os.GetWorkingDirectory()
	fontFile := str.concat(wd, "fonts/roboto-light.ttf")

	os.Open(fontFile)
	gltext.LoadTrueType("Roboto100", fontFile, 100, 32, 127, gltext.LeftToRight)
	os.Close(fontFile)
	
	os.Open(fontFile)
	gltext.LoadTrueType("Roboto50", fontFile, 50, 32, 127, gltext.LeftToRight)
	os.Close(fontFile)

	gl.Enable(gl.DEPTH_TEST)
	gl.DepthFunc(gl.LESS)
	gl.ClearColor(0.1, 0.1, 0.1, 0.0)
}
