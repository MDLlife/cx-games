package entity
import "game"



var maxVelocity f32 = 0.01
var maxNegativeVelocity f32 = -0.01
var velocityInc f32
var mm f32 // movement multiplier 
var pixelSpanX f32
var pixelSpanY f32
var gradientSpan f32
var currFrame f32

// FIXME: remove when bool arrays are fixed 
var isFalse i32 = 0
var isTrue  i32 = 1



// entities

var numEnts i32 = 3 //4
var SnakeId i32
var X []f32
var Y []f32

var VelX []f32 // velocity
var VelY []f32

var Rad []f32 // radius 
var Expiry []f32
var IsCollidable []i32 // FIXME when bool arrays are fixed 

var Red []f32
var Green []f32
var Blue []f32



// chain of entities 
// (used to plot a variable amount of spheres from point A to point B)
var ChainLength f32 // distance between end/A/B points 
var ChainProgress f32 // current fraction along chain's length (0.0 - 1.0) 

// --- points 
var /* point  */ AX   f32
var /* point  */ AY   f32
var /* radius */ ARad f32

var /* point  */ BX   f32
var /* point  */ BY   f32
var /* radius */ BRad f32

// --- deltas from point A to point B 
var DelX   f32
var DelY   f32
var DelRad f32



func Init() () {
	str.print("--- entity.Init()")

	pixelSpanX = 2.0 / i32.f32(game.Width)
	pixelSpanY = 2.0 / i32.f32(game.Height)
	gradientSpan = 1.0 / 300.0

	for i := 0; i < numEnts; i++ {
		x := game.ScreenBoundsLeft   + i32.f32(i32.rand(0, game.Width + 1)) * pixelSpanY
		y := game.ScreenBoundsBottom + i32.f32(i32.rand(0, game.Height + 1)) * pixelSpanY
		vx,	vy := getRandomVelocities()
		collidable := true

		if i == SnakeId {
			collidable = false
			x = 0.0
			y = 0.0
			vx = 0.005
			vy = 0.005
		}

		SpawnEntity(x, y, vx, vy, 0.1, 0.0, collidable)
	}
}


var prevFrame f32
func Update() () {
 	currFrame   = f64.f32(glfw.GetTime())
 	deltaFrame := currFrame - prevFrame
 	mm          = deltaFrame * 200.0
 	velocityInc = deltaFrame / 50.0

	// per frame  
	for i := 0; i < []f32.len(X); i++ {
		// per relevant entity 			
		if IsAlive(i) {
			// movement
			vx := []f32.read(VelX, i) 
			vy := []f32.read(VelY, i)

			if /* moving */ vx != 0.0 || vy != 0.0 {
				// old spot 
				oX := []f32.read(X, i)
				oY := []f32.read(Y, i)

				// new spot 
				nX := oX + vx * mm
				nY := oY + vy * mm

				// detect collision before potential screen wrapping teleport. 
				// because a screen spanning delta makes no sense for collision 
				SetupChainFromAToB(
					oX, oY, []f32.read(Rad, i),
					nX, nY, []f32.read(Rad, i), false)

				IsTouching_WillExplode(i)
				updatePosition_MaybeToOppositeEdgeOfScreen(nX, nY, i)
			}
		}
	}

	prevFrame = currFrame
}


func SetupChainFromAToB(
	aX f32, aY f32, aRad f32, 
	bX f32, bY f32, bRad f32,
	isSnakeEntity bool) () {

	AX = aX;
	AY = aY;
	ARad = aRad;
	BX = bX
	BY = bY
	BRad = bRad

	DelX := bX - aX 
	DelY := bY - aY
	DelRad := bRad - aRad



	// overlap spheres by about half their radius.		
	ChainProgress = 0.0 // current spot in distance spectrum (0.0 - 1.0) 
	
	if isSnakeEntity {
		ChainLength = f64.f32(game.CurrSnakeExtent) * 2.0
	} else {
		ChainLength = game.GetDistance(aX, aY, bX, bY)
	}
}


func AdvanceChainProgressBy(inc f32) () {
	ChainProgress += inc
}


func Shoot(index i32) () {
	fraction := 0.05D

	x := []f32.read(X, index)
	y := []f32.read(Y, index) 
	velX := f64.f32(game.CurrSnakeExtent * f64.cos(game.CurrSnakeAim) * fraction)
	velY := f64.f32(game.CurrSnakeExtent * f64.sin(game.CurrSnakeAim) * fraction)

	SpawnEntity(
		x, y, 
		velX, velY,
		game.BulletRadius,
		f64.f32(glfw.GetTime()) + 0.5, // expiry
		true)
}


func IsAlive(i i32) (out bool) {
	e := []f32.read(Expiry, i)

	if e == 0.0 || e > currFrame {
		return true
	}

	return false
}


func IsCollidable(i i32) (out bool) {
	if []i32.read(IsCollidable, i) == isTrue {
		return true
	}

	return false
}


func SpawnEntity(x f32, y f32, velX f32, velY f32, rad f32, expiry f32, collidable bool) () {
	shouldAppendNewIndex := true

	// reserving 0 for player's snake (all other indices up for recycling)
	for i := 1; i < []f32.len(X); i++ {
		if /* found dead entity... */ IsAlive(i) == false {
			// ...recycle it (rather than appending a new entity)
			shouldAppendNewIndex = false
			[]f32.write(X, i, x)
			[]f32.write(Y, i, y)
			[]f32.write(VelX, i, velX)
			[]f32.write(VelY, i, velY)
			[]f32.write(Rad, i, rad)
			[]f32.write(Expiry, i, expiry)

			if collidable {
				[]i32.write(IsCollidable, i, isTrue)
			} else {
				[]i32.write(IsCollidable, i, isFalse)
			}

			// set color?  for now, keeps the same color as the original 
		}
	}

	if shouldAppendNewIndex {
		X = []f32.append(X, x)
		Y = []f32.append(Y, y)
		
		VelX = []f32.append(VelX, velX)
		VelY = []f32.append(VelY, velY)
		
		Rad = []f32.append(Rad, rad)
		Expiry = []f32.append(Expiry, expiry)

		if collidable {
			IsCollidable = []i32.append(IsCollidable, isTrue)
		} else {
			IsCollidable = []i32.append(IsCollidable, isFalse)
		}

		Red =   []f32.append(Red, i32.f32(i32.rand(0, 200) + 100) * gradientSpan)
		Green = []f32.append(Green, i32.f32(i32.rand(0, 200) + 100) * gradientSpan)
		Blue =  []f32.append(Blue, i32.f32(i32.rand(0, 200) + 100) * gradientSpan)	
	}
}


func ForcePositiveVelocityAndBloomIt(index i32, inX bool) () {
	if inX {
		[]f32.write(VelX, index, boundedIncrease([]f32.read(VelX, index)))
	} else { // in y
		[]f32.write(VelY, index, boundedIncrease([]f32.read(VelY, index)))
	}
}

func ForceNegativeVelocityAndBloomIt(index i32, inX bool) () {
	if inX {
		[]f32.write(VelX, index, boundedDecrease([]f32.read(VelX, index)))
	} else { // in y
		[]f32.write(VelY, index, boundedDecrease([]f32.read(VelY, index)))
	}
}


func SlowDownInAxis(index i32, inX bool) () {
	if inX {
		[]f32.write(VelX, 0, rampDownToStop([]f32.read(VelX, 0)))
	} else { // in y 
		[]f32.write(VelY, 0, rampDownToStop([]f32.read(VelY, 0)))
	}
}


func IsTouching_WillExplode(aId i32) (out bool) {
	touching := false
	
	// A's pos/radius 
	aX   := []f32.read(X,   aId)
	aY   := []f32.read(Y,   aId)
	aRad := []f32.read(Rad, aId) // ...radius

	// start with last entity & work backwards, comparing against values 
	// (up to & excluding entity A) 
	for bId := []f32.len(X) - 1; bId > aId; bId-- {
		// checking status of A, because it can die before we cycle thru all Bs 
		// (& right now, "break" & "continue" keywords/features don't exist) 
		if IsAlive(aId) && IsCollidable(aId) &&
			IsAlive(bId) && IsCollidable(bId) {

			if isPairTouching(aX, aY, aRad, bId) {
				touching = true

				// feedback of changing values 
				
				str.print("<A")
				
				sA := "    expiry (before): "
				sB := f32.str([]f32.read(Expiry, aId))
				str.print(str.concat(sA, sB))

				         []f32.write(Expiry,       aId, currFrame - 0.1)
				         []i32.write(IsCollidable, aId, isFalse)

				sA = "    expiry (after): "
				sB = f32.str([]f32.read(Expiry, aId))
				str.print(str.concat(sA, sB))

				str.print(str.concat("    id: ", i32.str(aId)))
				
				str.print(">")



				str.print("<B")

				sA = "    expiry (before): "
				sB = f32.str([]f32.read(Expiry, bId))
				str.print(str.concat(sA, sB))

				         []f32.write(Expiry,       bId, currFrame - 0.1)
				         []i32.write(IsCollidable, bId, isFalse)
				
				sA = "    expiry (after): "
				sB = f32.str([]f32.read(Expiry, bId))
				str.print(str.concat(sA, sB))

				str.print(str.concat("    id: ", i32.str(bId)))
				
				str.print(">")



				// biggest entity (as explosion origin)
				// 1st, set values from entity B
				beX := []f32.read(X,   bId)
				beY := []f32.read(Y,   bId)
				beR := []f32.read(Rad, bId)

				if beR < aRad {
					beR = aRad
					beX = aX
					beY = aY
				}
	
				// random direction 
				rdi := /* ...int   */ i32.rand(0,    game.NumDirectionRadians)
				rdf := /* ...float */ i32.f32(rdi) * game.DirectionRadianGrain
				
				// offset scalar (from centerpoint of biggest entity) 
				// to ensure no initial overlap/collision 
				beR /= 2.0 // halve radius, for smaller fragments 
				offS := 1.1
				offX := f32.cos(rdf) * beR * offS
				offY := f32.sin(rdf) * beR * offS
				expiry := 0.0
				collidable := false
				
				
				if /* smaller than a bullet */ beR <= game.BulletRadius {
					//beR = game.BulletRadius // ATM THIS MAKES IT WORSE 
					expiry = currFrame + 0.5
					collidable = false
				}

				// spawn 2 half-size spheres, slightly separated 
				// (so there's no collision with each other) 
				// and lined up (opposite each other, from 0,0) along a random angle 
				
				divisor := 1600.0
				mult    := 0.00001

				if collidable {
					SpawnEntity(
						beX + offX, 
						beY + offY,
						0.0, //offX / divisor, 
						0.0, //offY / divisor,
						beR, 
						expiry,
						collidable)
		
					SpawnEntity(
						beX - offX, 
						beY - offY,
						0.0, //0.0 - offX / divisor, 
						0.0, //0.0 - offY / divisor,
						beR, 
						expiry,
						collidable)
				} else {
					for ii := 0; ii < 3; ii++ {
						SpawnEntity(
							beX, 
							beY,
							i32.f32(i32.rand(-49, 50)) * mult,
							i32.f32(i32.rand(-49, 50)) * mult,
							game.BulletRadius, 
							currFrame + 1.5,
							collidable)
						}
				}
			}
		}
	}

	return touching
}



// private 

func getRandomVelocities() (x f32, y f32) {
	return
		i32.f32(i32.rand(-50, 51)) * game.AsteroidVelocityGrain,
		i32.f32(i32.rand(-50, 51)) * game.AsteroidVelocityGrain
}


func isPairTouching(aX f32, aY f32, aRad f32, bId i32) (out bool) {
	touching := false
	
	// B's pos/radius 
	bX   := []f32.read(X,   bId)
	bY   := []f32.read(Y,   bId)
	bRad := []f32.read(Rad, bId) // ...radius 

	touchSpan := bRad + aRad
	negaTSpan := 0.0 - touchSpan // negative touch span 
	
	// delta from A 
	delX := bX - aX
	delY := bY - aY
	
	// 1st, do cheap bounding box detection 
	if delX < touchSpan && delX > negaTSpan && 
		delY < touchSpan && delY > negaTSpan {

		// COLLIDED, now do a more accurate spherical detection 
		dist := game.GetDistance(bX, bY, aX, aY)			
		
		if dist < touchSpan {
			touching = true
			str.print("distance:")
			f32.print(dist)
			str.print("---------")
		}
	}

	return touching
}


func updatePosition_MaybeToOppositeEdgeOfScreen(nX f32, nY f32, index i32) () {
	if nX < game.ScreenBoundsLeft {
		nX = game.ScreenBoundsRight
	}

	if nX > game.ScreenBoundsRight {
		nX = game.ScreenBoundsLeft
	}

	if nY > game.ScreenBoundsTop {
		nY = game.ScreenBoundsBottom
	}

	if nY < game.ScreenBoundsBottom {
		nY = game.ScreenBoundsTop
	}

	[]f32.write(X, index, nX)
	[]f32.write(Y, index, nY)
}


func boundedDecrease(vel f32) (out f32) {
	if vel > 0.0 {
		vel = 0.0
	}

	vel -= velocityInc

	if vel < maxNegativeVelocity {
		vel = maxNegativeVelocity
	}

	return vel
}


func boundedIncrease(vel f32) (out f32) {
	if vel < 0.0 {
		vel = 0.0
	}

	vel += velocityInc

	if vel > maxVelocity {
		vel = maxVelocity
	}

	return vel
}


func rampDownToStop(vel f32) (out f32) {
	/* multiplier */ m := 2.0

	if vel > 0.0 { // increasing value
		vel -= velocityInc * m

		if vel < 0.0 {
			vel = 0.0
		}
	}

	if vel < 0.0 { // decreasing value
		vel += velocityInc * m

		if vel > 0.0 {
			vel = 0.0
		}
	}

	return vel
}