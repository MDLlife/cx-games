package entity
import "game"



var pixelSpanX f32
var pixelSpanY f32
var gradientSpan f32



// entities

var numEnts i32 = 24
var X []f32
var Y []f32

var VelX []f32 // velocity
var VelY []f32

var Rad []f32 // radius 
var Expiry []f64
var Dead []bool

var Red []f32
var Green []f32
var Blue []f32



func Init() () {
	str.print("--- entity.Init()")

	pixelSpanX = 2.0 / i32.f32(game.Width)
	pixelSpanY = 2.0 / i32.f32(game.Height)
	gradientSpan = 1.0 / 300.0

	for i := 0; i < numEnts; i++ {
		x := game.ScreenBoundsLeft   + i32.f32(i32.rand(0, game.Width + 1)) * pixelSpanY
		y := game.ScreenBoundsBottom + i32.f32(i32.rand(0, game.Height + 1)) * pixelSpanY
		vx := i32.f32(i32.rand(-50, 51)) * game.AsteroidVelocityGrain
		vy := i32.f32(i32.rand(-50, 51)) * game.AsteroidVelocityGrain

		if i == 0 {
			x = 0.0
			y = 0.0
			vx = 0.0
			vy = 0.0
		}

		SpawnEntity(x, y, vx, vy, 0.016, 0.0D)
	}
}


func Update() () {
	for i := 0; i < []f32.len(X); i++ {
		if []bool.read(Dead, i) == false {
			if []f64.read(Expiry, i) != 0.0D && 
				[]f64.read(Expiry, i) < glfw.GetTime() {

				str.print("deadinating bullet")
				[]bool.write(Dead, i, true) 
				bool.print([]bool.read(Dead, i))
			}

			// movement
			vx := []f32.read(VelX, i) 
			vy := []f32.read(VelY, i)

			if /* moving */ vx != 0.0 || vy != 0.0 {
				x := []f32.read(X, i) + vx
				y := []f32.read(Y, i) + vy

				// teleport objects to the opposite edge when they leave the screen
				if x < game.ScreenBoundsLeft {
					x = game.ScreenBoundsRight
				}

				if x > game.ScreenBoundsRight {
					x = game.ScreenBoundsLeft
				}

				if y > game.ScreenBoundsTop {
					y = game.ScreenBoundsBottom
				}

				if y < game.ScreenBoundsBottom {
					y = game.ScreenBoundsTop
				}

				[]f32.write(X, i, x)
				[]f32.write(Y, i, y)
			}
		}
	}
}


func SpawnEntity(x f32, y f32, velX f32, velY f32, rad f32, expiry f64) () {
	spawnNew := true

	// reserving 0 for player's snake (all other slots up for recycling)
	for i := 1; i < []f32.len(X); i++ {
		if []bool.read(Dead, i) == true {
			[]bool.write(Dead, i, false)
			[]f32.write(X, i, x)
			[]f32.write(Y, i, y)
			[]f32.write(VelX, i, velX)
			[]f32.write(VelY, i, velY)
			[]f32.write(Rad, i, rad)
			[]f32.write(Expiry, i, expiry)
			spawnNew = false
			// set color?
		}
	}

	if spawnNew {
		Dead = []bool.append(Dead, false)

		X = []f32.append(X, x)
		Y = []f32.append(Y, y)
		
		VelX = []f32.append(VelX, velX)
		VelY = []f32.append(VelY, velY)
		
		Rad = []f32.append(Rad, rad)
		Expiry = []f64.append(Expiry, expiry)

		Red =   []f32.append(Red, i32.f32(i32.rand(0, 200) + 100) * gradientSpan)
		Green = []f32.append(Green, i32.f32(i32.rand(0, 200) + 100) * gradientSpan)
		Blue =  []f32.append(Blue, i32.f32(i32.rand(0, 200) + 100) * gradientSpan)	
	}
}