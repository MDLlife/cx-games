package entity
import "cavern"
import "game"



var numVertsPerMissile i32 = 20

// FIXME: remove when bool arrays are fixed (for now use integers of 0 or 1) 
var isFalse i32 = 0
var isTrue  i32 = 1


// movement 
var maxVelocity         f32 =  0.01
var maxNegativeVelocity f32 = -0.01
var velocityInc         f32
var mm                  f32 // movement multiplier 


// time 
var currFrame f32


// space 
var pixelSpan f32


// grains 
var gradientSpan f32

// vertices of all entities (in LOCAL coordinates, NOT world space) 
// depending on entity type, these may have the radius/scale 
// baked into them upon initial spawn/creation 
var soupAppendIndex i32
var VertexSoupX     []f32
var VertexSoupY     []f32



// entities 

var numEnts i32 = 3 // includes the everpresent player snake entity 
var SnakeId i32

// 		types       FIXME, when we got constants 
var ENT_TYPE_Player    i32 = 0
var ENT_TYPE_Bullet    i32 = 1 // spawned by entity 
var ENT_TYPE_Missile   i32 = 2 // spawned by map (environment hazard) 
var ENT_TYPE_EnemyShip i32 = 3
var ENT_TYPE_Debris    i32 = 4
var ENT_TYPE_Meteor    i32 = 5

// 		fields of each entity 
var EntityType         []i32
var X                  []f32
var Y                  []f32
var VelX               []f32 // velocity
var VelY               []f32
var Aim                []f32 // heading/rotation/orientation  
var Rad                []f32 // radius 
var TimeExpiry         []f32
var DistanceExpiry     []f32
var IsCollidable       []i32 // FIXME when bool arrays are fixed 
var PrevAliveStatus    []i32 // 	^ 
var BoxyDistance       []f32 // a cheap and inaccurate sum of the 2 
	                         // axis-aligned distances in 2D. 
	                         // when plotting the full spectrum of radian/angle possibilities, 
	                         // it forms a fairly box-like shape 
	                         // (but the 4 edges are wavy lines rather than straight) 

//			vertex run 
var NumVertices        []i32
var IndexToFirstVertex []i32

//			color 
var Red   []f32
var Green []f32
var Blue  []f32



// chain of entities (singleton) 
// (used to plot a variable amount of spheres from point A to point B)
var ChainLength f32 // distance between end/A/B points 
var ChainProgress f32 // current fraction along chain's length (0.0 - 1.0) 

//			points 
var /* point  */ AX   f32
var /* point  */ AY   f32
var /* radius */ ARad f32

var /* point  */ BX   f32
var /* point  */ BY   f32
var /* radius */ BRad f32

//			deltas from point A to point B 
var DelX   f32
var DelY   f32
var DelRad f32



func Init() () {
	str.print("--- entity.Init()")

	// screen space ranges from -1.0 to 1.0 
	pixelSpan = 2.0 / i32.f32(game.ScreenNumPixelsHigh)
	gradientSpan = 1.0 / 300.0

	SpawnMap()
}


var prevNumLastingEnts i32 = 0
var prevFrame f32 = 0.0
func Update() () {
	currNumLastingEnts := 0;
 	currFrame   = f64.f32(glfw.GetTime())
 	deltaFrame := currFrame - prevFrame
 	mm          = deltaFrame * 200.0
 	velocityInc = deltaFrame / 50.0

	// per frame...
	for i := 0; i < []f32.len(X); i++ {
		// ...per relevant entity 
		if IsAlive(i) {
			if isLasting(i) {
				currNumLastingEnts++;
			}

			// movement 
			vx := []f32.read(VelX, i) 
			vy := []f32.read(VelY, i)

			if /* moving */ vx != 0.0 || vy != 0.0 {
				// old spot 
				oX := []f32.read(X, i)
				oY := []f32.read(Y, i)

				// new spot 
				delX := vx * mm
				delY := vy * mm
				nX := oX + delX
				nY := oY + delY
				boxyDist := []f32.read(BoxyDistance, i)
				boxyDel  := f32.abs(delX) + f32.abs(delY)
				[]f32.write(BoxyDistance, i, boxyDist + boxyDel)

				// detect collision before potential screen wrapping teleport. 
				// because a screen spanning delta makes no sense for collision 
				//SetupChainFromAToB(
				//	oX, oY, []f32.read(Rad, i),
				//	nX, nY, []f32.read(Rad, i), false)
				IsTouching_WillExplode(i, boxyDel > []f32.read(Rad, i))
				updatePosition(nX, nY, i)
			}
		} else { // dead 
			if /* died THIS frame */ []i32.read(PrevAliveStatus, i) == isTrue {
				[]i32.write(PrevAliveStatus, i, isFalse)

				if []i32.read(EntityType, i) == ENT_TYPE_Missile {
					makeMissile()
				}
			}
		}
	}

	// just detecting when a stage is finished 
	// (player/snake would generally be alive here) 
	// (moment of expiry (state change) prob will be handled elsewhere) 
	
	if currNumLastingEnts != prevNumLastingEnts &&
		currNumLastingEnts <= 1 {
		
		numEnts++
		game.SetStage(game.Stage + 1);
	}

	prevNumLastingEnts = currNumLastingEnts
	prevFrame = currFrame
}


func SpawnMap() () {
	// MAKE PLAYER 

	// len(X) is count of entities 
	if /* 1st map/stage/wave */ []f32.len(X) == 0 {
		// make everpresent snake entity 
		initVel := 0.009
		SpawnEntity(
			ENT_TYPE_Player,
			0.0, 0.0, 
			initVel, initVel, 
			0.0, // aim   FIXME (get rid of separate CurrSnakeAim variable?) 
			game.MaxSnakeExtent, 
			/* expiries */ 0.0, 0.0, 
			/* collidable */ false)
	}

	// MAKE MISSILES 
	for i := 1; i < numEnts; i++ {
		makeMissile()
	}
}


func makeMissile() () {
	missileRad := 0.15

	//vx, vy := getRandomVelocities()
	x, y, xAim, yAim, aim, thExtent := getPosAimAndDistFromRandomTrackNode()

	SpawnEntity(
		ENT_TYPE_Missile,
		x, y,
		xAim, yAim,
		aim,
		missileRad, 
		/* expiries */ 0.0, thExtent, 
		/* collidable */ true)
}


func getPosAimAndDistFromRandomTrackNode() (x f32, y f32, aimX f32, aimY f32, aim f32, dist f32) {
	frac := 0.0004
	rndIdx := i32.rand(0, 7) //cavern.NumNodes)
	
	if i32.rand(0, 2) == 0 {
		x,    y    = game.GetLeftVertexFor(rndIdx)
		aimX, aimY = game.GetRightVertexFor(rndIdx)
	} else {
		x,    y    = game.GetRightVertexFor(rndIdx)
		aimX, aimY = game.GetLeftVertexFor(rndIdx)
	}

	aimX -= x
	aimY -= y

	return 
		x, 
		y, 
		aimX * frac, 
		aimY * frac,
		game.GetAimForNode(rndIdx),
		game.GetThickExtentFor(rndIdx) * 2.0
}


func SetupChainFromAToB(
	aX f32, aY f32, aRad f32, 
	bX f32, bY f32, bRad f32,
	isSnakeEntity bool) () {

	AX = aX;
	AY = aY;
	ARad = aRad;
	BX = bX
	BY = bY
	BRad = bRad

	DelX := bX - aX 
	DelY := bY - aY
	DelRad := bRad - aRad



	// overlap spheres by about half their radius.		
	ChainProgress = 0.0 // current spot in distance spectrum (0.0 - 1.0) 
	
	if isSnakeEntity {
		ChainLength = game.CurrSnakeExtent * 2.0
	} else {
		ChainLength = game.GetDistance(aX, aY, bX, bY)
	}
}


func AdvanceChainProgressBy(inc f32) () {
	ChainProgress += inc
}


func Shoot(index i32) () {
	// snake center (FIXME: ATM, snake is the only thing able-to-shoot/considered-for-shooting) 
	scX := []f32.read(X, index)
	scY := []f32.read(Y, index) 

	// distance from origin 
	// (bump it up a bit for a little gap) 
	d := game.CurrSnakeExtent + 
		game.HeadRadius /* FIXME: should be []f32.read(Rad, index)? */ + 
		game.BulletRadius //+ 0.01
	
	// offset from origin 
	oX := d * f32.sin(game.CurrSnakeAim)
	oY := d * f32.cos(game.CurrSnakeAim)
	
	fraction := 0.03 // ...of distance (for velocity) 

	SpawnEntity(
		ENT_TYPE_Bullet,
		scX + oX, // pos 
		scY + oY, // pos 
		oX * fraction, // velocity 
		oY * fraction, // velocity 
		game.CurrSnakeAim, // FIXME when more than player needs to shoot 
		game.BulletRadius,
		0.0, //f64.f32(glfw.GetTime()) + 0.75, // time expiry
		game.ScreenBoundsRight,                // distance expiry 
		true)
}


func IsAlive(i i32) (out bool) {
	te := []f32.read(TimeExpiry, i)
	de := []f32.read(DistanceExpiry, i)

	if /* entity has a predetermined lifespan */ te != 0.0 
		&&
		/* it died */                            te <= currFrame {

		return false
	}

	if /* entity is distance limited */ de != 0.0 
		&&
		/* it moved too far */          de <= []f32.read(BoxyDistance, i) {
	
		return false
	}

	return true
}


func isLasting(i i32) (out bool) {
	te := []f32.read(TimeExpiry, i)
	de := []f32.read(DistanceExpiry, i)
	
	if /* entity HAS NO predetermined lifespan */ te == 0.0 && 
		/* entity NOT distance limited */ de == 0.0 {
		return true
	}

	return false
}


func IsCollidable(i i32) (out bool) {
	if []i32.read(IsCollidable, i) == isTrue {
		return true
	}

	return false
}


func SpawnEntity(
	entType i32,
	
	x f32, 
	y f32, 

	velX f32, 
	velY f32, 

	aim f32,
	rad f32, 
	timeExpiry f32, 
	distExpiry f32, 
	collidable bool) () {

	shouldAppendNewIndex := true



	// possibly resurrect... 
	num := []f32.len(X)
	for i := 1; i < num; i++ { // skip 0 (snake)
		if !IsAlive(i) &&
			/* (& right type) */ entType == []i32.read(EntityType, i) { 

			// ...resurrect it with all new values 
			shouldAppendNewIndex = false

			[]i32.write(EntityType,     i, entType)
			[]f32.write(X,              i, x)
			[]f32.write(Y,              i, y)
			[]f32.write(VelX,           i, velX)
			[]f32.write(VelY,           i, velY)
			[]f32.write(Aim,            i, aim)
			[]f32.write(Rad,            i, rad)
			[]f32.write(TimeExpiry,     i, timeExpiry)
			[]f32.write(DistanceExpiry, i, distExpiry)
			[]f32.write(BoxyDistance,   i, 0.0)
			
			// at the moment, there is no need to recalculate a new shape 
			//		when reusing a dead entity 
			//[]i32.write(NumVertices,        i, ___)
			//[]i32.write(IndexToFirstVertex, i, ___)

			if collidable {
				[]i32.write(IsCollidable, i, isTrue)
			} else {
				[]i32.write(IsCollidable, i, isFalse)
			}

			[]i32.write(PrevAliveStatus, i, isTrue)


			// set color?  for now, keeps the same color as the original 
			i = num // to BREAK out of loop // FIXME once CX breaks exist 
		}
	}



	 // ...otherwise append new entity 
	if shouldAppendNewIndex {
		nv := getNumVerts(entType)


		EntityType         = []i32.append(EntityType,         entType)
		X                  = []f32.append(X,                  x)
		Y                  = []f32.append(Y,                  y)
		VelX               = []f32.append(VelX,               velX)
		VelY               = []f32.append(VelY,               velY)
		Aim                = []f32.append(Aim,                aim)
		Rad                = []f32.append(Rad,                rad)
		TimeExpiry         = []f32.append(TimeExpiry,         timeExpiry)
		DistanceExpiry     = []f32.append(DistanceExpiry,     distExpiry)
		BoxyDistance       = []f32.append(BoxyDistance,       0.0)
		NumVertices        = []i32.append(NumVertices,        nv)
		IndexToFirstVertex = []i32.append(IndexToFirstVertex, soupAppendIndex)
		Red                = []f32.append(Red,                getRandomIntensity())
		Green              = []f32.append(Green,              getRandomIntensity())
		Blue               = []f32.append(Blue,               getRandomIntensity())	
		PrevAliveStatus    = []i32.append(PrevAliveStatus,    isTrue)

		if collidable {
			IsCollidable   = []i32.append(IsCollidable,       isTrue)
		} else {
			IsCollidable   = []i32.append(IsCollidable,       isFalse)
		}
		

		setupPolygonByItsType(nv, entType, aim, rad)
	}
}


func setupPolygonByItsType(numVerts i32, entType i32, aim f32, rad f32) () {
	if entType == ENT_TYPE_Missile { 
		setupMissilePoly(startId i32, aim)
	} else {
		if entType == ENT_TYPE_Bullet ||
			entType == ENT_TYPE_Debris {

			setupAimedTriangle(rad)
		} else {
			if entType == ENT_TYPE_Meteor { 
				setupSpikeyMeteorPoly(numVerts)
			}
		}
	}
}


func getNumVerts(entType i32) (numVerts i32) {
	nv /* num verts */ := 3
	
	if entType == ENT_TYPE_Missile { 
		nv = numVertsPerMissile
	} else {
		if entType == ENT_TYPE_Bullet ||
			entType == ENT_TYPE_Debris {

			nv = 3
		} else {
			if entType == ENT_TYPE_Meteor { 
				nv = i32.rand(5, 8)   // num vertices 
			}
		}
	}

	return nv
}


func setupVertex(startId i32, aim f32, x f32, y f32) () {
	rotX, rotY  = game.RotatePositionByAngle(x, y, aim)
	VertexSoupX = []f32.append(VertexSoupX, rotX)
	VertexSoupY = []f32.append(VertexSoupY, rotY)
}


func setupSpikeyMeteorPoly(startId i32, numSides i32) () {
	// get randomish vertices from circle lookup table 
	nppe := game.NumCircleLUTPoints / numSides // number of possibilities per edge 
	
	for i := 0; i < numSides; i++ { 
		rnd := i * nppe // start with root of possibilities 
		rnd += i32.rand(0, nppe)
		x := []f32.read(game.SpherePointsX, rnd)
		y := []f32.read(game.SpherePointsY, rnd)
		VertexSoupX = []f32.append(VertexSoupX, x)
		VertexSoupY = []f32.append(VertexSoupY, y)

		soupAppendIndex++
	}
}


func setupAimedTriangle(startId i32, radius f32) () {
	aim := game.Full360Grain * i32.f32(i32.rand(0, game.NumGrainsOfFull360))

	setupVertex(startId i32, aim,                       0.0, radius)
	setupVertex(startId i32, aim + game.ThirdOf360,     0.0, radius)
	setupVertex(startId i32, aim + game.TwoThirdsOf360, 0.0, radius)

	soupAppendIndex += 3
}


func setupMissilePoly(startId i32, startId i32, aim f32) () {
	// start at the fore/impact tip. 
	// plot out the right side 
	// (including right fins/wings), 
	// ending at the aft/exhaust tip. 
	// then mirror that shape to the other side. 
	// working from rear tip to impact tip 

	soupAppendIndex += numVertsPerMissile



	// fore/impact tip 
	setupVertex(startId i32, aim, 0.0, 0.5)
	
	// right side/fins 
	setupVertex(startId i32, aim, 0.1, 0.3)
	setupVertex(startId i32, aim, 0.1, 0.2)
	setupVertex(startId i32, aim, 0.2, 0.0)
	setupVertex(startId i32, aim, 0.1, 0.03)
	setupVertex(startId i32, aim, 0.1, -0.2)
	setupVertex(startId i32, aim, 0.2, -0.3)
	setupVertex(startId i32, aim, 0.2, -0.5)
	setupVertex(startId i32, aim, 0.1, -0.4)
	setupVertex(startId i32, aim, 0.05, -0.4)
	
	// middle point (aft/exhaust tip) 
	setupVertex(startId i32, aim, 0.0, -0.45)

	// right-side reversed & mirrored for LEFT-side 
	setupVertex(startId i32, aim, -0.05, -0.4)
	setupVertex(startId i32, aim, -0.1, -0.4)
	setupVertex(startId i32, aim, -0.2, -0.5)
	setupVertex(startId i32, aim, -0.2, -0.3)
	setupVertex(startId i32, aim, -0.1, -0.2)
	setupVertex(startId i32, aim, -0.1, 0.03)
	setupVertex(startId i32, aim, -0.2, 0.0)
	setupVertex(startId i32, aim, -0.1, 0.2)
	setupVertex(startId i32, aim, -0.1, 0.3)
}


func getRandomIntensity() (out f32) {
	return i32.f32(i32.rand(0, 200) + 100) * gradientSpan	
}


func ForcePositiveVelocityAndBloomIt(index i32, inX bool) () {
	if inX {
		[]f32.write(VelX, index, boundedIncrease([]f32.read(VelX, index)))
	} else { // in y
		[]f32.write(VelY, index, boundedIncrease([]f32.read(VelY, index)))
	}
}
func ForceNegativeVelocityAndBloomIt(index i32, inX bool) () {
	if inX {
		[]f32.write(VelX, index, boundedDecrease([]f32.read(VelX, index)))
	} else { // in y
		[]f32.write(VelY, index, boundedDecrease([]f32.read(VelY, index)))
	}
}


func SlowDownInAxis(index i32, inX bool) () {
	if inX {
		[]f32.write(VelX, 0, rampDownToStop([]f32.read(VelX, 0)))
	} else { // in y 
		[]f32.write(VelY, 0, rampDownToStop([]f32.read(VelY, 0)))
	}
}


func IsTouching_WillExplode(aId i32, deltaMoreThanRadius bool) (out bool) {
	touching := false
	
	// A's pos/radius 
	aX   := []f32.read(X,   aId)
	aY   := []f32.read(Y,   aId)
	aRad := []f32.read(Rad, aId) // ...radius

	// start with last entity & work backwards, comparing against values 
	// (up to & excluding entity A) 
	for bId := []f32.len(X) - 1; bId > aId; bId-- {
		// checking status of A, because it can die before we cycle thru all Bs 
		// (& right now, "break" & "continue" keywords/features don't exist (FIXME)) 
		if IsAlive(aId) && IsCollidable(aId) &&
			IsAlive(bId) && IsCollidable(bId) {

			//if !deltaMoreThanRadius {
			//		only compare with 1 sphere position      //uNUSED_BLOCK := 42
			//} else {
			//		(1) go by bounding box which contains both head & tail 
			//			(2) IF collision, compare against a line of overlapping spheres 
			//					which covers the movement delta 

			// iterate enough positional steps/stride between A & B, 
			// which will to cover a complete path with no gaps 

			//for ChainProgress <= ChainLength {
				// fraction towards destination 
				//frac := ChainProgress / ChainLength

			SetupChainFromAToB(	// FIXME/OPTIMIZEME to only setup/use a chain... 
								// if total AtoB-encompassing-space overlaps something 
				aX, 
				aY,
				aRad, // both radii are the same for collision detection 
				[]f32.read(X, bId), 
				[]f32.read(Y, bId), 
				aRad, // ^^^
				false)

			doTouchResponses(
				aX, //AX + frac * DelX, 
				aY, //AY + frac * DelY, 
				aRad, //ARad,
				aId, 
				bId)

				//AdvanceChainProgressBy(ARad)
			//}
		}
	}

	return touching
}


func doTouchResponses(aX f32, aY f32, aRad f32, aId i32, bId i32) () {
	if isJustOnePairTouching(aX, aY, aRad, bId) {

		touching = true
		changePairsExpiryAndCollidability(aId, bId)

		// biggest entity (as explosion origin)
		// 1st, set values from entity B
		beX := []f32.read(X,   bId)
		beY := []f32.read(Y,   bId)
		beR := []f32.read(Rad, bId)

		if beR < aRad {
			beR = aRad
			beX = aX
			beY = aY
		}

		// random direction 
		rdi := /* ...int   */ i32.rand(0,    game.NumGrainsOfFull360)
		rdf := /* ...float */ i32.f32(rdi) * game.Full360Grain
		
		beR /= 2.0 // halve radius, for smaller fragments 
		offS := 1.1 // offset scalar (from centerpoint of biggest entity) 
		// 					(to ensure no initial overlap/collision) 
		offX := f32.cos(rdf) * beR * offS
		offY := f32.sin(rdf) * beR * offS
		expiry := 0.0
		collidable := false
		
		
		if /* smaller than a bullet */ beR <= game.BulletRadius {
			//FIXME?:   beR = game.BulletRadius // ATM THIS MAKES IT WORSE 
			expiry = currFrame + 0.5
			collidable = false
		}

		// spawn 2 half-radius spheres, slightly separated 
		// (so there's no collision with each other) 
		// and lined up (opposite each other, from 0,0) along a random angle 
		
		divisor := 1600.0
		mult    := 0.00001

		if collidable {
			replaceExplodingEntityWith2FragmentSpawns(offX, offY, beX, beY, beR) // actually 2 "new" spawns, & deletes old 1 or 2? that it's replacing 
		} else {
			// purely visual particle puff 
			for j := 0; j < 2; j++ {
				SpawnEntity(
					ENT_TYPE_Debris,
					beX, 
					beY,
					i32.f32(i32.rand(-49, 50)) * mult,
					i32.f32(i32.rand(-49, 50)) * mult,
					0.0, // aim, which won't be needed for round particles 
					game.BulletRadius, 
					currFrame + 1.5,
					0.0, // distance based expiry 
					collidable)
			}
		}
	} // end of isTouching 
}


func getRandomVelocities() (x f32, y f32) {
	return
		i32.f32(i32.rand(-50, 50)) * game.VelocityGrain,
		i32.f32(i32.rand(-50, 50)) * game.VelocityGrain
}


func replaceExplodingEntityWith2FragmentSpawns(offX f32, offY f32, beX f32, beY f32, beR f32) () {
	str.print("replaceExplodingEntityWith2FragmentSpawns()")

	SpawnEntity(
		ENT_TYPE_Debris,
		beX + offX, 
		beY + offY,
		0.0, //offX / divisor, 
		0.0, //offY / divisor,
		beR, 
		expiry,
		0.0, // distance based expiry 
		collidable)

	SpawnEntity(
		ENT_TYPE_Debris,
		beX - offX, 
		beY - offY,
		0.0, //0.0 - offX / divisor, 
		0.0, //0.0 - offY / divisor,
		beR, 
		expiry,
		0.0, // distance based expiry 
		collidable)
}


func isJustOnePairTouching(aX f32, aY f32, aRad f32, bId i32) (out bool) {
	touching := false
	
	// B's pos/radius 
	bX   := []f32.read(X,   bId)
	bY   := []f32.read(Y,   bId)
	bRad := []f32.read(Rad, bId) // ...radius 

	touchSpan := bRad + aRad
	negaTSpan := 0.0 - touchSpan // negative touch span 
	
	// delta from A 
	delX := bX - aX
	delY := bY - aY
	
	// 1st, do cheap bounding box detection 
	if delX < touchSpan && delX > negaTSpan && 
		delY < touchSpan && delY > negaTSpan {

		// COLLIDED, now do a more accurate spherical detection 
		dist := game.GetDistance(bX, bY, aX, aY)			
		
		if dist < touchSpan {
			touching = true
			str.print("distance:")
			f32.print(dist)
			str.print("---------")
		}
	}

	return touching
}


func changePairsExpiryAndCollidability(aId i32, bId i32) () {
	logging := false

	if logging {
		str.print("<A")

		sA := "    expiry (before): "
		sB := f32.str([]f32.read(TimeExpiry, aId))
		str.print(str.concat(sA, sB))
	}


	[]f32.write(TimeExpiry,       aId, currFrame - 0.1)
	[]i32.write(IsCollidable, aId, isFalse)


	if logging {
		sA := "    expiry (after): "
		sB := f32.str([]f32.read(TimeExpiry, aId))
		str.print(str.concat(sA, sB))

		str.print(str.concat("    id: ", i32.str(aId)))
		str.print(">")
	}





	if logging {
		str.print("<B")

		sA := "    expiry (before): "
		sB := f32.str([]f32.read(TimeExpiry, bId))
		str.print(str.concat(sA, sB))
	}


	[]f32.write(TimeExpiry,       bId, currFrame - 0.1)
	[]i32.write(IsCollidable, bId, isFalse)


	if logging {
		sA := "    expiry (after): "
		sB := f32.str([]f32.read(TimeExpiry, bId))
		str.print(str.concat(sA, sB))

		str.print(str.concat("    id: ", i32.str(bId)))
		str.print(">")
	}
}


func updatePosition(nX f32, nY f32, index i32) () {
	[]f32.write(X, index, nX)
	[]f32.write(Y, index, nY)
}


func boundedDecrease(vel f32) (out f32) {
	if vel > 0.0 {
		vel = 0.0
	}

	vel -= velocityInc

	if vel < maxNegativeVelocity {
		vel = maxNegativeVelocity
	}

	return vel
}


func boundedIncrease(vel f32) (out f32) {
	if vel < 0.0 {
		vel = 0.0
	}

	vel += velocityInc

	if vel > maxVelocity {
		vel = maxVelocity
	}

	return vel
}


func rampDownToStop(vel f32) (out f32) {
	/* multiplier */ m := 2.0

	if vel > 0.0 { // increasing value
		vel -= velocityInc * m

		if vel < 0.0 {
			vel = 0.0
		}
	}

	if vel < 0.0 { // decreasing value
		vel += velocityInc * m

		if vel > 0.0 {
			vel = 0.0
		}
	}

	return vel
}