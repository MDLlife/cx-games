package cavern



// HMMM
//
// if flying through canyons/caverns/tubes... 
// in center, normal no-gravity-control, but as you get closer to 
// outer edge (edge of obstacles(spikes/stalag[t/m]ites) 
// rather than the "idealized" edge of tube), 
// you get more of a force push towards the center. 
// could give a cool feel of "sliding" 
// against the contours of the cavern? definitely makes it a lot 
// more forgiving against surface contact deaths?  so players can 
// have more fun focusing on the shooting/dodging of entities 



var NumNodes     i32 = 11
var halfPi       f32 = 1.570796327
var EndTipLeftX  f32 = -0.15
var EndTipLeftY  f32 = 1.0
var EndTipRightX f32 = 0.15
var EndTipRightY f32 = 1.0


// current node (for generating the path) 
var currNodeId    i32
var cenX          f32 = -2.27 // current center position 
var cenY          f32
var currAim       f32
var currLength    f32 = 0.5
var currThickness f32 = 0.9 //...extent
// previous node
var prevX         f32 // previous center position 
var prevY         f32
var prevAim       f32
var prevLength    f32

var tweenAim      f32



// cache of nodes
// (final world positions/etc.) 

// 		path == centerpoint (& line) between side edges 
var CenterX []f32
var CenterY []f32

// 		left edge 
var LeftX []f32
var LeftY []f32

// 		right edge 
var RightX []f32
var RightY []f32

// 		...
var Aim         []f32
var Length      []f32
var ThickExtent []f32 // thickness (from center) 



func Init() () {
	currAim  = halfPi
	tweenAim = halfPi
	prevAim  = halfPi
	prevX    = cenX
	prevY    = cenY

	for i := 0; i < NumNodes; i++ {
		addNode()
	}

	calcCurrPosFromPrev()
	EndTipLeftX  = cenX
	EndTipLeftY  = cenY
	EndTipRightX = cenX
	EndTipRightY = cenY

	str.print("--- cavern.Init()")
}


func addNode() () {
	if /* not root node */ currNodeId != 0 {
		aimChangeGrain := halfPi / 64.0
		aimDelta := i32.f32(i32.rand(-32, 32))
		aimDelta *= aimChangeGrain
		currAim  = prevAim + aimDelta
		tweenAim = prevAim + aimDelta / 2.0
	}

	calcCurrPosFromPrev()

	CenterX     = []f32.append(CenterX,     cenX)
	CenterY     = []f32.append(CenterY,     cenY)

	// edges 
	LeftX       = []f32.append(LeftX,       cenX + f32.sin(tweenAim - halfPi) * currThickness)
	LeftY       = []f32.append(LeftY,       cenY + f32.cos(tweenAim - halfPi) * currThickness)
	RightX      = []f32.append(RightX,      cenX + f32.sin(tweenAim + halfPi) * currThickness)
	RightY      = []f32.append(RightY,      cenY + f32.cos(tweenAim + halfPi) * currThickness)
	
	Aim         = []f32.append(Aim,         currAim)
	Length      = []f32.append(Length,      currLength)
	ThickExtent = []f32.append(ThickExtent, currThickness)



	// final updates 
	prevX      = cenX
	prevY      = cenY
	prevAim    = currAim
	prevLength = currLength
	currNodeId++
}


func calcCurrPosFromPrev() () {
	cenX = prevX + f32.sin(prevAim) * currLength
	cenY = prevY + f32.cos(prevAim) * currLength
}
