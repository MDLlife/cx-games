package main

import "gl"
import "glfw"
import "gltext"

import "game"
import "ccInput"
import "entity"

var dubPi f32



func main () () {
	dubPi = 2.0 * 3.141592654

	entity.Init()



	// gl setup

	glfw.Init()
	glfw.CreateWindow("window", game.Width, game.Height, game.Name)
	glfw.MakeContextCurrent("window")
	glfw.SetKeyCallback("window", "onKeyEvent")
	
	gl.Init()
	program := gl.CreateProgram()
	gl.LinkProgram(program)



	// font setup

	wd := os.GetWorkingDirectory()
	fontFile := str.concat(wd, "fonts/roboto-light.ttf")

	os.Open(fontFile)
	gltext.LoadTrueType("Roboto100", fontFile, 100, 32, 127, gltext.LeftToRight)
	os.Close(fontFile)
	
	os.Open(fontFile)
	gltext.LoadTrueType("Roboto50", fontFile, 50, 32, 127, gltext.LeftToRight)
	os.Close(fontFile)

	gl.Enable(gl.DEPTH_TEST)
	gl.DepthFunc(gl.LESS)
	gl.ClearColor(0.1, 0.1, 0.1, 0.0)








	var ratio f32

	for !glfw.ShouldClose("window") {
		bufferWidth, bufferHeight := glfw.GetFramebufferSize("window")
		ratio = f32.div(i32.f32(bufferWidth), i32.f32(bufferHeight))

		//gl.Clear(gl.COLOR_BUFFER_BIT) // original bouncing-ball sample
		gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)

		//gl.UseProgram(program)
		
		gl.MatrixMode(gl.PROJECTION)
		gl.LoadIdentity()
		gl.Ortho(f32.mul(ratio, -1.0), ratio, -1.0, 1.0, 1.0, -1.0)
		gl.MatrixMode(gl.MODELVIEW)

		//respondToCollisions() // atm, just the left, right, & bottom edge of screen
		moveObjects()
		draw()


		
		glfw.PollEvents()
		glfw.SwapBuffers("window")
	}
}


func onKeyEvent (window str, key i32, scancode i32, action i32, mods i32) () {
	ccInput.OnKeyEvent(window, key, scancode, action, mods)
}

























//game

func moveObjects() () {
	ccInput.AdjustVelocityByKeyState(entity.tail, entity.head)
	entity.Move()
}


























var snakeHeadInFontSpaceY f32
func draw() () {
	snakeHeadInFontSpaceY = entity.DrawSnake()
	drawEntities()
	drawText()
}


func drawEntities() () {
	for i := 0; i < entity.numEnts; i++ {
		drawBall(
			[]f32.read(entity.X, i), 
			[]f32.read(entity.Y, i), 
			0.016,
			[]f32.read(entity.Red, i), 
			[]f32.read(entity.Green, i), 
			[]f32.read(entity.Blue, i))
	}
}


var mostNegative /* edge of visibility, along the bottom*/ f32 = -1.0
func drawText() () {
	//gl.Color4f(0.5, 0.3, 0.8, 1.0)
	//gltext.Printf("Roboto100", 0.0, 0.0, "Hello World")

	gl.Color4f(0.5, 0.7, 0.5, 1.0)
	gltext.Printf(
		"Roboto50", 
		600.0, 
		i32.f32(game.Height) - (snakeHeadInFontSpaceY - mostNegative) * (i32.f32(game.Height) / 2.0), 
		"I'm some text")
}


func drawBall(x f32, y f32, radius f32, red f32, green f32, blue f32) () {
	gl.Begin(gl.POLYGON)
	gl.Color3f(red, green, blue)

	for i := 0; i < 20; i++ {
		finalX := x + radius * f32.cos(i32.f32(i) * dubPi / 20.0)
		finalY := y + radius * f32.sin(i32.f32(i) * dubPi / 20.0)

		gl.Vertex2f(finalX, finalY)
	}

	gl.End()
}
