package entity
import "game"



var numEnts i32 = 16
var X []f32
var Y []f32
var Red []f32
var Green []f32
var Blue []f32

type Ball struct {
	x f32
	y f32
	vx f32
	vy f32
	gravity f32
	radius f32
}

var tail Ball
var head Ball



func Init() () {
	str.print("in entity.cx.Init")

	pixelSpan := 2.0 / i32.f32(game.Height)
	gradientSpan := 1.0 / 300.0








	posVelocity := 0.03
	negVelocity := -0.03

	tail = new Ball{
		radius: 0.02,
		x: -0.1,
		y: -0.1,
		vx: negVelocity,
		vy: negVelocity,
		gravity: 0.01
	}

	head = new Ball{
		radius: 0.07,
		x: 0.2,
		y: 0.1,
		vx: posVelocity,
		vy: posVelocity,
		gravity: 0.01
	}






	for i := 0; i < numEnts; i++ {
		x := -1.0 + i32.f32(i32.rand(0, game.Height + 1)) * pixelSpan
		y := -1.0 + i32.f32(i32.rand(0, game.Height + 1)) * pixelSpan
		X = []f32.append(X, x)
		Y = []f32.append(Y, y)
		Red =   []f32.append(Red, i32.f32(i32.rand(0, 200) + 100) * gradientSpan)
		Green = []f32.append(Green, i32.f32(i32.rand(0, 200) + 100) * gradientSpan)
		Blue =  []f32.append(Blue, i32.f32(i32.rand(0, 200) + 100) * gradientSpan)
	}
}









func Move() () {
	tail.x += tail.vx
	tail.y += tail.vy
	head.x += head.vx
	head.y += head.vy
}


func DrawSnake() (out f32) {
	numSegments := 6
	radius := entity.tail.radius
	radiusIncrement := (head.radius - tail.radius) * 0.7 / i32.f32(numSegments) 
	xOff /* head offset from the tail */ := head.x - tail.x
	yOff /* head offset from the tail */ := head.y - tail.y
	xSpan /* between segments */ := xOff / i32.f32(numSegments)
	ySpan /* between segments */ := yOff / i32.f32(numSegments)

	for j := 0; j <= numSegments; j++ {
		if j == numSegments {
			radius = head.radius
		}

		drawBall(
			tail.x + xSpan * i32.f32(j), 
			tail.y + ySpan * i32.f32(j), 
			radius,
			1.0,
			1.0,
			1.0)

		radius += radiusIncrement
	}

	return head.y
}


func respondToCollisions() () {
	if tail.x + tail.radius <= -1.0 {
		tail.vx += tail.gravity
	} 

	if tail.x + tail.radius >= 1.0 {
		tail.vx -= tail.gravity
	}

	if tail.y + tail.radius <= -1.0 {
		tail.vy = f32.abs(tail.vy)
	} else {
		tail.vy -= tail.gravity
	}
}