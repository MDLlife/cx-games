package game

import "ccInput"
import "entity"



var Name str = "  S  N  A  K  E  "
var NumDirectionRadians i32 = 256 // gives 64 possibilities per quadrant 
var RandomAngleRadianGrain f32
var AsteroidVelocityGrain f32 = 0.00002
var BulletRadius f32 = 0.015
var timeDelta f32

// FIXME: when classes are useable outside their package of declaration 
type Rect struct {
	Top f32
	Right f32
	Bottom f32
	Left f32
}

// full spectrum cos/sin angle/radius test visualizers 
var xOfBoxyDistance        f32
var yOfBoxyDistance        f32
var xOfPerfectRadius      f32 // current pos 
var yOfPerfectRadius      f32 // current pos 
var visualizerAngle        f32
var visualizerRadius       f32 = 0.6
var visualizerFrameAdvance f32 = 0.6

// screen 
var Width i32 = 1280
var Height i32 = 720
var ScreenBoundsTop f32
var ScreenBoundsRight f32
var ScreenBoundsBottom f32
var ScreenBoundsLeft f32

// snake 
var MinSnakeExtent f32 = 0.1
var MaxSnakeExtent f32 = 0.35
var CurrSnakeExtent f32 = 0.17
var CurrSnakeAim f32 = 0.0
var TailRadius f32 = 0.02
var HeadRadius f32 = 0.07
var shrinkColorIntensity f32
var growColorIntensity f32
var rotateNegativelyColorIntensity f32
var rotatePositivelyColorIntensity f32

func Init() () {
	RandomAngleRadianGrain = 2.0 * 3.141592654 / i32.f32(NumDirectionRadians)

	// FIXME: ATM, making assumptions about vertical span 
	horizontalScreenSpan := i32.f32(Width) / i32.f32(Height)
	ScreenBoundsTop = 1.0
	ScreenBoundsRight = horizontalScreenSpan
	ScreenBoundsBottom = -1.0
	ScreenBoundsLeft = 0.0 - horizontalScreenSpan

	entity.Init()
	str.print("--- game.Init()")
}


func Update() () {
	setPosOfVisualizers()

	updateTiming()
	fadeDirectionalIndicatorsColorIntensity()
	ccInput.Update() 
	entity.Update()
}


var prevFrameTime f32
func updateTiming() () {
	ct := f64.f32(glfw.GetTime())
	timeDelta = ct - prevFrameTime
	prevFrameTime = ct
}


func fadeDirectionalIndicatorsColorIntensity() () {
	rotatePositivelyColorIntensity = fadeColorIntensity(rotatePositivelyColorIntensity)
	rotateNegativelyColorIntensity = fadeColorIntensity(rotateNegativelyColorIntensity)
	growColorIntensity = fadeColorIntensity(growColorIntensity)
	shrinkColorIntensity = fadeColorIntensity(shrinkColorIntensity)
}


func fadeColorIntensity(f f32) (out f32) {
	if f > 0.0 {
		f -= (timeDelta * 1.4)
	}

	return f
}


var divisor f32 = 1000.0
func SetSnakeAimAndSize(deltaX f32, deltaY f32) () {
	rotateMul := 21.5
	div := 90.0
	rotX, rotY := RotatePositionByAngle(deltaX/div, deltaY/div, CurrSnakeAim)

	CurrSnakeAim    += rotX
	CurrSnakeExtent += rotY / 19.0

	if CurrSnakeExtent > MaxSnakeExtent {
		CurrSnakeExtent = MaxSnakeExtent
	}

	if CurrSnakeExtent < MinSnakeExtent {
		CurrSnakeExtent = MinSnakeExtent
	}



	// set directional indicator colors 
	if rotX > 0.0 {
		rotatePositivelyColorIntensity += rotX * timeDelta * rotateMul
		if rotatePositivelyColorIntensity > 1.0 {
			rotatePositivelyColorIntensity = 1.0
		}
	} else {
		rotatePositivelyColorIntensity = 0.0
	}

	if rotX < 0.0 {
		rotateNegativelyColorIntensity += 0.0 - rotX * timeDelta * rotateMul
		if rotateNegativelyColorIntensity > 1.0 {
			rotateNegativelyColorIntensity = 1.0
		}
	} else {
		rotateNegativelyColorIntensity = 0.0
	}

	if rotY > 0.0 {
		growColorIntensity += rotY * timeDelta * rotateMul
		if growColorIntensity > 1.0 {
			growColorIntensity = 1.0
		}
	} else {
		growColorIntensity = 0.0
	}

	if rotY < 0.0 {
		shrinkColorIntensity += 0.0 - rotY * timeDelta * rotateMul
		if shrinkColorIntensity > 1.0 {
			shrinkColorIntensity = 1.0
		}
	} else {
		shrinkColorIntensity = 0.0
	}



	//str.print(str.concat("deltaX: ", f32.str(deltaX)))
	//str.print(str.concat("deltaY: ", f32.str(deltaY)))
	//str.print(str.concat("CurrSnakeAim: ", f32.str(CurrSnakeAim)))
	//str.print(str.concat("CurrSnakeExtent: ", f32.str(CurrSnakeExtent)))
}


func GetShrinkColorIntensity() (out f32) {
	return shrinkColorIntensity
}


func GetGrowColorIntensity() (out f32) {
	return growColorIntensity
}


func GetRotateNegativelyColorIntensity() (out f32) {
	return rotateNegativelyColorIntensity
}


func GetRotatePositivelyColorIntensity() (out f32) {
	return rotatePositivelyColorIntensity
}


func GetDistance(aX f32, aY f32, bX f32, bY f32) (out f32) {
	xOff := bX - aX
	yOff := bY - aY
	return f32.pow((xOff ** 2.0) + (yOff ** 2.0), 0.5)
}


func RotatePositionByAngle(posX f32, posY f32, angle f32) (x f32, y f32) {
	s := f32.sin(angle)
	c := f32.cos(angle)

	return
		posX * c - posY * s,
		posX * s + posY * c
}


func GetPosOfPerfectRadiusVisualizer() (x f32, y f32) {
	x = xOfPerfectRadius
	y = yOfPerfectRadius
}


func GetPosOfBoxyDistanceVisualizer() (x f32, y f32) {
	x = xOfBoxyDistance
	y = yOfBoxyDistance
}


// private 

func setPosOfVisualizers() () {
	xOfPerfectRadius, 
	yOfPerfectRadius = 
		f32.sin(visualizerAngle) * visualizerRadius, 
		f32.cos(visualizerAngle) * visualizerRadius

	bd := 
		xOfPerfectRadius + 
		yOfPerfectRadius

	xOfBoxyDistance, 
	yOfBoxyDistance = 
		f32.sin(visualizerAngle) * bd, 
		f32.cos(visualizerAngle) * bd

	visualizerAngle += 
	visualizerFrameAdvance
}
