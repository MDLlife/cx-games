package game

import "ccInput"
import "entity"



var Name str = "  S  N  A  K  E  "
var NumDirectionRadians i32 = 256 // gives 64 possibilities per quadrant 
var DirectionRadianGrain f32
var AsteroidVelocityGrain f32 = 0.00002
var BulletRadius f32 = 0.015

// FIXME: when classes are useable outside their package of declaration 
type Rect struct {
	Top f32
	Right f32
	Bottom f32
	Left f32
}

// rotation test 
var rotX f32
var rotY f32
var ang f32

// screen 
var Width i32 = 1280
var Height i32 = 720
var ScreenBoundsTop f32
var ScreenBoundsRight f32
var ScreenBoundsBottom f32
var ScreenBoundsLeft f32

// snake 
var MinSnakeExtent f32 = 0.1
var MaxSnakeExtent f32 = 0.35
var CurrSnakeExtent f32 = 0.17
var CurrSnakeAim f32 = 0.0
var TailRadius f32 = 0.02
var HeadRadius f32 = 0.07


func Init() () {
	DirectionRadianGrain = 2.0 * 3.141592654 / i32.f32(NumDirectionRadians)

	// FIXME: ATM, making assumptions about vertical span 
	horizontalScreenSpan := i32.f32(Width) / i32.f32(Height)
	ScreenBoundsTop = 1.0
	ScreenBoundsRight = horizontalScreenSpan
	ScreenBoundsBottom = -1.0
	ScreenBoundsLeft = 0.0 - horizontalScreenSpan

	entity.Init()
	str.print("--- game.Init()")
}


func Update() () {
	setRotationTestPos()
	ccInput.Update()
	entity.Update()
}


var divisor f32 = 1000.0
func SetSnakeAimAndSize(deltaX f32, deltaY f32) () {
	// rotated pos 
	x, y := //rotatePositionByAngle(
		deltaX, 
		0.0 - deltaY //, 
		//CurrSnakeAim)

	CurrSnakeAim    += (x / divisor * 2.0)
	CurrSnakeExtent -= (y / divisor)

	if CurrSnakeExtent > MaxSnakeExtent {
		CurrSnakeExtent = MaxSnakeExtent
	}

	if CurrSnakeExtent < MinSnakeExtent {
		CurrSnakeExtent = MinSnakeExtent
	}

	str.print(str.concat("deltaX: ", f32.str(deltaX)))
	str.print(str.concat("deltaY: ", f32.str(deltaY)))
	//str.print(str.concat("CurrSnakeAim: ", f32.str(CurrSnakeAim)))
	//str.print(str.concat("CurrSnakeExtent: ", f32.str(CurrSnakeExtent)))
}


func GetPosOfRotTest() (x f32, y f32) {
	x = rotX
	y = rotY
}


func GetDistance(aX f32, aY f32, bX f32, bY f32) (out f32) {
	xOff := bX - aX
	yOff := bY - aY
	return f32.pow((xOff ** 2.0) + (yOff ** 2.0), 0.5)
}



// private 

func rotatePositionByAngle(posX f32, posY f32, angle f32) (x f32, y f32) {
	s := f32.sin(angle)
	c := f32.cos(angle)

	return
		posX * c - posY * s,
		posX * s + posY * c
}


func setRotationTestPos() () {
	dist := 0.6

	rotX, rotY = 
		f32.sin(ang) * dist, 
		f32.cos(ang) * dist

	ang += 0.6
}