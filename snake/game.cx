package game

import "ccInput"
import "entity"
import "cavern"


// TODO: 
// 
// * optimize snake segment drawing? (could be... 
//			* oriented, split endcap/half-circles with a connecting ladder, 
//			* 1 triangle, if pointed tip is fine, 
//			* 1 quad, if boxy tipe is fine,
//			* the above 2 plus circle caps, 
//			* 2 oriented quads (forming hexagonal diamond'ish shape), or 
//			* unoriented lookup table of sphere rim points) 
// * juice up resetEventText with blip of white (or light-violet), & shaking? 
// * combine random angle/full360/aim grain vars with num LUT grain vars? 



var Name                  str = "Stretchy"
var NumGrainsOfFull360    i32 = 256 // gives 64 aim possibilities per quadrant 
var Full360Grain          f32
var RadianGrainForLUT     f32 
var VelocityGrain         f32 = 0.00002
var BulletRadius          f32 = 0.015
var timeDelta             f32

// snake 
var MinSnakeExtent                     f32 = 0.1
var MaxSnakeExtent                     f32 = 0.35
var CurrSnakeExtent                    f32 = 0.17
var CurrSnakeAim                       f32 = 0.0
var TailRadius                         f32 = 0.02
var HeadRadius                         f32 = 0.07
var AnalogControlsSensitivityAim       f32 = 0.33
var AnalogControlsSensitivityAimText   str = "Sensitivity of AIM"
var AnalogControlsSensitivitySpeed     f32 = 0.33
var AnalogControlsSensitivitySpeedText str = "Sensitivity of SPEED"
//		 color channel intensities 
var shrinkIntensity                    f32
var growIntensity                      f32
var aimDecreaseIntensity               f32
var aimIncreaseIntensity               f32

// geometry constants (FIXME when CX has constants) 
// 			key angles/aim/rotation/orientation 
var Pi             f32
var HalfPi         f32
var Full360        f32
var ThirdOf360     f32
var TwoThirdsOf360 f32

// 		precalculated lookup table for unit radius circular points/vertices 
var NumCircleLUTPoints         i32 = 20
var SpherePointsAngleIncrement f32
var SpherePointsX              []f32
var SpherePointsY              []f32

// full spectrum cos/sin angle/radius test visualizers 
var xOfBoxyDistance        f32
var yOfBoxyDistance        f32
var xOfPerfectRadius       f32 // current pos 
var yOfPerfectRadius       f32 // current pos 
var visualizerAngle        f32
var visualizerRadius       f32 = 0.6
var visualizerFrameAdvance f32 = 0.3

// game state  
var currTime f32 = 0.0
var Mode     i32
var Stage    i32 = 1 // waves that get progressively harder, like 80s arcade games 

// 		enums 
var MODE_MainMenu    i32 = 0 // FIXME when constants are in CX 
var MODE_OptionsMenu i32 = 1
var MODE_Playing     i32 = 2 // this is used in "<" and ">=" conditions 
var MODE_Dead        i32 = 3

// event/announcement text 
var EventText                  str
var EventTextDuration          f32 = 2.5
var EventTextTimeFadeStarts    f32
var EventTextIntensity         f32
var EventTextX                 f32
var EventTextY                 f32
var ScreenCenterXInGltextSpace f32 // (pixel space) 

// screen 
var ScreenNumPixelsWide i32 = 1280
var ScreenNumPixelsHigh i32 = 720
var ScreenPixelSpan     f32 // in GL graphics coords 
var WindowExtentX       f32 // Y is always 1.0 
var ScreenBoundsTop     f32
var ScreenBoundsRight   f32
var ScreenBoundsBottom  f32
var ScreenBoundsLeft    f32

// menu / text 
var ButtonNames         []str
var TextHeight          f32 = 64.0 // in pixels of text Space 
var TextOffset          f32        // calculated (on init) to be a fraction of TextHeight above 
var TextFraction        f32 = 0.16
var MenuHighlightId     i32 = -1
var LongestCurrMExtent  f32        // ....in the current menu.  FIXME: hardwired
var LongestMainMExtent  f32 = 0.30 // ....in the main    menu.  FIXME: hardwired
var LongestOptiMExtent  f32 = 0.78 // ....in the options menu.  FIXME: hardwired 
var MenuItemBack        str = "                <-"
var SliderHandleExtentX f32
// 		in Gltext space 
var DeltaFromTop        f32
var DeltaFromLeftEdge   f32
var DeltaFromCenter     f32




func Init() () {
	updateTiming()
	setupFrequentlyUsedAngles()
	TextOffset = TextFraction * TextHeight

	// event/announcement text 
	EventText = Name
	ScreenCenterXInGltextSpace = i32.f32(ScreenNumPixelsWide) / 2.0
	resetEventText()

	// screen 
	// (vertical portion of aspect ratio is always 1.0 (in the movie industry) ) 
	// but we're gonna range our gl space from -1.0 to 1.0 (height of 2.0) 
	WindowExtentX = i32.f32(ScreenNumPixelsWide) / i32.f32(ScreenNumPixelsHigh)
	ScreenBoundsTop = 1.0
	ScreenBoundsRight = WindowExtentX
	ScreenBoundsBottom = -1.0
	ScreenBoundsLeft = 0.0 - WindowExtentX
	ScreenPixelSpan = 2.0 / i32.f32(ScreenNumPixelsHigh)

	setupSpherePointTable()
	cavern.Init()
	entity.Init()
	SetMode(MODE_MainMenu)
	str.print("--- game.Init()")
}


var pixelRT f32 // running total for pixel movement 
func Update() () {
	//setPosOfVisualizers()
	updateTiming()
	fadeDirectionalIndicatorsColorIntensity()
	ccInput.Update() 
	entity.Update()

	// text events/announcements 
	if currTime > EventTextTimeFadeStarts {
		EventTextIntensity -= timeDelta * 0.5
		pixelRT            += timeDelta * 50.0
		
		for pixelRT > 1.0 {
			pixelRT -= 1.0

			EventTextX   -= 1.0
			EventTextY   += 1.0
		}
	}
}


var prevTime f32
func updateTiming() () {
	currTime = f64.f32(glfw.GetTime())
	timeDelta = currTime - prevTime
	prevTime = currTime
}


func setupFrequentlyUsedAngles() () {
	Pi             = 3.141592654
	HalfPi         = Pi / 2.0
	Full360        = Pi * 2.0
	ThirdOf360     = Full360 / 3.0
	TwoThirdsOf360 = ThirdOf360 * 2.0
	Full360Grain   = Full360 / i32.f32(NumGrainsOfFull360)
}


func setupSpherePointTable() () {
	SpherePointsAngleIncrement = Full360 / i32.f32(NumCircleLUTPoints)
	str.print("SpherePointsAngleIncrement")
	f32.print(SpherePointsAngleIncrement)

	f := 0.0
	for i := 0; i < NumCircleLUTPoints; i++ {
		SpherePointsX = []f32.append(SpherePointsX, f32.sin(f))
		SpherePointsY = []f32.append(SpherePointsY, f32.cos(f))

		f += SpherePointsAngleIncrement
	}
}


func SetMainMenu() () {
	a := "Play"
	b := "Options"
	c := "Quit"

	ButtonNames = []str{a, b, c}
	setupDeltaFromTop()
	setupDeltaFromLeft(LongestMainMExtent)
}


func SetOptionsMenu() () {
	a := AnalogControlsSensitivityAimText
	b := AnalogControlsSensitivitySpeedText
	c := MenuItemBack

	ButtonNames = []str{a, b, c}	
	setupDeltaFromTop()
	setupDeltaFromLeft(LongestOptiMExtent)
}


func setupDeltaFromTop() () {
	DeltaFromTop = // at this point it's the total space above & below menu items 
		i32.f32(ScreenNumPixelsHigh) - 
		i32.f32([]str.len(ButtonNames)) * 
		TextHeight

	DeltaFromTop /= 2.0 // finale position 
}


func setupDeltaFromLeft(longExtent f32) () {
	LongestCurrMExtent = longExtent
	SliderHandleExtentX = LongestCurrMExtent / 20.0
	DeltaFromCenter = LongestCurrMExtent / ScreenPixelSpan
	DeltaFromLeftEdge =	ScreenCenterXInGltextSpace - DeltaFromCenter
}


func fadeDirectionalIndicatorsColorIntensity() () {
	aimIncreaseIntensity = fadeColorIntensity(aimIncreaseIntensity)
	aimDecreaseIntensity = fadeColorIntensity(aimDecreaseIntensity)
	growIntensity        = fadeColorIntensity(growIntensity)
	shrinkIntensity      = fadeColorIntensity(shrinkIntensity)
}


func fadeColorIntensity(f f32) (out f32) {
	if f > 0.0 {
		f -= (timeDelta * 1.4)
	}

	return f
}


func SetSnakeAimAndSize(deltaX f32, deltaY f32) () {
	rotateMul := 21.5 // only for colors
	div := 90.0
	rotX, rotY := RotatePositionByAngle(deltaX/div, deltaY/div, CurrSnakeAim)

	CurrSnakeAim    += rotX * AnalogControlsSensitivityAim * 1.3
	CurrSnakeExtent += rotY * AnalogControlsSensitivitySpeed * 0.2

	for CurrSnakeAim >= Full360 {
		CurrSnakeAim -= Full360
	}

	for CurrSnakeAim < 0.0 {
		CurrSnakeAim += Full360
	}

	if CurrSnakeExtent > MaxSnakeExtent {
		CurrSnakeExtent = MaxSnakeExtent
	}

	if CurrSnakeExtent < MinSnakeExtent {
		CurrSnakeExtent = MinSnakeExtent
	}



	// set directional indicator colors 
	if rotX > 0.0 {
		aimIncreaseIntensity += rotX * timeDelta * rotateMul
		if aimIncreaseIntensity > 1.0 {
			aimIncreaseIntensity = 1.0
		}
	} else {
		aimIncreaseIntensity = 0.0
	}

	if rotX < 0.0 {
		aimDecreaseIntensity += 0.0 - rotX * timeDelta * rotateMul
		if aimDecreaseIntensity > 1.0 {
			aimDecreaseIntensity = 1.0
		}
	} else {
		aimDecreaseIntensity = 0.0
	}

	if rotY > 0.0 {
		growIntensity += rotY * timeDelta * rotateMul
		if growIntensity > 1.0 {
			growIntensity = 1.0
		}
	} else {
		growIntensity = 0.0
	}

	if rotY < 0.0 {
		shrinkIntensity += 0.0 - rotY * timeDelta * rotateMul
		if shrinkIntensity > 1.0 {
			shrinkIntensity = 1.0
		}
	} else {
		shrinkIntensity = 0.0
	}



	//str.print(str.concat("deltaX: ", f32.str(deltaX)))
	//str.print(str.concat("deltaY: ", f32.str(deltaY)))
	//str.print(str.concat("CurrSnakeAim: ", f32.str(CurrSnakeAim)))
	//str.print(str.concat("CurrSnakeExtent: ", f32.str(CurrSnakeExtent)))
}


func GetShrinkIntensity() (out f32) {
	return shrinkIntensity
}


func GetGrowIntensity() (out f32) {
	return growIntensity
}


func GetAimDecreaseIntensity() (out f32) {
	return aimDecreaseIntensity
}


func GetAimIncreaseIntensity() (out f32) {
	return aimIncreaseIntensity
}


func GetDistance(aX f32, aY f32, bX f32, bY f32) (out f32) {
	xOff := bX - aX
	yOff := bY - aY
	return f32.pow((xOff ** 2.0) + (yOff ** 2.0), 0.5)
}


func RotatePositionByAngle(posX f32, posY f32, angle f32) (x f32, y f32) {
	s := f32.sin(angle)
	c := f32.cos(angle)

	return
		posX * c - posY * s,
		posX * s + posY * c
}


func GetPosOfPerfectRadiusVisualizer() (x f32, y f32) {
	x = xOfPerfectRadius
	y = yOfPerfectRadius
}


func GetPosOfBoxyDistanceVisualizer() (x f32, y f32) {
	x = xOfBoxyDistance
	y = yOfBoxyDistance
}


func SetStage(stage i32) () {
	Stage = stage
	EventText = str.concat("Stage ", i32.str(Stage))
	resetEventText()
}


func resetEventText() () {
	EventTextTimeFadeStarts = currTime + EventTextDuration
	EventTextIntensity = 1.0
	EventTextX = ScreenCenterXInGltextSpace
	EventTextY = 0.0
}


func SetMode(mode i32) () {
	Mode = mode

	if mode == MODE_MainMenu {
		SetMainMenu()
	}

	if mode == MODE_OptionsMenu {
		SetOptionsMenu()
	}
}


func GetTextOnButtonThatPointerIsOn() (out str) {
	if MenuHighlightId == -1 {
		return "Nothing"
	}

	return []str.read(ButtonNames, MenuHighlightId)
}


func SetIdOfButtonThatPointerIsOn(x f64, y f64) () {
	currY := DeltaFromTop // in Gltext space 
	MenuHighlightId = 0 - 1 // signals NOTHING touched, if this value remains on func exit 
	
	for i := 0; i < []str.len(ButtonNames); i++ {
		if  f64.f32(y) > currY && 
			f64.f32(y) < currY + TextHeight {

			MenuHighlightId = i
		}

		currY += TextHeight
	}
}


func SetAnalogControlsSensitivityAim(fraction f32) {
	AnalogControlsSensitivityAim = fraction
}


func SetAnalogControlsSensitivitySpeed(fraction f32) {
	AnalogControlsSensitivitySpeed = fraction
}


func setPosOfVisualizers() () {
	xOfPerfectRadius, 
	yOfPerfectRadius = 
		f32.sin(visualizerAngle) * visualizerRadius, 
		f32.cos(visualizerAngle) * visualizerRadius

	bd := 
		f32.abs(xOfPerfectRadius) + 
		f32.abs(yOfPerfectRadius)

	xOfBoxyDistance, 
	yOfBoxyDistance = 
		f32.sin(visualizerAngle) * bd, 
		f32.cos(visualizerAngle) * bd

	visualizerAngle += 
	visualizerFrameAdvance
}


func PathNodeExists(id i32) (out bool) {
	if id >= 0   &&   id < []f32.len(cavern.CenterX) {
		return true;
	} 

	return false;
}


func GetEndTip() (lX f32, lY f32, rX f32, rY f32) {
	return cavern.EndTipLeftX,
			cavern.EndTipLeftY,
			cavern.EndTipRightX,
			cavern.EndTipRightY
}


func GetAimForNode(id i32) (aim f32) {
	return []f32.read(cavern.Aim, id)
}


func GetThickExtentFor(id i32) (thickExtent f32) {
	return []f32.read(cavern.ThickExtent, id)
}


func GetLeftVertexFor(id i32) (x f32, y f32) {
	return []f32.read(cavern.LeftX, id),
			[]f32.read(cavern.LeftY, id)
}


func GetRightVertexFor(id i32) (x f32, y f32) {
	return []f32.read(cavern.RightX, id),
			[]f32.read(cavern.RightY, id)
}


func Get4NodeVertices(id i32) (
	x0 f32, y0 f32,
	x1 f32, y1 f32,
	x2 f32, y2 f32, 
	x3 f32, y3 f32) {

	farLX := cavern.EndTipLeftX
	farLY := cavern.EndTipLeftY
	farRX := cavern.EndTipRightX
	farRY := cavern.EndTipRightY

	if /* parasite node exists */ id + 1 < cavern.NumNodes {
		// set to next nodes edges 
		farLX = []f32.read(cavern.LeftX,  id + 1)
		farLY = []f32.read(cavern.LeftY,  id + 1)
		farRX = []f32.read(cavern.RightX, id + 1)
		farRY = []f32.read(cavern.RightY, id + 1)
	}

	return
		// close left 
		[]f32.read(cavern.LeftX,  id),
		[]f32.read(cavern.LeftY,  id),
		
		// far left 
		farLX,
		farLY,

		// far right 
		farRX,
		farRY,

		// close right 
		[]f32.read(cavern.RightX, id),
		[]f32.read(cavern.RightY, id)
}
