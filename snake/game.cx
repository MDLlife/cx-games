package game

import "ccInput"
import "entity"



// TODO: 
// 
// * optimize snake segment drawing? (could be... 
//			* oriented, split endcap/half-circles with a connecting ladder, 
//			* 1 triangle, if pointed tip is fine, 
//			* 1 quad, if boxy tipe is fine,
//			* the above 2 plus circle caps, 
//			* 2 oriented quads (forming hexagonal diamond'ish shape), or 
//			* unoriented lookup table of sphere rim points) 
// * juice up ResetEventText with blip of white (or light-violet), & shaking? 



var Name str = "  S  N  A  K  E  "
var NumRadianGrains       i32 = 256 // gives 64 aim/angle/direction possibilities per quadrant 
var RadianGrainForRNG     f32
var RadianGrainForLUT     f32 
var AsteroidVelocityGrain f32 = 0.00002
var BulletRadius          f32 = 0.015
var timeDelta             f32

// special angle constants 
var DubPi f32

// full spectrum cos/sin angle/radius test visualizers 
var xOfBoxyDistance        f32
var yOfBoxyDistance        f32
var xOfPerfectRadius       f32 // current pos 
var yOfPerfectRadius       f32 // current pos 
var visualizerAngle        f32
var visualizerRadius       f32 = 0.6
var visualizerFrameAdvance f32 = 0.3

// screen 
var ScreenNumPixelsWide i32 = 1280
var ScreenNumPixelsHigh i32 = 720
var ScreenPixelHeight   f32 // in GL graphics space 
var ScreenBoundsTop     f32
var ScreenBoundsRight   f32
var ScreenBoundsBottom  f32
var ScreenBoundsLeft    f32

// snake 
var MinSnakeExtent                 f32 = 0.1
var MaxSnakeExtent                 f32 = 0.35
var CurrSnakeExtent                f32 = 0.17
var CurrSnakeAim                   f32 = 0.0
var TailRadius                     f32 = 0.02
var HeadRadius                     f32 = 0.07
var shrinkColorIntensity           f32
var growColorIntensity             f32
var rotateNegativelyColorIntensity f32
var rotatePositivelyColorIntensity f32

// game state  
var currTime f32 = 0.0
var Mode     i32
var Stage    i32 = 1 // waves that get progressively harder, like 80s arcade games 

// 		enums 
var MODE_MainMenu    i32 = 0 // FIXME when constants are in CX 
var MODE_OptionsMenu i32 = 1
var MODE_Playing     i32 = 2 // this is used in "<" and ">=" conditions 
var MODE_Dead        i32 = 3

// event/announcement text 
var EventText                  str
var EventTextDuration          f32 = 2.5
var EventTextTimeFadeStarts    f32
var EventTextColorIntensity    f32
var EventTextX                 f32
var EventTextY                 f32
var ScreenCenterXInGltextSpace f32

// menu / text 
var ButtonNames  []str
var TextHeight   f32 = 64.0 // by the pixels of text Space
var TextOffset   f32        // calculated (on init) to be a fraction of TextHeight above 
var TextFraction f32 = 0.16
var DeltaFromTop f32        // in Gltext space 



func Init() () {
	updateTiming()
	RadianGrainForRNG = 2.0 * 3.141592654 / i32.f32(NumRadianGrains)
	TextOffset = TextFraction * TextHeight

	// event/announcement text 
	EventText = Name
	ScreenCenterXInGltextSpace = i32.f32(ScreenNumPixelsWide) / 2.0
	ResetEventText()

	// screen 
	// (vertical portion of aspect ratio is always 1.0 (in the movie industry) ) 
	// but we're gonna range our gl space from -1.0 to 1.0 (height of 2.0) 
	extentXFromOrigin := i32.f32(ScreenNumPixelsWide) / i32.f32(ScreenNumPixelsHigh)
	ScreenBoundsTop = 1.0
	ScreenBoundsRight = extentXFromOrigin
	ScreenBoundsBottom = -1.0
	ScreenBoundsLeft = 0.0 - extentXFromOrigin
	ScreenPixelHeight = 2.0 / i32.f32(ScreenNumPixelsHigh)

	// setup menu 
	//ButtonNames = []str.append(ButtonNames, "lPQpqjy")    // good test str for visible min/max extents? 
	ButtonNames = []str.append(ButtonNames, "Play")
	ButtonNames = []str.append(ButtonNames, "Options")
	ButtonNames = []str.append(ButtonNames, "Quit")

	DeltaFromTop = // at this point its' the total space above & below menu items 
		i32.f32(ScreenNumPixelsHigh) - 
		i32.f32([]str.len(ButtonNames)) * 
		TextHeight

	DeltaFromTop /= 2.0 // finale position 

	entity.Init()
	str.print("--- game.Init()")
}


var pixelRT f32 // running total for pixel movement 
func Update() () {
	//setPosOfVisualizers()
	updateTiming()
	fadeDirectionalIndicatorsColorIntensity()
	ccInput.Update() 
	entity.Update()

	// text events/announcements 
	if currTime > EventTextTimeFadeStarts {
		EventTextColorIntensity -= timeDelta * 0.5
		pixelRT                += timeDelta * 50.0
		
		for pixelRT > 1.0 {
			pixelRT -= 1.0

			EventTextX   -= 1.0
			EventTextY   += 1.0
		}
	}
}


var prevFrameTime f32
func updateTiming() () {
	currTime = f64.f32(glfw.GetTime())
	timeDelta = currTime - prevFrameTime
	prevFrameTime = currTime
}


func fadeDirectionalIndicatorsColorIntensity() () {
	rotatePositivelyColorIntensity = fadeColorIntensity(rotatePositivelyColorIntensity)
	rotateNegativelyColorIntensity = fadeColorIntensity(rotateNegativelyColorIntensity)
	growColorIntensity = fadeColorIntensity(growColorIntensity)
	shrinkColorIntensity = fadeColorIntensity(shrinkColorIntensity)
}


func fadeColorIntensity(f f32) (out f32) {
	if f > 0.0 {
		f -= (timeDelta * 1.4)
	}

	return f
}


var divisor f32 = 1000.0
func SetSnakeAimAndSize(deltaX f32, deltaY f32) () {
	rotateMul := 21.5
	div := 90.0
	rotX, rotY := RotatePositionByAngle(deltaX/div, deltaY/div, CurrSnakeAim)

	CurrSnakeAim    += rotX
	CurrSnakeExtent += rotY / 14.0

	for CurrSnakeAim >= DubPi {
		CurrSnakeAim -= DubPi
	}

	for CurrSnakeAim < 0.0 {
		CurrSnakeAim += DubPi
	}

	if CurrSnakeExtent > MaxSnakeExtent {
		CurrSnakeExtent = MaxSnakeExtent
	}

	if CurrSnakeExtent < MinSnakeExtent {
		CurrSnakeExtent = MinSnakeExtent
	}



	// set directional indicator colors 
	if rotX > 0.0 {
		rotatePositivelyColorIntensity += rotX * timeDelta * rotateMul
		if rotatePositivelyColorIntensity > 1.0 {
			rotatePositivelyColorIntensity = 1.0
		}
	} else {
		rotatePositivelyColorIntensity = 0.0
	}

	if rotX < 0.0 {
		rotateNegativelyColorIntensity += 0.0 - rotX * timeDelta * rotateMul
		if rotateNegativelyColorIntensity > 1.0 {
			rotateNegativelyColorIntensity = 1.0
		}
	} else {
		rotateNegativelyColorIntensity = 0.0
	}

	if rotY > 0.0 {
		growColorIntensity += rotY * timeDelta * rotateMul
		if growColorIntensity > 1.0 {
			growColorIntensity = 1.0
		}
	} else {
		growColorIntensity = 0.0
	}

	if rotY < 0.0 {
		shrinkColorIntensity += 0.0 - rotY * timeDelta * rotateMul
		if shrinkColorIntensity > 1.0 {
			shrinkColorIntensity = 1.0
		}
	} else {
		shrinkColorIntensity = 0.0
	}



	//str.print(str.concat("deltaX: ", f32.str(deltaX)))
	//str.print(str.concat("deltaY: ", f32.str(deltaY)))
	//str.print(str.concat("CurrSnakeAim: ", f32.str(CurrSnakeAim)))
	//str.print(str.concat("CurrSnakeExtent: ", f32.str(CurrSnakeExtent)))
}


func GetShrinkColorIntensity() (out f32) {
	return shrinkColorIntensity
}


func GetGrowColorIntensity() (out f32) {
	return growColorIntensity
}


func GetRotateNegativelyColorIntensity() (out f32) {
	return rotateNegativelyColorIntensity
}


func GetRotatePositivelyColorIntensity() (out f32) {
	return rotatePositivelyColorIntensity
}


func GetDistance(aX f32, aY f32, bX f32, bY f32) (out f32) {
	xOff := bX - aX
	yOff := bY - aY
	return f32.pow((xOff ** 2.0) + (yOff ** 2.0), 0.5)
}


func RotatePositionByAngle(posX f32, posY f32, angle f32) (x f32, y f32) {
	s := f32.sin(angle)
	c := f32.cos(angle)

	return
		posX * c - posY * s,
		posX * s + posY * c
}


func GetPosOfPerfectRadiusVisualizer() (x f32, y f32) {
	x = xOfPerfectRadius
	y = yOfPerfectRadius
}


func GetPosOfBoxyDistanceVisualizer() (x f32, y f32) {
	x = xOfBoxyDistance
	y = yOfBoxyDistance
}


func SetEventText(s str) () {
	EventText = s
}


func SetStage(stage i32) () {
	Stage = stage
}


func SetDubPi(f f32) () {
	DubPi = f
}


func ResetEventText() () {
	EventTextTimeFadeStarts = currTime + EventTextDuration
	EventTextColorIntensity = 1.0
	EventTextX = ScreenCenterXInGltextSpace
	EventTextY = 0.0
}


func SetMode(mode i32) () {
	Mode = mode
}

func GetButtonThatPointerIsTouching(x f64, y f64) (out str) {
	id := getButtonThatPointerIsTouching(x, y)

	if id == -1 {
		return "Nothing"
	}

	return []str.read(ButtonNames, id)
}


func getButtonThatPointerIsTouching(x f64, y f64) (out i32) {
	currY := DeltaFromTop // in Gltext space 
	
	for i := 0; i < []str.len(ButtonNames); i++ {
		if  f64.f32(y) > currY && 
			f64.f32(y) < currY + TextHeight {

			return i;
		}

		currY += TextHeight
	}

	return -1 // NOTHING touched
}


func setPosOfVisualizers() () {
	xOfPerfectRadius, 
	yOfPerfectRadius = 
		f32.sin(visualizerAngle) * visualizerRadius, 
		f32.cos(visualizerAngle) * visualizerRadius

	bd := 
		f32.abs(xOfPerfectRadius) + 
		f32.abs(yOfPerfectRadius)

	xOfBoxyDistance, 
	yOfBoxyDistance = 
		f32.sin(visualizerAngle) * bd, 
		f32.cos(visualizerAngle) * bd

	visualizerAngle += 
	visualizerFrameAdvance
}


