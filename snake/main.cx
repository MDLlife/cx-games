package main

import "gl"
import "glfw"
import "gltext"

import "ccInput"
import "game"
import "entity"

var dubPi f32



func main () () {
	dubPi = 2.0 * 3.141592654
	posVelocity := 0.02
	negVelocity := -0.02

	tail = new Ball{
		radius: 0.02,
		x: -0.1,
		y: -0.1,
		vx: negVelocity,
		vy: negVelocity,
		gravity: 0.01
	}

	head = new Ball{
		radius: 0.07,
		x: 0.2,
		y: 0.1,
		vx: posVelocity,
		vy: posVelocity,
		gravity: 0.01
	}

	game.Init()
	entity.Init()



	// gl setup

	glfw.Init()
	glfw.CreateWindow("window", game.Width, game.Height, game.Name)
	glfw.MakeContextCurrent("window")
	
	glfw.SetInputMode("window", glfw.Cursor, glfw.CursorDisabled)
	glfw.SetKeyCallback("window", "onKeyEvent")
	glfw.SetMouseButtonCallback("window", "onMouseButtonEvent")
	glfw.SetCursorPosCallback("window", "onCursorPosEvent")
	
	gl.Init()
	program := gl.CreateProgram()
	gl.LinkProgram(program)



	// font setup

	wd := os.GetWorkingDirectory()
	fontFile := str.concat(wd, "fonts/roboto-light.ttf")

	os.Open(fontFile)
	gltext.LoadTrueType("Roboto100", fontFile, 100, 32, 127, gltext.LeftToRight)
	os.Close(fontFile)
	
	os.Open(fontFile)
	gltext.LoadTrueType("Roboto50", fontFile, 50, 32, 127, gltext.LeftToRight)
	os.Close(fontFile)

	gl.Enable(gl.DEPTH_TEST)
	gl.DepthFunc(gl.LESS)
	gl.ClearColor(0.1, 0.1, 0.1, 0.0)








	var ratio f32

	for !glfw.ShouldClose("window") {
		bufferWidth, bufferHeight := glfw.GetFramebufferSize("window")
		ratio = i32.f32(bufferWidth) / i32.f32(bufferHeight)

		//gl.Clear(gl.COLOR_BUFFER_BIT) // original bouncing-ball sample
		gl.Clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)

		//gl.UseProgram(program)
		
		gl.MatrixMode(gl.PROJECTION)
		gl.LoadIdentity()
		gl.Ortho(ratio * -1.0, ratio, -1.0, 1.0, 1.0, -1.0)
		gl.MatrixMode(gl.MODELVIEW)

		//respondToCollisions() // ATM, just the left, right, & bottom edge of screen
		updateSnake()
		entity.Update()
		draw()

		glfw.PollEvents()
		glfw.SwapBuffers("window")
	}
}


func onKeyEvent(window str, key i32, scancode i32, action i32, mods i32) () {
	ccInput.OnKeyEvent(window, key, scancode, action, mods)
}


func onMouseButtonEvent(window str, key i32, action i32, mods i32) () {
	if action == glfw.Press {
		Shoot()
	}
}


func onCursorPosEvent(window str, x f64, y f64) () {
	ccInput.OnCursorPosEvent(window, x, y)
}






















//game
type Ball struct {
	x f32
	y f32
	vx f32
	vy f32
	gravity f32
	radius f32
}

var tail Ball
var head Ball



func Shoot() () {
	fraction := 0.1
	x := []f32.read(entity.X, 0)
	y := []f32.read(entity.Y, 0) 
	velX := f64.f32(game.CurrSnakeExtent * f64.cos(game.CurrSnakeAim))
	velY := f64.f32(game.CurrSnakeExtent * f64.sin(game.CurrSnakeAim))

	entity.SpawnEntity(x, y, velX, velY,
		0.015, // radius
		glfw.GetTime() + 0.5D) // expiry
}


func respondToCollisions() () {
	if tail.x + tail.radius <= -1.0 {
		tail.vx += tail.gravity
	} 

	if tail.x + tail.radius >= 1.0 {
		tail.vx -= tail.gravity
	}

	if tail.y + tail.radius <= -1.0 {
		tail.vy = f32.abs(tail.vy)
	} else {
		tail.vy -= tail.gravity
	}
}


var velocityInc f32 = 0.001 // increment
var maxVelocity f32 = 0.01
var maxNegativeVelocity f32 = -0.01
func updateSnake() () {
	setSnakeLength()

	// tail horizontal motion

	if ccInput.tailMoveLeft {
		tail.vx = boundedDecrease(tail.vx)
	} 
	
	if ccInput.tailMoveRight {
		tail.vx = boundedIncrease(tail.vx)
	} 

	if !ccInput.tailMoveLeft && !ccInput.tailMoveRight {
		tail.vx = rampDownToStop(tail.vx)
	}



	// tail vertical motion

	if ccInput.tailMoveDown {
		tail.vy = boundedDecrease(tail.vy)
	} 
	
	if ccInput.tailMoveUp {
		tail.vy = boundedIncrease(tail.vy)
	} 

	if !ccInput.tailMoveUp && !ccInput.tailMoveDown {
		tail.vy = rampDownToStop(tail.vy)
	}



	// head horizontal motion

	if ccInput.headMoveLeft {
		head.vx = boundedDecrease(head.vx)
	} 
	
	if ccInput.headMoveRight {
		head.vx = boundedIncrease(head.vx)
	} 

	if !ccInput.headMoveLeft && !ccInput.headMoveRight {
		head.vx = rampDownToStop(head.vx)
	}



	// head vertical motion

	if ccInput.headMoveDown {
		head.vy = boundedDecrease(head.vy)
	} 
	
	if ccInput.headMoveUp {
		head.vy = boundedIncrease(head.vy)
	} 

	if !ccInput.headMoveUp && !ccInput.headMoveDown {
		head.vy = rampDownToStop(head.vy)
	}



	head.x += head.vx
	head.y += head.vy
	tail.x += tail.vx
	tail.y += tail.vy
}


var snakeLength f32 // current length
func setSnakeLength() () {
	// figure head offset from tail 
	xOff := head.x - tail.x
	yOff := head.y - tail.y
	snakeLength = f32.pow((xOff ** 2.0) + (yOff ** 2.0), 0.5)
}


func shouldMirrorMoveOnOtherEnd() (out bool) {
	if snakeLength > game.MaxSnakeLength {
		return true
	}

	if snakeLength < game.MinSnakeLength {
		return true
	}

	return false
}


func boundedDecrease(vel f32) (out f32) {
	vel -= velocityInc

	if vel < maxNegativeVelocity {
		vel = maxNegativeVelocity
	}

	return vel
}


func boundedIncrease(vel f32) (out f32) {
	vel += velocityInc

	if vel > maxVelocity {
		vel = maxVelocity
	}

	return vel
}


func rampDownToStop(vel f32) (out f32) {
	if vel > 0.0 {
		vel -= velocityInc

		if vel < 0.0 {
			vel = 0.0
		}
	}

	if vel < 0.0 {
		vel += velocityInc

		if vel > 0.0 {
			vel = 0.0
		}
	}

	return vel
}
























func draw() () {
	//drawOLDSnake()
	drawSnake()
	drawEntities()
	//drawText()
}


func drawSnake() () {
	xOff := f64.f32(game.CurrSnakeExtent * f64.cos(game.CurrSnakeAim))
	yOff := f64.f32(game.CurrSnakeExtent * f64.sin(game.CurrSnakeAim)) 
	
	// tail 
	tX := []f32.read(entity.X, 0) - xOff
	tY := []f32.read(entity.Y, 0) - yOff
	
	// head
	hX := []f32.read(entity.X, 0) + xOff
	hY := []f32.read(entity.Y, 0) + yOff
		
	// tail
	drawBall(tX, tY,
		0.025, //radius
		1.0,
		1.0,
		1.0)

	// head
	drawBall(hX, hY,
		0.05, //radius
		1.0,
		1.0,
		1.0)
}


func drawOLDSnake() () {
	numSegments := 6
	radius := tail.radius
	radiusIncrement := (head.radius - tail.radius) * 0.7 / i32.f32(numSegments) 
	xOff /* head offset from the tail */ := head.x - tail.x
	yOff /* head offset from the tail */ := head.y - tail.y
	xSpan /* between segments */ := xOff / i32.f32(numSegments)
	ySpan /* between segments */ := yOff / i32.f32(numSegments)

	for j := 0; j <= numSegments; j++ {
		if j == numSegments {
			radius = head.radius
		}

		drawBall(
			tail.x + xSpan * i32.f32(j), 
			tail.y + ySpan * i32.f32(j), 
			radius,
			1.0,
			1.0,
			1.0)

		radius += radiusIncrement
	}
}


func drawEntities() () {
	for i := 0; i < []f32.len(entity.X); i++ {
		if []bool.read(entity.Dead, i) == false {
			drawBall(
				[]f32.read(entity.X, i), 
				[]f32.read(entity.Y, i), 
				[]f32.read(entity.Rad, i),
				[]f32.read(entity.Red, i), 
				[]f32.read(entity.Green, i), 
				[]f32.read(entity.Blue, i))
		}
	}
}


func drawText() () {
	//gl.Color4f(0.5, 0.3, 0.8, 1.0)
	//gltext.Printf("Roboto100", 0.0, 0.0, "Hello World")
	
	drawEntityText(tail, 0.0,   -25.0, "W")
	drawEntityText(tail, -25.0,  25.0, "a")
	drawEntityText(tail, 0.0,    25.0, "s")
	drawEntityText(tail,  25.0,  25.0, "d")
	
	drawEntityText(head, 0.0,   -25.0, "i")
	drawEntityText(head, -25.0,  25.0, "j")
	drawEntityText(head, 0.0,    25.0, "k")
	drawEntityText(head,  25.0,  25.0, "l")
}


func drawEntityText(ent Ball, offsetX f32, offsetY f32, s str) () {
	// text space positions 
	midX := i32.f32(game.Width)  / 2.0
	midY := i32.f32(game.Height) / 2.0
	dfc /* distance from center */ := ent.x / game.ScreenBoundsRight
	x := offsetX + midX + midX * dfc
	y := offsetY + i32.f32(game.Height) - (ent.y - game.ScreenBounds.Bottom) * midY

	gl.Color4f(0.8, 0.0, 0.8, 1.0)
	gltext.Printf("Roboto50", x, y, s)
}


func drawBall(x f32, y f32, radius f32, red f32, green f32, blue f32) () {
	gl.Begin(gl.POLYGON)
	gl.Color3f(red, green, blue)

	for i := 0; i < 20; i++ {
		finalX := x + radius * f32.cos(i32.f32(i) * dubPi / 20.0)
		finalY := y + radius * f32.sin(i32.f32(i) * dubPi / 20.0)

		gl.Vertex2f(finalX, finalY)
	}

	gl.End()
}
